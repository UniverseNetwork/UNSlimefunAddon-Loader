From f4a50c7bda4775f0fcc0e4b9e25cfaecb9a64ee4 Mon Sep 17 00:00:00 2001
From: ARVIN3108 <70049331+ARVIN3108@users.noreply.github.com>
Date: Sat, 30 Mar 2024 14:47:42 +0700
Subject: [PATCH] ExoticGarden

---
 pom.xml                                       | 120 +---
 .../addons}/exoticgarden/Berry.java           |  19 +-
 .../addons}/exoticgarden/CustomPotion.java    |  18 +-
 .../addons}/exoticgarden/ExoticGarden.java    | 217 +++----
 .../exoticgarden/ExoticGardenRecipeTypes.java |  14 +
 .../addons/exoticgarden/PlantType.java        |   5 +
 .../addons/exoticgarden}/Schematic.java       | 239 ++++----
 .../sfa_loader/addons}/exoticgarden/Tree.java |  12 +-
 .../exoticgarden/items/BonemealableItem.java  |   5 +-
 .../addons}/exoticgarden/items/Crook.java     |  22 +-
 .../exoticgarden/items/CustomFood.java        |  15 +-
 .../exoticgarden/items/ExoticGardenFruit.java |  33 +-
 .../exoticgarden/items/FoodRegistry.java      | 533 +++++++++++++++++
 .../exoticgarden/items/GrassSeeds.java        |  28 +-
 .../addons}/exoticgarden/items/Kitchen.java   |  74 +--
 .../exoticgarden/items/MagicalEssence.java    |  15 +-
 .../listeners/AndroidListener.java            |  15 +
 .../listeners/PlantsListener.java             | 318 ++++-------
 .../exoticgarden/ExoticGardenRecipeTypes.java |  19 -
 .../exoticgarden/PlantType.java               |  10 -
 .../exoticgarden/items/FoodRegistry.java      | 538 ------------------
 .../listeners/AndroidListener.java            |  25 -
 .../schematics/org/jnbt/ByteArrayTag.java     |  81 ---
 .../schematics/org/jnbt/ByteTag.java          |  73 ---
 .../schematics/org/jnbt/CompoundTag.java      |  82 ---
 .../schematics/org/jnbt/DoubleTag.java        |  73 ---
 .../schematics/org/jnbt/EndTag.java           |  60 --
 .../schematics/org/jnbt/FloatTag.java         |  73 ---
 .../schematics/org/jnbt/IntTag.java           |  73 ---
 .../schematics/org/jnbt/ListTag.java          |  97 ----
 .../schematics/org/jnbt/LongTag.java          |  73 ---
 .../schematics/org/jnbt/NBTConstants.java     |  73 ---
 .../schematics/org/jnbt/NBTInputStream.java   | 179 ------
 .../schematics/org/jnbt/NBTOutputStream.java  | 257 ---------
 .../schematics/org/jnbt/NBTUtils.java         | 152 -----
 .../schematics/org/jnbt/ShortTag.java         |  73 ---
 .../schematics/org/jnbt/StringTag.java        |  73 ---
 .../exoticgarden/schematics/org/jnbt/Tag.java |  70 ---
 .../addons-config/ExoticGarden/config.yml     |   7 +
 .../schematics/CHERRY_TREE.schematic          | Bin
 .../schematics/COCONUT_TREE.schematic         | Bin
 .../schematics/DRAGON_FRUIT_TREE.schematic    | Bin
 .../schematics/LEMON_TREE.schematic           | Bin
 .../schematics/LIME_TREE.schematic            | Bin
 .../schematics/OAK_APPLE_TREE.schematic       | Bin
 .../schematics/ORANGE_TREE.schematic          | Bin
 .../schematics/PEACH_TREE.schematic           | Bin
 .../schematics/PEAR_TREE.schematic            | Bin
 .../schematics/PLUM_TREE.schematic            | Bin
 .../schematics/POMEGRANATE_TREE.schematic     | Bin
 src/main/resources/config.yml                 |   9 -
 src/main/resources/plugin.yml                 |  11 -
 52 files changed, 981 insertions(+), 2902 deletions(-)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/Berry.java (96%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/CustomPotion.java (85%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/ExoticGarden.java (77%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/ExoticGardenRecipeTypes.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/PlantType.java
 rename src/main/java/{io/github/thebusybiscuit/exoticgarden/schematics => id/universenetwork/sfa_loader/addons/exoticgarden}/Schematic.java (57%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/Tree.java (92%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/items/BonemealableItem.java (94%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/items/Crook.java (96%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/items/CustomFood.java (86%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/items/ExoticGardenFruit.java (94%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/FoodRegistry.java
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/items/GrassSeeds.java (89%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/items/Kitchen.java (65%)
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/items/MagicalEssence.java (82%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/listeners/AndroidListener.java
 rename src/main/java/{io/github/thebusybiscuit => id/universenetwork/sfa_loader/addons}/exoticgarden/listeners/PlantsListener.java (59%)
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/ExoticGardenRecipeTypes.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/PlantType.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/items/FoodRegistry.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/listeners/AndroidListener.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteArrayTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/CompoundTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/DoubleTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/EndTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/FloatTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/IntTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ListTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/LongTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTConstants.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTInputStream.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTOutputStream.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTUtils.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ShortTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/StringTag.java
 delete mode 100644 src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/Tag.java
 create mode 100644 src/main/resources/addons-config/ExoticGarden/config.yml
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/CHERRY_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/COCONUT_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/DRAGON_FRUIT_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/LEMON_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/LIME_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/OAK_APPLE_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/ORANGE_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/PEACH_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/PEAR_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/PLUM_TREE.schematic (100%)
 rename src/main/resources/{ => addons-config/ExoticGarden}/schematics/POMEGRANATE_TREE.schematic (100%)
 delete mode 100644 src/main/resources/config.yml
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/pom.xml b/pom.xml
index 791b07c..02df827 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,104 +1,27 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>UNOFFICIAL</version>
+    </parent>
+
     <groupId>io.github.thebusybiscuit</groupId>
     <artifactId>ExoticGarden</artifactId>
     <version>UNOFFICIAL</version>
 
-    <properties>
-        <maven.compiler.source>1.8</maven.compiler.source>
-        <maven.compiler.target>1.8</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
     <repositories>
-        <repository>
-            <id>paper-repo</id>
-            <url>https://repo.destroystokyo.com/repository/maven-public/</url>
-        </repository>
         <repository>
             <id>spigot-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
         </repository>
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io</url>
-        </repository>
-        <repository>
-            <id>bstats-repo</id>
-            <url>https://repo.codemc.org/repository/maven-public</url>
-        </repository>
     </repositories>
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <defaultGoal>clean package</defaultGoal>
-        <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>*</include>
-                </includes>
-            </resource>
-
-            <resource>
-                <directory>${basedir}</directory>
-                <includes>
-                    <include>LICENSE</include>
-                </includes>
-            </resource>
-
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>false</filtering>
-                <includes>
-                    <include>schematics/*</include>
-                </includes>
-            </resource>
-        </resources>
-
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-shade-plugin</artifactId>
-                <version>3.2.4</version>
-
-                <configuration>
-
-                    <!-- Shade dependencies into the output jar -->
-                    <relocations>
-                        <relocation>
-                            <pattern>org.bstats</pattern>
-                            <shadedPattern>io.github.thebusybiscuit.exoticgarden.bstats</shadedPattern>
-                        </relocation>
-                    </relocations>
-
-                    <!-- Exclude unneeded metadata files from shaded dependencies -->
-                    <filters>
-                        <filter>
-                            <artifact>*:*</artifact>
-                            <excludes>
-                                <exclude>META-INF/*</exclude>
-                            </excludes>
-                        </filter>
-                    </filters>
-                </configuration>
-
-                <executions>
-                    <execution>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>shade</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
-        </plugins>
     </build>
 
     <dependencies>
@@ -108,32 +31,17 @@
             <version>1.16.5-R0.1-SNAPSHOT</version>
             <scope>provided</scope>
         </dependency>
-
-        <dependency>
-            <groupId>com.github.slimefun</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>RC-27</version>
-            <scope>provided</scope>
-            <exclusions>
-                <exclusion>
-                    <groupId>io.github.baked-libs</groupId>
-                    <artifactId>dough-api</artifactId>
-                </exclusion>
-            </exclusions>
-        </dependency>
-
         <dependency>
             <groupId>com.google.code.findbugs</groupId>
             <artifactId>jsr305</artifactId>
             <version>3.0.2</version>
             <scope>provided</scope>
         </dependency>
-
         <dependency>
-            <groupId>org.bstats</groupId>
-            <artifactId>bstats-bukkit</artifactId>
-            <version>2.2.1</version>
-            <scope>compile</scope>
+            <groupId>com.github.frostalf</groupId>
+            <artifactId>JNBT</artifactId>
+            <version>9f0c99b251</version>
+            <scope>provided</scope>
         </dependency>
     </dependencies>
-</project>
+</project>
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/Berry.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Berry.java
similarity index 96%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/Berry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Berry.java
index 32b3343..5ab2c8f 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/Berry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Berry.java
@@ -1,18 +1,15 @@
-package io.github.thebusybiscuit.exoticgarden;
-
-import java.util.Arrays;
-import java.util.List;
-
-import javax.annotation.Nullable;
-import javax.annotation.ParametersAreNonnullByDefault;
+package id.universenetwork.sfa_loader.addons.exoticgarden;
 
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import javax.annotation.Nullable;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.Arrays;
+import java.util.List;
 
 public class Berry {
-
     private final ItemStack item;
     private final String id;
     private final String texture;
@@ -35,7 +32,6 @@ public class Berry {
      * Returns the identifier of this Berry.
      *
      * @return the identifier of this Berry
-     *
      * @since 1.7.0, rename of {@link #getName()}.
      */
     public String getID() {
@@ -62,5 +58,4 @@ public class Berry {
         List<Material> soils = Arrays.asList(Material.GRASS_BLOCK, Material.DIRT);
         return soils.contains(type);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/CustomPotion.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/CustomPotion.java
similarity index 85%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/CustomPotion.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/CustomPotion.java
index a51dd5a..8b069c7 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/CustomPotion.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/CustomPotion.java
@@ -1,20 +1,17 @@
-package io.github.thebusybiscuit.exoticgarden;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.ParametersAreNonnullByDefault;
+package id.universenetwork.sfa_loader.addons.exoticgarden;
 
+import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.bukkit.potion.PotionEffect;
 
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.ArrayList;
+import java.util.List;
 
 public final class CustomPotion extends ItemStack {
-
     @ParametersAreNonnullByDefault
     public CustomPotion(String name, Color color, PotionEffect effect, String... lore) {
         super(Material.POTION);
@@ -22,9 +19,7 @@ public final class CustomPotion extends ItemStack {
         PotionMeta meta = (PotionMeta) getItemMeta();
         List<String> list = new ArrayList<>();
 
-        for (String line : lore) {
-            list.add(ChatColors.color(line));
-        }
+        for (String line : lore) list.add(ChatColors.color(line));
 
         meta.setDisplayName(ChatColors.color(name));
         meta.setLore(list);
@@ -33,5 +28,4 @@ public final class CustomPotion extends ItemStack {
 
         setItemMeta(meta);
     }
-
 }
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/ExoticGarden.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/ExoticGarden.java
similarity index 77%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/ExoticGarden.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/ExoticGarden.java
index cb9fd4a..158bfed 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/ExoticGarden.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/ExoticGarden.java
@@ -1,17 +1,16 @@
-package io.github.thebusybiscuit.exoticgarden;
-
-import io.github.thebusybiscuit.exoticgarden.items.BonemealableItem;
-import io.github.thebusybiscuit.exoticgarden.items.Crook;
-import io.github.thebusybiscuit.exoticgarden.items.CustomFood;
-import io.github.thebusybiscuit.exoticgarden.items.ExoticGardenFruit;
-import io.github.thebusybiscuit.exoticgarden.items.FoodRegistry;
-import io.github.thebusybiscuit.exoticgarden.items.GrassSeeds;
-import io.github.thebusybiscuit.exoticgarden.items.Kitchen;
-import io.github.thebusybiscuit.exoticgarden.items.MagicalEssence;
-import io.github.thebusybiscuit.exoticgarden.listeners.AndroidListener;
-import io.github.thebusybiscuit.exoticgarden.listeners.PlantsListener;
+package id.universenetwork.sfa_loader.addons.exoticgarden;
+
+import id.universenetwork.sfa_loader.addons.exoticgarden.items.*;
+import id.universenetwork.sfa_loader.addons.exoticgarden.listeners.AndroidListener;
+import id.universenetwork.sfa_loader.addons.exoticgarden.listeners.PlantsListener;
+import id.universenetwork.sfa_loader.annotations.AddonInfo;
+import id.universenetwork.sfa_loader.enums.PaperRequirementLevel;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;
-import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -22,26 +21,15 @@ import io.github.thebusybiscuit.slimefun4.api.researches.Research;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.items.food.Juice;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.config.Config;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.GitHubBuildsUpdater;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
+import lombok.Getter;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-
-import org.bstats.bukkit.Metrics;
-import org.bukkit.ChatColor;
-import org.bukkit.Color;
-import org.bukkit.Effect;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Tag;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.plugin.java.JavaPlugin;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
@@ -51,29 +39,23 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.logging.Level;
 
-public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
-
-    public static ExoticGarden instance;
+@AddonInfo(requirePaper = PaperRequirementLevel.RECOMMENDED)
+public class ExoticGarden extends AddonTemplate {
+    @Getter
+    private static ExoticGarden instance;
 
-    private final File schematicsFolder = new File(getDataFolder(), "schematics");
+    private final String schematicsPath = "schematics/";
+    @Getter
+    private final File schematicsFolder = new File(getAddonFolder(), schematicsPath);
 
     private final List<Berry> berries = new ArrayList<>();
     private final List<Tree> trees = new ArrayList<>();
     private final Map<String, ItemStack> items = new HashMap<>();
     private final Set<String> treeFruits = new HashSet<>();
 
-    protected Config cfg;
-
     private NestedItemGroup nestedItemGroup;
     private ItemGroup mainItemGroup;
     private ItemGroup miscItemGroup;
@@ -83,48 +65,34 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
     private Kitchen kitchen;
 
     @Override
-    public void onEnable() {
-        PaperLib.suggestPaper(this);
-
-        if (!schematicsFolder.exists()) {
-            schematicsFolder.mkdirs();
-        }
+    public void onLoad() {
+        if (!schematicsFolder.exists()) schematicsFolder.mkdirs();
 
         instance = this;
-        cfg = new Config(this);
-
-        // Setting up bStats
-        new Metrics(this, 4575);
-
-        // Auto Updater
-        if (cfg.getBoolean("options.auto-update") && getDescription().getVersion().startsWith("DEV - ")) {
-            new GitHubBuildsUpdater(this, getFile(), "TheBusyBiscuit/ExoticGarden/master").start();
-        }
 
         registerItems();
 
-        new AndroidListener(this);
-        new PlantsListener(this);
+        Event.registerListeners(new AndroidListener(), new PlantsListener(this));
     }
 
     private void registerItems() {
-        nestedItemGroup = new NestedItemGroup(new NamespacedKey(this, "parent_category"), new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("847d73a91b52393f2c27e453fb89ab3d784054d414e390d58abd22512edd2b")), "&aExotic Garden"));
-        mainItemGroup = new SubItemGroup(new NamespacedKey(this, "plants_and_fruits"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("a5a5c4a0a16dabc9b1ec72fc83e23ac15d0197de61b138babca7c8a29c820")), "&aExotic Garden - Plants and Fruits"));
-        miscItemGroup = new SubItemGroup(new NamespacedKey(this, "misc"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("606be2df2122344bda479feece365ee0e9d5da276afa0e8ce8d848f373dd131")), "&aExotic Garden - Ingredients and Tools"));
-        foodItemGroup = new SubItemGroup(new NamespacedKey(this, "food"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed")), "&aExotic Garden - Food"));
-        drinksItemGroup = new SubItemGroup(new NamespacedKey(this, "drinks"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("2a8f1f70e85825607d28edce1a2ad4506e732b4a5345a5ea6e807c4b313e88")), "&aExotic Garden - Drinks"));
-        magicalItemGroup = new SubItemGroup(new NamespacedKey(this, "magical_crops"), nestedItemGroup, new CustomItemStack(Material.BLAZE_POWDER, "&5Exotic Garden - Magical Plants"));
-
-        kitchen = new Kitchen(this, miscItemGroup);
-        kitchen.register(this);
-        Research kitchenResearch = new Research(new NamespacedKey(this, "kitchen"), 600, "Kitchen", 30);
+        nestedItemGroup = new NestedItemGroup(AbstractAddon.createKey("parent_category"), new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("847d73a91b52393f2c27e453fb89ab3d784054d414e390d58abd22512edd2b")), "&aExotic Garden"));
+        mainItemGroup = new SubItemGroup(AbstractAddon.createKey("plants_and_fruits"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("a5a5c4a0a16dabc9b1ec72fc83e23ac15d0197de61b138babca7c8a29c820")), "&aExotic Garden - Plants and Fruits"));
+        miscItemGroup = new SubItemGroup(AbstractAddon.createKey("misc"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("606be2df2122344bda479feece365ee0e9d5da276afa0e8ce8d848f373dd131")), "&aExotic Garden - Ingredients and Tools"));
+        foodItemGroup = new SubItemGroup(AbstractAddon.createKey("food"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed")), "&aExotic Garden - Food"));
+        drinksItemGroup = new SubItemGroup(AbstractAddon.createKey("drinks"), nestedItemGroup, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("2a8f1f70e85825607d28edce1a2ad4506e732b4a5345a5ea6e807c4b313e88")), "&aExotic Garden - Drinks"));
+        magicalItemGroup = new SubItemGroup(AbstractAddon.createKey("magical_crops"), nestedItemGroup, new CustomItemStack(Material.BLAZE_POWDER, "&5Exotic Garden - Magical Plants"));
+
+        kitchen = new Kitchen(miscItemGroup);
+        kitchen.register(SlimefunAddonInstance.getSFAInstance());
+        Research kitchenResearch = new Research(AbstractAddon.createKey("kitchen"), 600, "Kitchen", 30);
         kitchenResearch.addItems(kitchen);
         kitchenResearch.register();
 
         // @formatter:off
         SlimefunItemStack iceCube = new SlimefunItemStack("ICE_CUBE", "9340bef2c2c33d113bac4e6a1a84d5ffcecbbfab6b32fa7a7f76195442bd1a2", "&bIce Cube");
         new SlimefunItem(miscItemGroup, iceCube, RecipeType.GRIND_STONE, new ItemStack[] {new ItemStack(Material.ICE), null, null, null, null, null, null, null, null}, new SlimefunItemStack(iceCube, 4))
-        .register(this);
+        .register(SlimefunAddonInstance.getSFAInstance());
 
         registerBerry("Grape", ChatColor.RED, Color.RED, PlantType.BUSH, "6ee97649bd999955413fcbf0b269c91be4342b10d0755bad7a17e95fcefdab0");
         registerBerry("Blueberry", ChatColor.BLUE, Color.BLUE, PlantType.BUSH, "a5a5c4a0a16dabc9b1ec72fc83e23ac15d0197de61b138babca7c8a29c820");
@@ -164,7 +132,7 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
         registerTree("Pear", "2de28df844961a8eca8efb79ebb4ae10b834c64a66815e8b645aeff75889664b", "&a", Color.LIME, "Pear Juice", true, Material.DIRT, Material.GRASS_BLOCK);
         registerTree("Dragon Fruit", "847d73a91b52393f2c27e453fb89ab3d784054d414e390d58abd22512edd2b", "&d", Color.FUCHSIA, "Dragon Fruit Juice", true, Material.DIRT, Material.GRASS_BLOCK);
 
-        FoodRegistry.register(this, miscItemGroup, drinksItemGroup, foodItemGroup);
+        FoodRegistry.register(miscItemGroup, drinksItemGroup, foodItemGroup);
 
         registerMagicalPlant("Dirt", new ItemStack(Material.DIRT, 2), "1ab43b8c3d34f125e5a3f8b92cd43dfd14c62402c33298461d4d4d7ce2d3aea", 
         new ItemStack[] {null, new ItemStack(Material.DIRT), null, new ItemStack(Material.DIRT), new ItemStack(Material.WHEAT_SEEDS), new ItemStack(Material.DIRT), null, new ItemStack(Material.DIRT), null});
@@ -227,42 +195,35 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
 
         new Crook(miscItemGroup, new SlimefunItemStack("CROOK", new CustomItemStack(Material.WOODEN_HOE, "&rCrook", "", "&7+ &b25% &7Sapling Drop Rate")), RecipeType.ENHANCED_CRAFTING_TABLE,
         new ItemStack[] {new ItemStack(Material.STICK), new ItemStack(Material.STICK), null, null, new ItemStack(Material.STICK), null, null, new ItemStack(Material.STICK), null})
-        .register(this);
+        .register(SlimefunAddonInstance.getSFAInstance());
 
         SlimefunItemStack grassSeeds = new SlimefunItemStack("GRASS_SEEDS", Material.PUMPKIN_SEEDS, "&rGrass Seeds", "", "&7&oCan be planted on Dirt");
         new GrassSeeds(mainItemGroup, grassSeeds, ExoticGardenRecipeTypes.BREAKING_GRASS, new ItemStack[] {null, null, null, null, new ItemStack(Material.GRASS), null, null, null, null})
-        .register(this);
+        .register(SlimefunAddonInstance.getSFAInstance());
         // @formatter:on
 
         items.put("WHEAT_SEEDS", new ItemStack(Material.WHEAT_SEEDS));
         items.put("PUMPKIN_SEEDS", new ItemStack(Material.PUMPKIN_SEEDS));
         items.put("MELON_SEEDS", new ItemStack(Material.MELON_SEEDS));
 
-        for (Material sapling : Tag.SAPLINGS.getValues()) {
-            items.put(sapling.name(), new ItemStack(sapling));
-        }
+        for (Material sapling : Tag.SAPLINGS.getValues()) items.put(sapling.name(), new ItemStack(sapling));
 
         items.put("GRASS_SEEDS", grassSeeds);
 
         Iterator<String> iterator = items.keySet().iterator();
         while (iterator.hasNext()) {
             String key = iterator.next();
-            cfg.setDefaultValue("grass-drops." + key, true);
+            getConfig().setDefault("grass-drops." + key, true);
 
-            if (!cfg.getBoolean("grass-drops." + key)) {
-                iterator.remove();
-            }
+            if (!getConfig().getBoolean("grass-drops." + key)) iterator.remove();
         }
+        getConfig().save();
 
-        cfg.save();
-
-        for (Tree tree : ExoticGarden.getTrees()) {
-            treeFruits.add(tree.getFruitID());
-        }
+        for (Tree tree : ExoticGarden.getTrees()) treeFruits.add(tree.getFruitID());
     }
 
     @Override
-    public void onDisable() {
+    public void onUnload() {
         instance = null;
     }
 
@@ -275,35 +236,29 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
 
         items.put(id + "_SAPLING", sapling);
 
-        new BonemealableItem(mainItemGroup, sapling, ExoticGardenRecipeTypes.BREAKING_GRASS, new ItemStack[] { null, null, null, null, new ItemStack(Material.GRASS), null, null, null, null }).register(this);
+        new BonemealableItem(mainItemGroup, sapling, ExoticGardenRecipeTypes.BREAKING_GRASS, new ItemStack[]{null, null, null, null, new ItemStack(Material.GRASS), null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
 
-        new ExoticGardenFruit(mainItemGroup, new SlimefunItemStack(id, texture, color + name), ExoticGardenRecipeTypes.HARVEST_TREE, true, new ItemStack[] { null, null, null, null, getItem(id + "_SAPLING"), null, null, null, null }).register(this);
+        new ExoticGardenFruit(mainItemGroup, new SlimefunItemStack(id, texture, color + name), ExoticGardenRecipeTypes.HARVEST_TREE, true, new ItemStack[]{null, null, null, null, getItem(id + "_SAPLING"), null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
 
-        if (pcolor != null) {
-            new Juice(drinksItemGroup, new SlimefunItemStack(juice.toUpperCase().replace(" ", "_"), new CustomPotion(color + juice, pcolor, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER, new ItemStack[] { getItem(id), null, null, null, null, null, null, null, null }).register(this);
-        }
+        if (pcolor != null)
+            new Juice(drinksItemGroup, new SlimefunItemStack(juice.toUpperCase().replace(" ", "_"), new CustomPotion(color + juice, pcolor, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER, new ItemStack[]{getItem(id), null, null, null, null, null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
 
-        if (pie) {
-            new CustomFood(foodItemGroup, new SlimefunItemStack(id + "_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", color + name + " Pie", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"), new ItemStack[] { getItem(id), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), new ItemStack(Material.MILK_BUCKET), SlimefunItems.WHEAT_FLOUR, null, null, null, null }, 13).register(this);
-        }
+        if (pie)
+            new CustomFood(foodItemGroup, new SlimefunItemStack(id + "_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", color + name + " Pie", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"), new ItemStack[]{getItem(id), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), new ItemStack(Material.MILK_BUCKET), SlimefunItems.WHEAT_FLOUR, null, null, null, null}, 13).register(SlimefunAddonInstance.getSFAInstance());
 
-        if (!new File(schematicsFolder, id + "_TREE.schematic").exists()) {
-            saveSchematic(id + "_TREE");
-        }
+        if (!new File(schematicsFolder, id + "_TREE.schematic").exists()) saveSchematic(id + "_TREE");
     }
 
     private void saveSchematic(@Nonnull String id) {
-        try (InputStream input = getClass().getResourceAsStream("/schematics/" + id + ".schematic")) {
+        try (InputStream input = getResource(schematicsPath + id + ".schematic")) {
             try (FileOutputStream output = new FileOutputStream(new File(schematicsFolder, id + ".schematic"))) {
                 byte[] buffer = new byte[1024];
                 int len;
 
-                while ((len = input.read(buffer)) > 0) {
-                    output.write(buffer, 0, len);
-                }
+                while ((len = input.read(buffer)) > 0) output.write(buffer, 0, len);
             }
         } catch (IOException e) {
-            getLogger().log(Level.SEVERE, e, () -> "Failed to load file: \"" + id + ".schematic\"");
+            LogUtils.log(Level.SEVERE, "Failed to load file: \"" + id + ".schematic\"", e);
         }
     }
 
@@ -316,17 +271,17 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
 
         items.put(upperCase + "_BUSH", sfi);
 
-        new BonemealableItem(mainItemGroup, sfi, ExoticGardenRecipeTypes.BREAKING_GRASS, new ItemStack[] { null, null, null, null, new ItemStack(Material.GRASS), null, null, null, null }).register(this);
+        new BonemealableItem(mainItemGroup, sfi, ExoticGardenRecipeTypes.BREAKING_GRASS, new ItemStack[]{null, null, null, null, new ItemStack(Material.GRASS), null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
 
-        new ExoticGardenFruit(mainItemGroup, new SlimefunItemStack(upperCase, texture, color + name), ExoticGardenRecipeTypes.HARVEST_BUSH, true, new ItemStack[] { null, null, null, null, getItem(upperCase + "_BUSH"), null, null, null, null }).register(this);
+        new ExoticGardenFruit(mainItemGroup, new SlimefunItemStack(upperCase, texture, color + name), ExoticGardenRecipeTypes.HARVEST_BUSH, true, new ItemStack[]{null, null, null, null, getItem(upperCase + "_BUSH"), null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
 
-        new Juice(drinksItemGroup, new SlimefunItemStack(upperCase + "_JUICE", new CustomPotion(color + name + " Juice", potionColor, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER, new ItemStack[] { getItem(upperCase), null, null, null, null, null, null, null, null }).register(this);
+        new Juice(drinksItemGroup, new SlimefunItemStack(upperCase + "_JUICE", new CustomPotion(color + name + " Juice", potionColor, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER, new ItemStack[]{getItem(upperCase), null, null, null, null, null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
 
-        new Juice(drinksItemGroup, new SlimefunItemStack(upperCase + "_SMOOTHIE", new CustomPotion(color + name + " Smoothie", potionColor, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] { getItem(upperCase + "_JUICE"), getItem("ICE_CUBE"), null, null, null, null, null, null, null }).register(this);
+        new Juice(drinksItemGroup, new SlimefunItemStack(upperCase + "_SMOOTHIE", new CustomPotion(color + name + " Smoothie", potionColor, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{getItem(upperCase + "_JUICE"), getItem("ICE_CUBE"), null, null, null, null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
 
-        new CustomFood(foodItemGroup, new SlimefunItemStack(upperCase + "_JELLY_SANDWICH", "8c8a939093ab1cde6677faf7481f311e5f17f63d58825f0e0c174631fb0439", color + name + " Jelly Sandwich", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"), new ItemStack[] { null, new ItemStack(Material.BREAD), null, null, getItem(upperCase + "_JUICE"), null, null, new ItemStack(Material.BREAD), null }, 16).register(this);
+        new CustomFood(foodItemGroup, new SlimefunItemStack(upperCase + "_JELLY_SANDWICH", "8c8a939093ab1cde6677faf7481f311e5f17f63d58825f0e0c174631fb0439", color + name + " Jelly Sandwich", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"), new ItemStack[]{null, new ItemStack(Material.BREAD), null, null, getItem(upperCase + "_JUICE"), null, null, new ItemStack(Material.BREAD), null}, 16).register(SlimefunAddonInstance.getSFAInstance());
 
-        new CustomFood(foodItemGroup, new SlimefunItemStack(upperCase + "_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", color + name + " Pie", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"), new ItemStack[] { getItem(upperCase), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), new ItemStack(Material.MILK_BUCKET), SlimefunItems.WHEAT_FLOUR, null, null, null, null }, 13).register(this);
+        new CustomFood(foodItemGroup, new SlimefunItemStack(upperCase + "_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", color + name + " Pie", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"), new ItemStack[]{getItem(upperCase), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), new ItemStack(Material.MILK_BUCKET), SlimefunItems.WHEAT_FLOUR, null, null, null, null}, 13).register(SlimefunAddonInstance.getSFAInstance());
     }
 
     @Nullable
@@ -345,10 +300,10 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
         SlimefunItemStack bush = new SlimefunItemStack(enumStyle + "_BUSH", Material.OAK_SAPLING, color + name + " Plant");
         items.put(upperCase + "_BUSH", bush);
 
-        new BonemealableItem(mainItemGroup, bush, ExoticGardenRecipeTypes.BREAKING_GRASS, new ItemStack[] { null, null, null, null, new ItemStack(Material.GRASS), null, null, null, null })
-            .register(this);
+        new BonemealableItem(mainItemGroup, bush, ExoticGardenRecipeTypes.BREAKING_GRASS, new ItemStack[]{null, null, null, null, new ItemStack(Material.GRASS), null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
 
-        new ExoticGardenFruit(mainItemGroup, new SlimefunItemStack(enumStyle, texture, color + name), ExoticGardenRecipeTypes.HARVEST_BUSH, true, new ItemStack[] { null, null, null, null, getItem(enumStyle + "_BUSH"), null, null, null, null }).register(this);
+        new ExoticGardenFruit(mainItemGroup, new SlimefunItemStack(enumStyle, texture, color + name), ExoticGardenRecipeTypes.HARVEST_BUSH, true, new ItemStack[]{null, null, null, null, getItem(enumStyle + "_BUSH"), null, null, null, null}).register(SlimefunAddonInstance.getSFAInstance());
     }
 
     private void registerMagicalPlant(String name, ItemStack item, String texture, ItemStack[] recipe) {
@@ -361,21 +316,19 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
         berries.add(berry);
 
         new BonemealableItem(magicalItemGroup, new SlimefunItemStack(enumStyle + "_PLANT", Material.OAK_SAPLING, "&r" + name + " Plant"), RecipeType.ENHANCED_CRAFTING_TABLE, recipe)
-            .register(this);
+                .register(SlimefunAddonInstance.getSFAInstance());
 
         MagicalEssence magicalEssence = new MagicalEssence(magicalItemGroup, essence);
 
         magicalEssence.setRecipeOutput(item.clone());
-        magicalEssence.register(this);
+        magicalEssence.register(SlimefunAddonInstance.getSFAInstance());
     }
 
     @Nullable
     public static ItemStack harvestPlant(@Nonnull Block block) {
         SlimefunItem item = BlockStorage.check(block);
 
-        if (item == null) {
-            return null;
-        }
+        if (item == null) return null;
 
         for (Berry berry : getBerries()) {
             if (item.getId().equalsIgnoreCase(berry.getID())) {
@@ -384,11 +337,8 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
                     case DOUBLE_PLANT:
                         Block plant = block;
 
-                        if (Tag.LEAVES.isTagged(block.getType())) {
-                            block = block.getRelative(BlockFace.UP);
-                        } else {
-                            plant = block.getRelative(BlockFace.DOWN);
-                        }
+                        if (Tag.LEAVES.isTagged(block.getType())) block = block.getRelative(BlockFace.UP);
+                        else plant = block.getRelative(BlockFace.DOWN);
 
                         BlockStorage.deleteLocationInfoUnsafely(block.getLocation(), false);
                         block.getWorld().playEffect(block.getLocation(), Effect.STEP_SOUND, Material.OAK_LEAVES);
@@ -414,9 +364,7 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
         Location loc = fruit.getLocation();
         SlimefunItem check = BlockStorage.check(loc);
 
-        if (check == null) {
-            return;
-        }
+        if (check == null) return;
 
         if (treeFruits.contains(check.getId())) {
             BlockStorage.clearBlockInfo(loc);
@@ -427,14 +375,6 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
         }
     }
 
-    public static ExoticGarden getInstance() {
-        return instance;
-    }
-
-    public File getSchematicsFolder() {
-        return schematicsFolder;
-    }
-
     public static Kitchen getKitchen() {
         return instance.kitchen;
     }
@@ -450,19 +390,4 @@ public class ExoticGarden extends JavaPlugin implements SlimefunAddon {
     public static Map<String, ItemStack> getGrassDrops() {
         return instance.items;
     }
-
-    public Config getCfg() {
-        return cfg;
-    }
-
-    @Override
-    public JavaPlugin getJavaPlugin() {
-        return this;
-    }
-
-    @Override
-    public String getBugTrackerURL() {
-        return "https://github.com/TheBusyBiscuit/ExoticGarden/issues";
-    }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/ExoticGardenRecipeTypes.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/ExoticGardenRecipeTypes.java
new file mode 100644
index 0000000..82fb52f
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/ExoticGardenRecipeTypes.java
@@ -0,0 +1,14 @@
+package id.universenetwork.sfa_loader.addons.exoticgarden;
+
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import org.bukkit.Material;
+
+public final class ExoticGardenRecipeTypes {
+    public static final RecipeType KITCHEN = new RecipeType(AbstractAddon.createKey("kitchen"), new SlimefunItemStack("KITCHEN", Material.CAULDRON, "&eKitchen"), "", "&rThis item must be made", "&rin a Kitchen");
+    public static final RecipeType BREAKING_GRASS = new RecipeType(AbstractAddon.createKey("breaking_grass"), new CustomItemStack(Material.GRASS, "&7Breaking Grass"));
+    public static final RecipeType HARVEST_TREE = new RecipeType(AbstractAddon.createKey("harvest_tree"), new CustomItemStack(Material.OAK_LEAVES, "&aHarvesting a Tree", "", "&rYou can obtain this Item by", "&rharvesting the shown Tree"));
+    public static final RecipeType HARVEST_BUSH = new RecipeType(AbstractAddon.createKey("harvest_bush"), new CustomItemStack(Material.OAK_LEAVES, "&aHarvesting a Bush", "", "&rYou can obtain this Item by", "&rharvesting the shown Bush"));
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/PlantType.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/PlantType.java
new file mode 100644
index 0000000..d415ef9
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/PlantType.java
@@ -0,0 +1,5 @@
+package id.universenetwork.sfa_loader.addons.exoticgarden;
+
+public enum PlantType {
+    BUSH, FRUIT, DOUBLE_PLANT, ORE_PLANT
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/Schematic.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Schematic.java
similarity index 57%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/Schematic.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Schematic.java
index 253eebf..2cbb339 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/Schematic.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Schematic.java
@@ -1,29 +1,24 @@
-package io.github.thebusybiscuit.exoticgarden.schematics;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.util.Map;
-import java.util.concurrent.ThreadLocalRandom;
-import java.util.logging.Level;
+package id.universenetwork.sfa_loader.addons.exoticgarden;
 
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
+import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
+import lombok.Getter;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.Rotatable;
+import org.jnbt.*;
 
-import io.github.thebusybiscuit.exoticgarden.ExoticGarden;
-import io.github.thebusybiscuit.exoticgarden.Tree;
-import io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt.ByteArrayTag;
-import io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt.CompoundTag;
-import io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt.NBTInputStream;
-import io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt.ShortTag;
-import io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt.Tag;
-import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Map;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.logging.Level;
 
 /*
  *
@@ -49,61 +44,47 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
  * @author Max
  * @author TheBusyBiscuit
  */
+@Getter
 public class Schematic {
-
-    private final short[] blocks;
-    private final byte[] data;
-    private final short width;
-    private final short length;
-    private final short height;
-    private final String name;
-
-    public Schematic(String name, short[] blocks, byte[] data, short width, short length, short height) {
-        this.blocks = blocks;
-        this.data = data;
-        this.width = width;
-        this.length = length;
-        this.height = height;
-        this.name = name;
-    }
-
     /**
+     * -- GETTER --
+     *
      * @return the blocks
      */
-    public short[] getBlocks() {
-        return blocks;
-    }
-
-    public String getName() {
-        return name;
-    }
-
+    private final short[] blocks;
     /**
+     * -- GETTER --
+     *
      * @return the data
      */
-    public byte[] getData() {
-        return data;
-    }
-
+    private final byte[] data;
     /**
+     * -- GETTER --
+     *
      * @return the width
      */
-    public short getWidth() {
-        return width;
-    }
-
+    private final short width;
     /**
+     * -- GETTER --
+     *
      * @return the length
      */
-    public short getLength() {
-        return length;
-    }
-
+    private final short length;
     /**
+     * -- GETTER --
+     *
      * @return the height
      */
-    public short getHeight() {
-        return height;
+    private final short height;
+    private final String name;
+
+    public Schematic(String name, short[] blocks, byte[] data, short width, short length, short height) {
+        this.blocks = blocks;
+        this.data = data;
+        this.width = width;
+        this.length = length;
+        this.height = height;
+        this.name = name;
     }
 
     public static void pasteSchematic(Location loc, Tree tree) {
@@ -111,13 +92,12 @@ public class Schematic {
 
         try {
             schematic = tree.getSchematic();
-        }
-        catch (IOException e) {
-            ExoticGarden.instance.getLogger().log(Level.WARNING, "Could not paste Schematic for Tree: " + tree.getFruitID() + "_TREE (" + e.getClass().getSimpleName() + ')', e);
+        } catch (IOException e) {
+            LogUtils.log(Level.WARNING, "Could not paste Schematic for Tree: " + tree.getFruitID() + "_TREE (" + e.getClass().getSimpleName() + ')', e);
             return;
         }
 
-        BlockFace[] faces = { BlockFace.NORTH, BlockFace.NORTH_EAST, BlockFace.EAST, BlockFace.SOUTH_EAST, BlockFace.SOUTH, BlockFace.SOUTH_WEST, BlockFace.WEST, BlockFace.NORTH_WEST };
+        BlockFace[] faces = {BlockFace.NORTH, BlockFace.NORTH_EAST, BlockFace.EAST, BlockFace.SOUTH_EAST, BlockFace.SOUTH, BlockFace.SOUTH_WEST, BlockFace.WEST, BlockFace.NORTH_WEST};
         short[] blocks = schematic.getBlocks();
         byte[] blockData = schematic.getData();
 
@@ -125,8 +105,8 @@ public class Schematic {
         short width = schematic.getWidth();
         short height = schematic.getHeight();
 
-        for (int x = 0; x < width; ++x) {
-            for (int y = 0; y < height; ++y) {
+        for (int x = 0; x < width; ++x)
+            for (int y = 0; y < height; ++y)
                 for (int z = 0; z < length; ++z) {
                     int index = y * width * length + z * width + x;
 
@@ -135,21 +115,17 @@ public class Schematic {
                     int blockZ = z + loc.getBlockZ() - width / 2;
                     Block block = new Location(loc.getWorld(), blockX, blockY, blockZ).getBlock();
                     Material blockType = block.getType();
-                    
+
                     if ((!blockType.isSolid() && !blockType.isInteractable() && !SlimefunTag.UNBREAKABLE_MATERIALS.isTagged(blockType)) || blockType == Material.AIR || blockType == Material.CAVE_AIR || org.bukkit.Tag.SAPLINGS.isTagged(blockType)) {
                         Material material = parseId(blocks[index], blockData[index]);
 
                         if (material != null) {
-                            if (blocks[index] != 0) {
-                                block.setType(material);
-                            }
+                            if (blocks[index] != 0) block.setType(material);
 
                             if (org.bukkit.Tag.LEAVES.isTagged(material)) {
-                                if (ThreadLocalRandom.current().nextInt(100) < 25) {
+                                if (ThreadLocalRandom.current().nextInt(100) < 25)
                                     BlockStorage.store(block, tree.getItem());
-                                }
-                            }
-                            else if (material == Material.PLAYER_HEAD) {
+                            } else if (material == Material.PLAYER_HEAD) {
                                 Rotatable s = (Rotatable) block.getBlockData();
                                 s.setRotation(faces[ThreadLocalRandom.current().nextInt(faces.length)]);
                                 block.setBlockData(s);
@@ -160,44 +136,47 @@ public class Schematic {
                         }
                     }
                 }
-            }
-        }
     }
 
     public static Material parseId(short blockId, byte blockData) {
         switch (blockId) {
-        case 6:
-            if (blockData == 0) return Material.OAK_SAPLING;
-            if (blockData == 1) return Material.SPRUCE_SAPLING;
-            if (blockData == 2) return Material.BIRCH_SAPLING;
-            if (blockData == 3) return Material.JUNGLE_SAPLING;
-            if (blockData == 4) return Material.ACACIA_SAPLING;
-            if (blockData == 5) return Material.DARK_OAK_SAPLING;
-            break;
-        case 17:
-            if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12) return Material.OAK_LOG;
-            if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13) return Material.SPRUCE_LOG;
-            if (blockData == 2 || blockData == 6 || blockData == 10 || blockData == 14) return Material.BIRCH_LOG;
-            if (blockData == 3 || blockData == 7 || blockData == 11 || blockData == 15) return Material.JUNGLE_LOG;
-            break;
-        case 18:
-            if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12) return Material.OAK_LEAVES;
-            if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13) return Material.SPRUCE_LEAVES;
-            if (blockData == 2 || blockData == 6 || blockData == 10 || blockData == 14) return Material.BIRCH_LEAVES;
-            if (blockData == 3 || blockData == 7 || blockData == 11 || blockData == 15) return Material.JUNGLE_LEAVES;
-            return Material.OAK_LEAVES;
-        case 161:
-            if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12) return Material.ACACIA_LEAVES;
-            if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13) return Material.DARK_OAK_LEAVES;
-            break;
-        case 162:
-            if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12) return Material.ACACIA_LOG;
-            if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13) return Material.DARK_OAK_LOG;
-            break;
-        case 144:
-            return Material.PLAYER_HEAD;
-        default:
-            return null;
+            case 6:
+                if (blockData == 0) return Material.OAK_SAPLING;
+                if (blockData == 1) return Material.SPRUCE_SAPLING;
+                if (blockData == 2) return Material.BIRCH_SAPLING;
+                if (blockData == 3) return Material.JUNGLE_SAPLING;
+                if (blockData == 4) return Material.ACACIA_SAPLING;
+                if (blockData == 5) return Material.DARK_OAK_SAPLING;
+                break;
+            case 17:
+                if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12) return Material.OAK_LOG;
+                if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13) return Material.SPRUCE_LOG;
+                if (blockData == 2 || blockData == 6 || blockData == 10 || blockData == 14) return Material.BIRCH_LOG;
+                if (blockData == 3 || blockData == 7 || blockData == 11 || blockData == 15) return Material.JUNGLE_LOG;
+                break;
+            case 18:
+                if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12) return Material.OAK_LEAVES;
+                if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13)
+                    return Material.SPRUCE_LEAVES;
+                if (blockData == 2 || blockData == 6 || blockData == 10 || blockData == 14)
+                    return Material.BIRCH_LEAVES;
+                if (blockData == 3 || blockData == 7 || blockData == 11 || blockData == 15)
+                    return Material.JUNGLE_LEAVES;
+                return Material.OAK_LEAVES;
+            case 161:
+                if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12)
+                    return Material.ACACIA_LEAVES;
+                if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13)
+                    return Material.DARK_OAK_LEAVES;
+                break;
+            case 162:
+                if (blockData == 0 || blockData == 4 || blockData == 8 || blockData == 12) return Material.ACACIA_LOG;
+                if (blockData == 1 || blockData == 5 || blockData == 9 || blockData == 13) return Material.DARK_OAK_LOG;
+                break;
+            case 144:
+                return Material.PLAYER_HEAD;
+            default:
+                return null;
         }
 
         return null;
@@ -207,16 +186,14 @@ public class Schematic {
         Map<String, Tag> schematic;
 
         try (NBTInputStream stream = new NBTInputStream(new FileInputStream(file))) {
-            CompoundTag schematicTag = (CompoundTag) stream.readTag();
+            NamedTag schematicTag = stream.readNamedTag();
 
-            if (!schematicTag.getName().equals("Schematic")) {
+            if (!schematicTag.getName().equals("Schematic"))
                 throw new IllegalArgumentException("Tag \"Schematic\" does not exist or is not first");
-            }
 
-            schematic = schematicTag.getValue();
-            if (!schematic.containsKey("Blocks")) {
+            schematic = (Map<String, Tag>) schematicTag.getTag().getValue();
+            if (!schematic.containsKey("Blocks"))
                 throw new IllegalArgumentException("Schematic file is missing a \"Blocks\" tag");
-            }
         }
 
         short width = getChildTag(schematic, "Width", ShortTag.class).getValue();
@@ -231,22 +208,17 @@ public class Schematic {
 
         // We support 4096 block IDs using the same method as vanilla Minecraft, where
         // the highest 4 bits are stored in a separate byte array.
-        if (schematic.containsKey("AddBlocks")) {
+        if (schematic.containsKey("AddBlocks"))
             addId = getChildTag(schematic, "AddBlocks", ByteArrayTag.class).getValue();
-        }
 
         // Combine the AddBlocks data with the first 8-bit block ID
         for (int index = 0; index < blockId.length; index++) {
             if ((index >> 1) >= addId.length) { // No corresponding AddBlocks index
                 blocks[index] = (short) (blockId[index] & 0xFF);
-            }
-            else {
-                if ((index & 1) == 0) {
+            } else {
+                if ((index & 1) == 0)
                     blocks[index] = (short) (((addId[index >> 1] & 0x0F) << 8) + (blockId[index] & 0xFF));
-                }
-                else {
-                    blocks[index] = (short) (((addId[index >> 1] & 0xF0) << 4) + (blockId[index] & 0xFF));
-                }
+                else blocks[index] = (short) (((addId[index >> 1] & 0xF0) << 4) + (blockId[index] & 0xFF));
             }
         }
 
@@ -256,28 +228,21 @@ public class Schematic {
     /**
      * Get child tag of a NBT structure.
      *
-     * @param items
-     *            The parent tag map
-     * @param key
-     *            The name of the tag to get
-     * @param expected
-     *            The expected type of the tag
-     * @return child tag casted to the expected type
-     * @throws IllegalArgumentException
-     *             if the tag does not exist or the tag is not of the
-     *             expected type
+     * @param items    The parent tag map
+     * @param key      The name of the tag to get
+     * @param expected The expected type of the tag
+     * @return child tag cast to the expected type
+     * @throws IllegalArgumentException if the tag does not exist or the tag is not of the
+     *                                  expected type
      */
     private static <T extends Tag> T getChildTag(Map<String, Tag> items, String key, Class<T> expected) {
-        if (!items.containsKey(key)) {
+        if (!items.containsKey(key))
             throw new IllegalArgumentException("Schematic file is missing a \"" + key + "\" tag");
-        }
 
         Tag tag = items.get(key);
-        if (!expected.isInstance(tag)) {
+        if (!expected.isInstance(tag))
             throw new IllegalArgumentException(key + " tag is not of tag type " + expected.getName());
-        }
 
         return expected.cast(tag);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/Tree.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Tree.java
similarity index 92%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/Tree.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Tree.java
index 6714e95..dac45e4 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/Tree.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/Tree.java
@@ -1,16 +1,14 @@
-package io.github.thebusybiscuit.exoticgarden;
+package id.universenetwork.sfa_loader.addons.exoticgarden;
+
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
 
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.thebusybiscuit.exoticgarden.schematics.Schematic;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-
 public class Tree {
 
     private final String sapling;
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/BonemealableItem.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/BonemealableItem.java
similarity index 94%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/items/BonemealableItem.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/BonemealableItem.java
index 141081a..619f6a8 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/BonemealableItem.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/BonemealableItem.java
@@ -1,4 +1,4 @@
-package io.github.thebusybiscuit.exoticgarden.items;
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
@@ -15,7 +15,6 @@ import javax.annotation.ParametersAreNonnullByDefault;
  * @author Walshy
  */
 public class BonemealableItem extends SlimefunItem {
-
     private final ItemSetting<Boolean> disableBoneMeal = new ItemSetting<>(this, "disable-bonemeal", false);
 
     @ParametersAreNonnullByDefault
@@ -28,4 +27,4 @@ public class BonemealableItem extends SlimefunItem {
     public boolean isBonemealDisabled() {
         return disableBoneMeal.getValue();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/Crook.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/Crook.java
similarity index 96%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/items/Crook.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/Crook.java
index de3b548..d56e969 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/Crook.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/Crook.java
@@ -1,13 +1,4 @@
-package io.github.thebusybiscuit.exoticgarden.items;
-
-import java.util.concurrent.ThreadLocalRandom;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Material;
-import org.bukkit.Tag;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
 
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
@@ -18,9 +9,15 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ToolUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.bukkit.inventory.ItemStack;
 
-public class Crook extends SimpleSlimefunItem<ToolUseHandler> implements NotPlaceable, DamageableItem {
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.concurrent.ThreadLocalRandom;
 
+public class Crook extends SimpleSlimefunItem<ToolUseHandler> implements NotPlaceable, DamageableItem {
     private static final int CHANCE = 25;
 
     @ParametersAreNonnullByDefault
@@ -50,5 +47,4 @@ public class Crook extends SimpleSlimefunItem<ToolUseHandler> implements NotPlac
     public boolean isDamageable() {
         return true;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/CustomFood.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/CustomFood.java
similarity index 86%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/items/CustomFood.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/CustomFood.java
index eacc522..5bf808c 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/CustomFood.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/CustomFood.java
@@ -1,15 +1,13 @@
-package io.github.thebusybiscuit.exoticgarden.items;
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
 
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.inventory.ItemStack;
-
-import io.github.thebusybiscuit.exoticgarden.ExoticGardenRecipeTypes;
+import id.universenetwork.sfa_loader.addons.exoticgarden.ExoticGardenRecipeTypes;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import org.bukkit.inventory.ItemStack;
 
-public class CustomFood extends ExoticGardenFruit {
+import javax.annotation.ParametersAreNonnullByDefault;
 
+public class CustomFood extends ExoticGardenFruit {
     private final int food;
 
     @ParametersAreNonnullByDefault
@@ -28,5 +26,4 @@ public class CustomFood extends ExoticGardenFruit {
     public int getFoodValue() {
         return food;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/ExoticGardenFruit.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/ExoticGardenFruit.java
similarity index 94%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/items/ExoticGardenFruit.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/ExoticGardenFruit.java
index 07e44d9..f653d3b 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/ExoticGardenFruit.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/ExoticGardenFruit.java
@@ -1,15 +1,4 @@
-package io.github.thebusybiscuit.exoticgarden.items;
-
-import java.util.Optional;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Material;
-import org.bukkit.Sound;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -17,9 +6,17 @@ import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
+import org.bukkit.Material;
+import org.bukkit.Sound;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
 
-public class ExoticGardenFruit extends SimpleSlimefunItem<ItemUseHandler> {
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.Optional;
 
+public class ExoticGardenFruit extends SimpleSlimefunItem<ItemUseHandler> {
     private final boolean edible;
 
     @ParametersAreNonnullByDefault
@@ -48,11 +45,8 @@ public class ExoticGardenFruit extends SimpleSlimefunItem<ItemUseHandler> {
                 Material material = block.get().getType();
 
                 // Cancel the Block placement if the Player sneaks or the Block is not interactable
-                if (e.getPlayer().isSneaking() || !isInteractable(material)) {
-                    e.cancel();
-                } else {
-                    return;
-                }
+                if (e.getPlayer().isSneaking() || !isInteractable(material)) e.cancel();
+                else return;
             }
 
             if (edible && e.getPlayer().getFoodLevel() < 20) {
@@ -91,5 +85,4 @@ public class ExoticGardenFruit extends SimpleSlimefunItem<ItemUseHandler> {
         p.setFoodLevel(Math.min(level, 20));
         p.setSaturation(p.getSaturation() + getFoodValue());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/FoodRegistry.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/FoodRegistry.java
new file mode 100644
index 0000000..c3b7567
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/FoodRegistry.java
@@ -0,0 +1,533 @@
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
+
+import id.universenetwork.sfa_loader.addons.exoticgarden.CustomPotion;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.SlimefunAddonInstance;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import io.github.thebusybiscuit.slimefun4.implementation.items.food.Juice;
+import org.bukkit.Color;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+/**
+ * In SlimefunAddonInstance.getSFAInstance() class we register all our items and recipes for the dishes.
+ *
+ * @author TheBusyBiscuit
+ * @author SoSeDiK
+ * @author yurinogueira
+ * @author Hellcode48
+ * @author CURVX
+ */
+public final class FoodRegistry {
+    public static void register(@Nonnull ItemGroup misc, @Nonnull ItemGroup drinks, @Nonnull ItemGroup food) {
+        new Juice(drinks, new SlimefunItemStack("LIME_SMOOTHIE", new CustomPotion("&aLime Smoothie", Color.LIME, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("LIME_JUICE"), getItem("ICE_CUBE"), null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("TOMATO_JUICE", new CustomPotion("&4Tomato Juice", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER,
+                new ItemStack[]{getItem("TOMATO"), null, null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("WINE", new CustomPotion("&cWine", Color.RED, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("GRAPE"), new ItemStack(Material.SUGAR), null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("LEMON_ICED_TEA", new CustomPotion("&eLemon Iced Tea", Color.YELLOW, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("LEMON"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("RASPBERRY_ICED_TEA", new CustomPotion("&dRaspberry Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("RASPBERRY"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("PEACH_ICED_TEA", new CustomPotion("&dPeach Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("PEACH"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("STRAWBERRY_ICED_TEA", new CustomPotion("&4Strawberry Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("STRAWBERRY"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("CHERRY_ICED_TEA", new CustomPotion("&cCherry Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("CHERRY"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("THAI_TEA", new CustomPotion("&6Thai Tea", Color.RED, new PotionEffect(PotionEffectType.SATURATION, 14, 0), "", "&7&oRestores &b&o" + "7.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("TEA_LEAF"), new ItemStack(Material.SUGAR), SlimefunItems.HEAVY_CREAM, getItem("COCONUT_MILK"), null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("PUMPKIN_BREAD", "f3487d457f9062d787a3e6ce1c4664bf7402ec67dd111256f19b38ce4f670", "&rPumpkin Bread", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.PUMPKIN), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, null, null, null, null, null, null},
+                8)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("MAYO", "7f8d536c8c2c2596bcc1709590a9d7e33061c56e658974cd81bb832ea4d8842", "&rMayo"), RecipeType.GRIND_STONE,
+                new ItemStack[]{new ItemStack(Material.EGG), null, null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("MUSTARD", "9b9e99621b9773b29e375e62c6495ff1ac847f85b29816c2eb77b587874ba62", "&eMustard"), RecipeType.GRIND_STONE,
+                new ItemStack[]{getItem("MUSTARD_SEED"), null, null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("BBQ_SAUCE", "a86f19bf23d248e662c9c8b7fa15efb8a1f1d5bdacd3b8625a9b59e93ac8a", "&cBBQ Sauce"), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("TOMATO"), getItem("MUSTARD"), getItem("SALT"), new ItemStack(Material.SUGAR), null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("VEGETABLE_OIL", "2acb28fb8a310443af02c7a1283ace95a9906b2e0e6f3636597edbe8cad4e", "&rVegetable Oil"), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{new ItemStack(Material.BEETROOT_SEEDS), new ItemStack(Material.WATER_BUCKET), null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("CORNMEAL", Material.SUGAR, "&rCornmeal"), RecipeType.GRIND_STONE,
+                new ItemStack[]{getItem("CORN"), null, null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("YEAST", "606be2df2122344bda479feece365ee0e9d5da276afa0e8ce8d848f373dd131", "&rYeast"), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{new ItemStack(Material.SUGAR), new ItemStack(Material.WATER_BUCKET), null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("MOLASSES", "f21d7b155edf440cb87ec94487cba64e8d128171eb1187c26d5ffe58bd794c", "&8Molasses"), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{new ItemStack(Material.BEETROOT), new ItemStack(Material.SUGAR_CANE), new ItemStack(Material.WATER_BUCKET), null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("BROWN_SUGAR", "964d4247278e1498374aa6b0e47368fe4f138abc94e583e8839965fbe241be", "&rBrown Sugar"), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{new ItemStack(Material.SUGAR), getItem("MOLASSES"), null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new SlimefunItem(misc, new SlimefunItemStack("COUNTRY_GRAVY", "f21fa9439bfd8384464146f9c67ebd4c5fbf4196924892627eadf3bce1ff", "&rCountry Gravy"), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.SUGAR), getItem("BLACK_PEPPER"), null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_BAR", "819f948d17718adace5dd6e050c586229653fef645d7113ab94d17b639cc466", "&rChocolate Bar", "", "&7&oRestores &b&o" + "1.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.COCOA_BEANS), SlimefunItems.HEAVY_CREAM, null, null, null, null, null, null, null},
+                3)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("POTATO_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&rPotato Salad", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BAKED_POTATO), getItem("MAYO"), getItem("ONION"), new ItemStack(Material.BOWL), null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHICKEN_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rChicken Sandwich", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.COOKED_CHICKEN), getItem("MAYO"), new ItemStack(Material.BREAD), null, null, null, null, null, null},
+                11)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("FISH_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rFish Sandwich", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.COOKED_COD), getItem("MAYO"), new ItemStack(Material.BREAD), null, null, null, null, null, null},
+                11)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BAGEL", "502e92f13de3bee69228c384478e761230681e5fce9bda195daeaf8484139331", "&rBagel", "", "&7&oRestores &b&o" + "2.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("YEAST"), SlimefunItems.WHEAT_FLOUR, null, null, null, null, null, null, null},
+                4)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("EGG_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&rEgg Salad", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.EGG), getItem("MAYO"), new ItemStack(Material.BOWL), null, null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("TOMATO_SOUP", "76366f17428a4990126844f74a02dbf5524f35be1323f8fab0bf61a57ff41de3", "&4Tomato Soup", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BOWL), getItem("TOMATO"), null, null, null, null, null, null, null},
+                11)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("STRAWBERRY_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&cStrawberry Salad", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BOWL), getItem("STRAWBERRY"), getItem("LETTUCE"), getItem("TOMATO"), null, null, null, null, null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("GRAPE_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&cGrape Salad", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BOWL), getItem("GRAPE"), getItem("LETTUCE"), getItem("TOMATO"), null, null, null, null, null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHICKEN_CURRY", "d09e0dd5489f03efdc8083088f521b82946cdec98fc1c94c4e09792e4735184a", "&rChicken Curry", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CILANTRO"), new ItemStack(Material.COOKED_CHICKEN), getItem("BROWN_SUGAR"), getItem("CURRY_LEAF"), getItem("VEGETABLE_OIL"), getItem("CURRY_LEAF"), getItem("ONION"), new ItemStack(Material.BOWL), getItem("GARLIC")},
+                16)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("COCONUT_CHICKEN_CURRY", "d09e0dd5489f03efdc8083088f521b82946cdec98fc1c94c4e09792e4735184a", "&rCoconut Chicken Curry", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("COCONUT"), getItem("COCONUT"), getItem("CHICKEN_CURRY"), null, null, null, null, null, null},
+                19)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BISCUIT", "ef094456fd794b6531fc6dec6f396b680b9536002063e11ce24d0a74b0b7d885", "&6Biscuit", "", "&7&oRestores &b&o" + "2.0" + " &7&oHunger"),
+                new ItemStack[]{SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, null, null, null, null, null, null, null},
+                4)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BISCUITS_GRAVY", "28bbb835e22d9ec62e22411b8e015138d5597283ad36e618fe44ba5f1a6b60fd", "&rBiscuits and Country Gravy", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("COUNTRY_GRAVY"), getItem("COUNTRY_GRAVY"), getItem("COUNTRY_GRAVY"), getItem("BISCUIT"), getItem("BISCUIT"), getItem("BISCUIT"), null, new ItemStack(Material.BOWL), null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&rCheesecake", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null, null, null},
+                16)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHERRY_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&cCherry Cheesecake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHEESECAKE"), getItem("CHERRY"), null, null, null, null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BLUEBERRY_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&9Blueberry Cheesecake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHEESECAKE"), getItem("BLUEBERRY"), null, null, null, null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("PUMPKIN_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&6Pumpkin Cheesecake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHEESECAKE"), new ItemStack(Material.PUMPKIN), null, null, null, null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("SWEETENED_PEAR_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&6Sweetened Pear Cheesecake", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHEESECAKE"), new ItemStack(Material.SUGAR), getItem("PEAR"), null, null, null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BLACKBERRY_COBBLER", "c6c36523c2d11b8c8ea2e992291c52a654760ec72dcc32da2cb63616481ee", "&8Blackberry Cobbler", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.SUGAR), getItem("BLACKBERRY"), SlimefunItems.WHEAT_FLOUR, null, null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("PAVLOVA", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&rPavlova", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("LEMON"), getItem("STRAWBERRY"), new ItemStack(Material.SUGAR), new ItemStack(Material.EGG), SlimefunItems.HEAVY_CREAM, null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CORN_ON_THE_COB", Material.GOLDEN_CARROT, "&6Corn on the Cob", "", "&7&oRestores &b&o" + "4.5" + " &7&oHunger"),
+                new ItemStack[]{SlimefunItems.BUTTER, getItem("CORN"), null, null, null, null, null, null, null},
+                9)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CREAMED_CORN", "9174b34c549eed8bafe727618bab6821afcb1787b5decd1eecd6c213e7e7c6d", "&rCreamed Corn", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
+                new ItemStack[]{SlimefunItems.HEAVY_CREAM, getItem("CORN"), new ItemStack(Material.BOWL), null, null, null, null, null, null},
+                8)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BACON", "e7ba22d5df21e821a6de4b8c9d373a3aa187d8ae74f288a82d2b61f272e5", "&rBacon", "", "&7&oRestores &b&o" + "1.5" + " &7&oHunger"),
+                3,
+                new ItemStack[]{new ItemStack(Material.COOKED_PORKCHOP), null, null, null, null, null, null, null, null},
+                3)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rSandwich", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), getItem("MAYO"), new ItemStack(Material.COOKED_BEEF), getItem("TOMATO"), getItem("LETTUCE"), null, null, null, null},
+                19)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BLT", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rBLT", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_PORKCHOP), getItem("TOMATO"), getItem("LETTUCE"), null, null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("LEAFY_CHICKEN_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rLeafy Chicken Sandwich", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHICKEN_SANDWICH"), getItem("LETTUCE"), null, null, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("LEAFY_FISH_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rLeafy Fish Sandwich", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("FISH_SANDWICH"), getItem("LETTUCE"), null, null, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("HAMBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rHamburger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_BEEF), null, null, null, null, null, null, null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rCheeseburger", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("HAMBURGER"), SlimefunItems.CHEESE, null, null, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BACON_CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rBacon Cheeseburger", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHEESEBURGER"), getItem("BACON"), null, null, null, null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("DELUXE_CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rDeluxe Cheeseburger", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHEESEBURGER"), getItem("LETTUCE"), getItem("TOMATO"), null, null, null, null, null, null},
+                16)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("GARLIC_BREAD", "a33fa7d3e63b280a5d7e2bb09332dff86b17decd2b09eccdd62da5265597f74d", "&rGarlic Bread", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("GARLIC"), new ItemStack(Material.BREAD), null, null, null, null, null, null, null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("GARLIC_CHEESE_BREAD", "a33fa7d3e63b280a5d7e2bb09332dff86b17decd2b09eccdd62da5265597f74d", "&rGarlic Cheese Bread", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{SlimefunItems.CHEESE, getItem("GARLIC"), new ItemStack(Material.BREAD), null, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CARROT_CAKE", "f9136514f342e7c5208a1422506a866158ef84d2b249220139e8bf6032e193", "&rCarrot Cake", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.CARROT), SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.SUGAR), new ItemStack(Material.EGG), null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHICKEN_BURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rChickenburger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_CHICKEN), null, null, null, null, null, null, null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHICKEN_CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rChicken Cheeseburger", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHICKEN_BURGER"), SlimefunItems.CHEESE, null, null, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BACON_BURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rBacon Burger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), getItem("BACON"), null, null, null, null, null, null, null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BACON_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rBacon Sandwich", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), getItem("BACON"), getItem("MAYO"), getItem("TOMATO"), getItem("LETTUCE"), null, null, null, null},
+                19)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("TACO", "98ced74a22021a535f6bce21c8c632b273dc2d9552b71a38d57269b3538cf", "&rTaco", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORNMEAL"), new ItemStack(Material.COOKED_BEEF), getItem("LETTUCE"), getItem("TOMATO"), getItem("CHEESE"), null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("FISH_TACO", "98ced74a22021a535f6bce21c8c632b273dc2d9552b71a38d57269b3538cf", "&rFish Taco", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORNMEAL"), new ItemStack(Material.COOKED_COD), getItem("LETTUCE"), getItem("TOMATO"), getItem("CHEESE"), null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("STREET_TACO", "1ad7c0a04f1485c7a3ef261a48ee83b2f1aa701ab11f3fc911e0366a9b97e", "&rStreet Taco", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORNMEAL"), new ItemStack(Material.COOKED_BEEF), getItem("CILANTRO"), getItem("ONION"), null, null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("JAMMY_DODGER", "1d00dfb3a57c068a0cc7b624d8d8852070435d2634c0e5da9cbbab46174af0df", "&cJammy Dodger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{null, getItem("BISCUIT"), null, null, getItem("RASPBERRY_JUICE"), null, null, getItem("BISCUIT"), null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("PANCAKES", "347f4f5a74c6691280cd80e7148b49b2ce17dcf64fd55368627f5d92a976a6a8", "&rPancakes", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("WHEAT_FLOUR"), new ItemStack(Material.SUGAR), getItem("BUTTER"), new ItemStack(Material.EGG), new ItemStack(Material.EGG), null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BLUEBERRY_PANCAKES", "347f4f5a74c6691280cd80e7148b49b2ce17dcf64fd55368627f5d92a976a6a8", "&rBlueberry Pancakes", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("PANCAKES"), getItem("BLUEBERRY"), null, null, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("SWEET_BERRY_PANCAKES", "e44ca99e308a186b30281b2017c44189acafb591152f81feea96fecbe57", "&rSweet Berry Pancakes", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("PANCAKES"), new ItemStack(Material.SWEET_BERRIES), null, null, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("FRIES", "563b8aeaf1df11488efc9bd303c233a87ccba3b33f7fba9c2fecaee9567f053", "&rFries", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.POTATO), getItem("SALT"), null, null, null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("POPCORN", "1497b147cfae52205597f72e3c4ef52512e9677020e4b4fa7512c3c6acdd8c1", "&rPopcorn", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORN"), getItem("BUTTER"), null, null, null, null, null, null, null},
+                8)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("SWEET_POPCORN", "1497b147cfae52205597f72e3c4ef52512e9677020e4b4fa7512c3c6acdd8c1", "&rPopcorn &7(Sweet)", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORN"), getItem("BUTTER"), new ItemStack(Material.SUGAR), null, null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("SALTY_POPCORN", "1497b147cfae52205597f72e3c4ef52512e9677020e4b4fa7512c3c6acdd8c1", "&rPopcorn &7(Salty)", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORN"), getItem("BUTTER"), getItem("SALT"), null, null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("SHEPARDS_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&rShepard's Pie", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CABBAGE"), new ItemStack(Material.CARROT), SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.COOKED_BEEF), getItem("TOMATO"), null, null, null, null},
+                16)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHICKEN_POT_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&rChicken Pot Pie", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.COOKED_CHICKEN), new ItemStack(Material.CARROT), SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.POTATO), null, null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_CAKE", "9119fca4f28a755d37fbe5dcf6d8c3ef50fe394c1a7850bc7e2b71ee78303c4c", "&rChocolate Cake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, new ItemStack(Material.EGG), null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CREAM_COOKIE", "dfd71e20fc50abf0de2ef7decfc01ce27ad51955759e072ceaab96355f594f0", "&rCream Cookie", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BLUEBERRY_MUFFIN", "83794c736fc76e45706830325b95969466d86f8d7b28fce8edb2c75e2ab25c", "&rBlueberry Muffin", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("BLUEBERRY"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("PUMPKIN_MUFFIN", "83794c736fc76e45706830325b95969466d86f8d7b28fce8edb2c75e2ab25c", "&rPumpkin Muffin", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.PUMPKIN), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_CHIP_MUFFIN", "83794c736fc76e45706830325b95969466d86f8d7b28fce8edb2c75e2ab25c", "&rChocolate Chip Muffin", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BOSTON_CREAM_PIE", "dfd71e20fc50abf0de2ef7decfc01ce27ad51955759e072ceaab96355f594f0", "&rBoston Cream Pie", "", "&7&oRestores &b&o" + "4.5" + " &7&oHunger"),
+                new ItemStack[]{null, getItem("CHOCOLATE_BAR"), null, null, SlimefunItems.HEAVY_CREAM, null, null, getItem("BISCUIT"), null},
+                9)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("HOT_DOG", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rHot Dog", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
+                new ItemStack[]{null, null, null, null, new ItemStack(Material.COOKED_PORKCHOP), null, null, new ItemStack(Material.BREAD), null},
+                10)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BACON_WRAPPED_CHEESE_FILLED_HOT_DOG", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rBacon wrapped Cheese filled Hot Dog", "&7&o\"When I chef\" - @Eyamaz", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("BACON"), getItem("HOT_DOG"), getItem("BACON"), null, getItem("CHEESE"), null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BBQ_BACON_WRAPPED_HOT_DOG", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rBBQ Bacon wrapped Hot Dog", "&7&o\"wanna talk about hot dogs?\" - @Pahimar", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("BACON"), getItem("HOT_DOG"), getItem("BACON"), null, getItem("BBQ_SAUCE"), null, null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BBQ_DOUBLE_BACON_WRAPPED_HOT_DOG_IN_A_TORTILLA_WITH_CHEESE", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rBBQ Double Bacon wrapped Hot Dog in a Tortilla with Cheese", "&7&o\"When I chef\" - @Eyamaz", "", "&7&oRestores &b&o" + "10.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("BACON"), getItem("BBQ_SAUCE"), getItem("BACON"), getItem("BACON"), new ItemStack(Material.COOKED_PORKCHOP), getItem("BACON"), getItem("CORNMEAL"), getItem("CHEESE"), getItem("CORNMEAL")},
+                20)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(drinks, new SlimefunItemStack("SWEETENED_TEA", "d8e94ddd769a5bea748376b4ec7383fd36d267894d7c3bee011e8e4f5fcd7", "&aSweetened Tea", "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("TEA_LEAF"), new ItemStack(Material.SUGAR), null, null, null, null, null, null, null},
+                6)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(drinks, new SlimefunItemStack("HOT_CHOCOLATE", "411511bdd55bcb82803c8039f1c155fd43062636e23d4d46c4d761c04d22c2", "&6Hot Chocolate", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHOCOLATE_BAR"), SlimefunItems.HEAVY_CREAM, null, null, null, null, null, null, null},
+                8)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(drinks, new SlimefunItemStack("PINACOLADA", "2a8f1f70e85825607d28edce1a2ad4506e732b4a5345a5ea6e807c4b313e88", "&6Pinacolada", "", "&7&oRestores &b&o" + "7.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("PINEAPPLE"), getItem("ICE_CUBE"), getItem("COCONUT_MILK"), null, null, null, null, null, null},
+                14)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_STRAWBERRY", "6d4ed7c73ac2853dfcaa9ca789fb18da1d47b17ad68b2da748dbd11de1a49ef", "&cChocolate Strawberry", "", "&7&oRestores &b&o" + "2.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHOCOLATE_BAR"), getItem("STRAWBERRY"), null, null, null, null, null, null, null},
+                5)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("LEMONADE", new CustomPotion("&eLemonade", Color.YELLOW, new PotionEffect(PotionEffectType.SATURATION, 8, 0), "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("LEMON_JUICE"), new ItemStack(Material.SUGAR), null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("SWEET_POTATO_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&rSweet Potato Pie", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("SWEET_POTATO"), new ItemStack(Material.EGG), SlimefunItems.HEAVY_CREAM, SlimefunItems.WHEAT_FLOUR, null, null, null, null, null},
+                13)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("LAMINGTON", "9119fca4f28a755d37fbe5dcf6d8c3ef50fe394c1a7850bc7e2b71ee78303c4c", "&rLamington", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, getItem("COCONUT"), null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("WAFFLES", "347f4f5a74c6691280cd80e7148b49b2ce17dcf64fd55368627f5d92a976a6a8", "&rWaffles", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("WHEAT_FLOUR"), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), getItem("BUTTER"), null, null, null, null, null},
+                12)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CLUB_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rClub Sandwich", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), getItem("MAYO"), getItem("BACON"), getItem("TOMATO"), getItem("LETTUCE"), getItem("MUSTARD"), null, null, null},
+                19)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("BURRITO", "a387a621e266186e60683392eb274ebb225b04868ab959177d9dc181d8f286", "&rBurrito", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORNMEAL"), new ItemStack(Material.COOKED_BEEF), getItem("LETTUCE"), getItem("TOMATO"), getItem("HEAVY_CREAM"), getItem("CHEESE"), null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHICKEN_BURRITO", "a387a621e266186e60683392eb274ebb225b04868ab959177d9dc181d8f286", "&rChicken Burrito", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("CORNMEAL"), new ItemStack(Material.COOKED_CHICKEN), getItem("LETTUCE"), getItem("TOMATO"), getItem("HEAVY_CREAM"), getItem("CHEESE"), null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("GRILLED_SANDWICH", "baee84d19c85aff796c88abda21ec4c92c655e2d67b72e5e77b5aa5e99ed", "&rGrilled Sandwich", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
+                new ItemStack[]{new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_PORKCHOP), getItem("CHEESE"), null, null, null, null, null, null},
+                11)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("LASAGNA", "03a3574a848f36ae37121e9058aa61c12a261ee5a3716f6d8269e11e19e37", "&rLasagna", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("TOMATO"), getItem("CHEESE"), SlimefunItems.WHEAT_FLOUR, getItem("TOMATO"), getItem("CHEESE"), new ItemStack(Material.COOKED_BEEF), null, null, null},
+                17)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("ICE_CREAM", "95366ca17974892e4fd4c7b9b18feb11f05ba2ec47aa5035c81a9533b28", "&rIce Cream", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("HEAVY_CREAM"), getItem("ICE_CUBE"), new ItemStack(Material.SUGAR), new ItemStack(Material.COCOA_BEANS), getItem("STRAWBERRY"), null, null, null, null},
+                16)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("PINEAPPLE_JUICE", new CustomPotion("&6Pineapple Juice", Color.ORANGE, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER,
+                new ItemStack[]{getItem("PINEAPPLE"), null, null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new Juice(drinks, new SlimefunItemStack("PINEAPPLE_SMOOTHIE", new CustomPotion("&6Pineapple Smoothie", Color.ORANGE, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{getItem("PINEAPPLE_JUICE"), getItem("ICE_CUBE"), null, null, null, null, null, null, null})
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("TIRAMISU", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("HEAVY_CREAM"), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), new ItemStack(Material.COCOA_BEANS), new ItemStack(Material.EGG), null, null, null, null},
+                16)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("TIRAMISU_WITH_STRAWBERRIES", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu with Strawberries", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("TIRAMISU"), getItem("STRAWBERRY"), null, null, null, null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("TIRAMISU_WITH_RASPBERRIES", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu with Raspberries", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("TIRAMISU"), getItem("RASPBERRY"), null, null, null, null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("TIRAMISU_WITH_BLACKBERRIES", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu with Blackberries", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("TIRAMISU"), getItem("BLACKBERRY"), null, null, null, null, null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_PEAR_CAKE", "9119fca4f28a755d37fbe5dcf6d8c3ef50fe394c1a7850bc7e2b71ee78303c4c", "&rChocolate Pear Cake", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
+                new ItemStack[]{getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, getItem("PEAR"), new ItemStack(Material.EGG), null, null, null},
+                19)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("APPLE_PEAR_CAKE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&cApple Pear Cake", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("OAK_APPLE"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, getItem("PEAR"), new ItemStack(Material.EGG), null, null, null},
+                18)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+        new CustomFood(food, new SlimefunItemStack("STUFFED_RED_BELL_PEPPER", "b6c98b410123b0944422303798fc2db8cea0feeb09d0da40f5361b59498f3e8b", "&cStuffed Red Bell Pepper", "", "&7&oRestores &b&o" + "7.0" + " &7&oHunger"),
+                new ItemStack[]{getItem("RED_BELL_PEPPER"), getItem("ONION"), getItem("GARLIC"), getItem("TOMATO"), null, null, null, null, null},
+                14)
+                .register(SlimefunAddonInstance.getSFAInstance());
+
+    }
+
+    @Nullable
+    private static ItemStack getItem(@Nonnull String id) {
+        SlimefunItem item = SlimefunItem.getById(id);
+        return item != null ? item.getItem() : null;
+    }
+}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/GrassSeeds.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/GrassSeeds.java
similarity index 89%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/items/GrassSeeds.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/GrassSeeds.java
index 41423c7..1c2485f 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/GrassSeeds.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/GrassSeeds.java
@@ -1,7 +1,11 @@
-package io.github.thebusybiscuit.exoticgarden.items;
-
-import javax.annotation.ParametersAreNonnullByDefault;
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
 import org.bukkit.Effect;
 import org.bukkit.GameMode;
 import org.bukkit.Material;
@@ -9,15 +13,9 @@ import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.inventory.ItemStack;
 
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
+import javax.annotation.ParametersAreNonnullByDefault;
 
 public class GrassSeeds extends SimpleSlimefunItem<ItemUseHandler> {
-
     @ParametersAreNonnullByDefault
     public GrassSeeds(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
@@ -30,20 +28,16 @@ public class GrassSeeds extends SimpleSlimefunItem<ItemUseHandler> {
                 Block b = e.getClickedBlock().get();
 
                 if (b.getType() == Material.DIRT) {
-                    if (e.getPlayer().getGameMode() != GameMode.CREATIVE) {
-                        ItemUtils.consumeItem(e.getItem(), false);
-                    }
+                    if (e.getPlayer().getGameMode() != GameMode.CREATIVE) ItemUtils.consumeItem(e.getItem(), false);
 
                     b.setType(Material.GRASS_BLOCK);
 
-                    if (b.getRelative(BlockFace.UP).getType() == Material.AIR) {
+                    if (b.getRelative(BlockFace.UP).getType() == Material.AIR)
                         b.getRelative(BlockFace.UP).setType(Material.GRASS);
-                    }
 
                     b.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, Material.GRASS);
                 }
             }
         };
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/Kitchen.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/Kitchen.java
similarity index 65%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/items/Kitchen.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/Kitchen.java
index 292ccef..d0d4d85 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/Kitchen.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/Kitchen.java
@@ -1,11 +1,16 @@
-package io.github.thebusybiscuit.exoticgarden.items;
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
 
-import java.util.List;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Bukkit;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
+import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
 import org.bukkit.Material;
 import org.bukkit.Sound;
 import org.bukkit.block.Block;
@@ -17,27 +22,14 @@ import org.bukkit.inventory.FurnaceInventory;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 
-import io.github.thebusybiscuit.exoticgarden.ExoticGarden;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.List;
 
 public class Kitchen extends MultiBlockMachine {
-
-    private final ExoticGarden plugin;
-
     @ParametersAreNonnullByDefault
-    public Kitchen(ExoticGarden plugin, ItemGroup itemGroup) {
-        super(itemGroup, new SlimefunItemStack("KITCHEN", Material.CAULDRON, "&eKitchen", "", "&a&oYou can make a bunch of different yummies here!", "&a&oThe result goes in the Furnace output slot"), new ItemStack[] { new CustomItemStack(Material.BRICK_STAIRS, "&oBrick Stairs (upside down)"), new CustomItemStack(Material.BRICK_STAIRS, "&oBrick Stairs (upside down)"), new ItemStack(Material.BRICKS), new ItemStack(Material.STONE_PRESSURE_PLATE), new ItemStack(Material.IRON_TRAPDOOR), new ItemStack(Material.BOOKSHELF), new ItemStack(Material.FURNACE), new ItemStack(Material.DISPENSER), new ItemStack(Material.CRAFTING_TABLE) }, new ItemStack[0], BlockFace.SELF);
-
-        this.plugin = plugin;
+    public Kitchen(ItemGroup itemGroup) {
+        super(itemGroup, new SlimefunItemStack("KITCHEN", Material.CAULDRON, "&eKitchen", "", "&a&oYou can make a bunch of different yummies here!", "&a&oThe result goes in the Furnace output slot"), new ItemStack[]{new CustomItemStack(Material.BRICK_STAIRS, "&oBrick Stairs (upside down)"), new CustomItemStack(Material.BRICK_STAIRS, "&oBrick Stairs (upside down)"), new ItemStack(Material.BRICKS), new ItemStack(Material.STONE_PRESSURE_PLATE), new ItemStack(Material.IRON_TRAPDOOR), new ItemStack(Material.BOOKSHELF), new ItemStack(Material.FURNACE), new ItemStack(Material.DISPENSER), new ItemStack(Material.CRAFTING_TABLE)}, new ItemStack[0], BlockFace.SELF);
     }
 
     @Override
@@ -52,10 +44,9 @@ public class Kitchen extends MultiBlockMachine {
 
         recipe:
         for (ItemStack[] input : inputs) {
-            for (int i = 0; i < inv.getContents().length; i++) {
+            for (int i = 0; i < inv.getContents().length; i++)
                 if (!SlimefunUtils.isItemSimilar(inv.getContents()[i], input[i], true))
                     continue recipe;
-            }
 
             ItemStack output = RecipeType.getRecipeOutputList(this, input);
             SlimefunItem outputItem = SlimefunItem.getByItem(output);
@@ -71,22 +62,17 @@ public class Kitchen extends MultiBlockMachine {
                 for (int i = 0; i < inv.getContents().length; i++) {
                     ItemStack item = inv.getItem(i);
 
-                    if (item != null) {
-                        ItemUtils.consumeItem(item, item.getType() == Material.MILK_BUCKET);
-                    }
+                    if (item != null) ItemUtils.consumeItem(item, item.getType() == Material.MILK_BUCKET);
                 }
 
-                Bukkit.getScheduler().runTaskLater(plugin, () -> p.getWorld().playSound(furnace.getLocation(), Sound.BLOCK_LAVA_EXTINGUISH, 1F, 1F), 55L);
+                AbstractAddon.getScheduler().run(55, () -> p.getWorld().playSound(furnace.getLocation(), Sound.BLOCK_LAVA_EXTINGUISH, 1F, 1F));
 
-                for (int i = 1; i < 7; i++) {
-                    Bukkit.getScheduler().runTaskLater(plugin, () -> p.getWorld().playSound(furnace.getLocation(), Sound.BLOCK_METAL_PLACE, 7F, 1F), i * 5L);
-                }
+                for (int i = 1; i < 7; i++)
+                    AbstractAddon.getScheduler().run(i * 5, () -> p.getWorld().playSound(furnace.getLocation(), Sound.BLOCK_METAL_PLACE, 7F, 1F));
 
-                if (furnaceInventory.getResult() == null) {
-                    furnaceInventory.setResult(output);
-                } else {
+                if (furnaceInventory.getResult() == null) furnaceInventory.setResult(output);
+                else
                     furnaceInventory.getResult().setAmount(furnaceInventory.getResult().getAmount() + output.getAmount());
-                }
             }
 
             return;
@@ -97,14 +83,12 @@ public class Kitchen extends MultiBlockMachine {
 
     @Nonnull
     private static Furnace locateFurnace(@Nonnull Block b) {
-        if (b.getRelative(BlockFace.EAST).getType() == Material.FURNACE) {
+        if (b.getRelative(BlockFace.EAST).getType() == Material.FURNACE)
             return (Furnace) PaperLib.getBlockState(b.getRelative(BlockFace.EAST), false).getState();
-        } else if (b.getRelative(BlockFace.WEST).getType() == Material.FURNACE) {
+        else if (b.getRelative(BlockFace.WEST).getType() == Material.FURNACE)
             return (Furnace) PaperLib.getBlockState(b.getRelative(BlockFace.WEST), false).getState();
-        } else if (b.getRelative(BlockFace.NORTH).getType() == Material.FURNACE) {
+        else if (b.getRelative(BlockFace.NORTH).getType() == Material.FURNACE)
             return (Furnace) PaperLib.getBlockState(b.getRelative(BlockFace.NORTH), false).getState();
-        } else {
-            return (Furnace) PaperLib.getBlockState(b.getRelative(BlockFace.SOUTH), false).getState();
-        }
+        else return (Furnace) PaperLib.getBlockState(b.getRelative(BlockFace.SOUTH), false).getState();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/MagicalEssence.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/MagicalEssence.java
similarity index 82%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/items/MagicalEssence.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/MagicalEssence.java
index 30e21ef..d4dc77b 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/MagicalEssence.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/items/MagicalEssence.java
@@ -1,24 +1,21 @@
-package io.github.thebusybiscuit.exoticgarden.items;
-
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.exoticgarden.items;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import org.bukkit.inventory.ItemStack;
 
-public class MagicalEssence extends SlimefunItem {
+import javax.annotation.ParametersAreNonnullByDefault;
 
+public class MagicalEssence extends SlimefunItem {
     @ParametersAreNonnullByDefault
     public MagicalEssence(ItemGroup itemGroup, SlimefunItemStack item) {
-        super(itemGroup, item, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] { item, item, item, item, null, item, item, item, item });
+        super(itemGroup, item, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{item, item, item, item, null, item, item, item, item});
     }
 
     @Override
     public boolean useVanillaBlockBreaking() {
         return true;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/listeners/AndroidListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/listeners/AndroidListener.java
new file mode 100644
index 0000000..bc1149f
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/listeners/AndroidListener.java
@@ -0,0 +1,15 @@
+package id.universenetwork.sfa_loader.addons.exoticgarden.listeners;
+
+import id.universenetwork.sfa_loader.addons.exoticgarden.ExoticGarden;
+import io.github.thebusybiscuit.slimefun4.api.events.AndroidFarmEvent;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+
+public class AndroidListener implements Listener {
+    @EventHandler(ignoreCancelled = true)
+    public void onGrow(AndroidFarmEvent e) {
+        // Only for the advanced harvesting action
+        // Allow Androids to harvest our plants
+        if (e.isAdvanced() && e.getDrop() == null) e.setDrop(ExoticGarden.harvestPlant(e.getBlock()));
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/listeners/PlantsListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/listeners/PlantsListener.java
similarity index 59%
rename from src/main/java/io/github/thebusybiscuit/exoticgarden/listeners/PlantsListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/listeners/PlantsListener.java
index 30bf7af..ac88277 100644
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/listeners/PlantsListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/exoticgarden/listeners/PlantsListener.java
@@ -1,19 +1,17 @@
-package io.github.thebusybiscuit.exoticgarden.listeners;
+package id.universenetwork.sfa_loader.addons.exoticgarden.listeners;
 
-import java.util.HashSet;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.concurrent.ThreadLocalRandom;
-
-import org.bukkit.Effect;
-import org.bukkit.GameMode;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.Particle;
-import org.bukkit.Sound;
-import org.bukkit.Tag;
-import org.bukkit.World;
+import id.universenetwork.sfa_loader.addons.exoticgarden.*;
+import id.universenetwork.sfa_loader.addons.exoticgarden.items.BonemealableItem;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AddonConfig;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
+import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.Rotatable;
@@ -21,11 +19,7 @@ import org.bukkit.block.data.Waterlogged;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
-import org.bukkit.event.block.Action;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.block.BlockExplodeEvent;
-import org.bukkit.event.block.BlockFertilizeEvent;
-import org.bukkit.event.block.LeavesDecayEvent;
+import org.bukkit.event.block.*;
 import org.bukkit.event.entity.EntityExplodeEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
 import org.bukkit.event.world.ChunkPopulateEvent;
@@ -33,47 +27,27 @@ import org.bukkit.event.world.StructureGrowEvent;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 
-import io.github.thebusybiscuit.exoticgarden.Berry;
-import io.github.thebusybiscuit.exoticgarden.ExoticGarden;
-import io.github.thebusybiscuit.exoticgarden.PlantType;
-import io.github.thebusybiscuit.exoticgarden.Tree;
-import io.github.thebusybiscuit.exoticgarden.schematics.Schematic;
-import io.github.thebusybiscuit.exoticgarden.items.BonemealableItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.config.Config;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+import java.util.concurrent.ThreadLocalRandom;
 
 public class PlantsListener implements Listener {
+    private final AddonConfig cfg;
+    private final BlockFace[] faces = {BlockFace.NORTH, BlockFace.NORTH_EAST, BlockFace.EAST, BlockFace.SOUTH_EAST, BlockFace.SOUTH, BlockFace.SOUTH_WEST, BlockFace.WEST, BlockFace.NORTH_WEST};
 
-    private final Config cfg;
-    private final ExoticGarden plugin;
-    private final BlockFace[] faces = { BlockFace.NORTH, BlockFace.NORTH_EAST, BlockFace.EAST, BlockFace.SOUTH_EAST, BlockFace.SOUTH, BlockFace.SOUTH_WEST, BlockFace.WEST, BlockFace.NORTH_WEST };
-
-    public PlantsListener(ExoticGarden plugin) {
-        this.plugin = plugin;
-        cfg = plugin.getCfg();
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
+    public PlantsListener(ExoticGarden instance) {
+        cfg = instance.getConfig();
     }
 
     @EventHandler
     public void onGrow(StructureGrowEvent e) {
         if (PaperLib.isPaper()) {
-            if (PaperLib.isChunkGenerated(e.getLocation())) {
-                growStructure(e);
-            }
-            else {
-                PaperLib.getChunkAtAsync(e.getLocation()).thenRun(() -> growStructure(e));
-            }
-        }
-        else {
-            if (!e.getLocation().getChunk().isLoaded()) {
-                e.getLocation().getChunk().load();
-            }
+            if (PaperLib.isChunkGenerated(e.getLocation())) growStructure(e);
+            else PaperLib.getChunkAtAsync(e.getLocation()).thenRun(() -> growStructure(e));
+        } else {
+            if (!e.getLocation().getChunk().isLoaded()) e.getLocation().getChunk().load();
             growStructure(e);
         }
     }
@@ -82,13 +56,9 @@ public class PlantsListener implements Listener {
     public void onGenerate(ChunkPopulateEvent e) {
         final World world = e.getWorld();
 
-        if (BlockStorage.getStorage(world) == null) {
-            return;
-        }
+        if (BlockStorage.getStorage(world) == null) return;
 
-        if (!Slimefun.getWorldSettingsService().isWorldEnabled(world)) {
-            return;
-        }
+        if (!Slimefun.getWorldSettingsService().isWorldEnabled(world)) return;
 
         if (!cfg.getStringList("world-blacklist").contains(world.getName())) {
             Random random = ThreadLocalRandom.current();
@@ -107,19 +77,12 @@ public class PlantsListener implements Listener {
 
                 if ((x < worldLimit && x > -worldLimit) && (z < worldLimit && z > -worldLimit)) {
                     if (PaperLib.isPaper()) {
-                        if (PaperLib.isChunkGenerated(world, chunkX, chunkZ)) {
-                            growBush(e, x, z, berry, random, true);
-                        }
-                        else {
+                        if (PaperLib.isChunkGenerated(world, chunkX, chunkZ)) growBush(e, x, z, berry, random, true);
+                        else
                             PaperLib.getChunkAtAsync(world, chunkX, chunkZ).thenRun(() -> growBush(e, x, z, berry, random, true));
-                        }
-                    }
-                    else {
-                        growBush(e, x, z, berry, random, false);
-                    }
+                    } else growBush(e, x, z, berry, random, false);
                 }
-            }
-            else if (random.nextInt(100) < cfg.getInt("chances.TREE")) {
+            } else if (random.nextInt(100) < cfg.getInt("chances.TREE")) {
                 Tree tree = ExoticGarden.getTrees().get(random.nextInt(ExoticGarden.getTrees().size()));
 
                 int chunkX = e.getChunk().getX();
@@ -130,16 +93,10 @@ public class PlantsListener implements Listener {
 
                 if ((x < worldLimit && x > -worldLimit) && (z < worldLimit && z > -worldLimit)) {
                     if (PaperLib.isPaper()) {
-                        if (PaperLib.isChunkGenerated(world, chunkX, chunkZ)) {
-                            pasteTree(e, x, z, tree);
-                        }
-                        else {
-                            PaperLib.getChunkAtAsync(world, chunkX, chunkZ).thenRun(() -> pasteTree(e, x, z, tree));
-                        }
-                    }
-                    else {
-                        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> pasteTree(e, x, z, tree));
-                    }
+                        if (PaperLib.isChunkGenerated(world, chunkX, chunkZ)) pasteTree(e, x, z, tree);
+                        else PaperLib.getChunkAtAsync(world, chunkX, chunkZ).thenRun(() -> pasteTree(e, x, z, tree));
+                    } else
+                        Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(AbstractAddon.getInstance(), () -> pasteTree(e, x, z, tree));
                 }
             }
         }
@@ -154,54 +111,52 @@ public class PlantsListener implements Listener {
 
         if (item != null) {
             e.setCancelled(true);
-            for (Tree tree : ExoticGarden.getTrees()) {
+            for (Tree tree : ExoticGarden.getTrees())
                 if (item.getId().equalsIgnoreCase(tree.getSapling())) {
                     BlockStorage.clearBlockInfo(e.getLocation());
                     Schematic.pasteSchematic(e.getLocation(), tree);
                     return;
                 }
-            }
 
-            for (Berry berry : ExoticGarden.getBerries()) {
+            for (Berry berry : ExoticGarden.getBerries())
                 if (item.getId().equalsIgnoreCase(berry.toBush())) {
                     switch (berry.getType()) {
-                    case BUSH:
-                        e.getLocation().getBlock().setType(Material.OAK_LEAVES);
-                        break;
-                    case ORE_PLANT:
-                    case DOUBLE_PLANT:
-                        Block blockAbove = e.getLocation().getBlock().getRelative(BlockFace.UP);
-                        item = BlockStorage.check(blockAbove);
-                        if (item != null) return;
-
-                        if (!Tag.SAPLINGS.isTagged(blockAbove.getType()) && !Tag.LEAVES.isTagged(blockAbove.getType())) {
-                            switch (blockAbove.getType()) {
-                            case AIR:
-                            case CAVE_AIR:
-                            case SNOW:
-                                break;
-                            default:
-                                return;
-                            }
-                        }
-
-                        BlockStorage.store(blockAbove, berry.getItem());
-                        e.getLocation().getBlock().setType(Material.OAK_LEAVES);
-                        blockAbove.setType(Material.PLAYER_HEAD);
-                        Rotatable rotatable = (Rotatable) blockAbove.getBlockData();
-                        rotatable.setRotation(faces[ThreadLocalRandom.current().nextInt(faces.length)]);
-                        blockAbove.setBlockData(rotatable);
-
-                        PlayerHead.setSkin(blockAbove, PlayerSkin.fromHashCode(berry.getTexture()), true);
-                        break;
-                    default:
-                        e.getLocation().getBlock().setType(Material.PLAYER_HEAD);
-                        Rotatable s = (Rotatable) e.getLocation().getBlock().getBlockData();
-                        s.setRotation(faces[ThreadLocalRandom.current().nextInt(faces.length)]);
-                        e.getLocation().getBlock().setBlockData(s);
+                        case BUSH:
+                            e.getLocation().getBlock().setType(Material.OAK_LEAVES);
+                            break;
+                        case ORE_PLANT:
+                        case DOUBLE_PLANT:
+                            Block blockAbove = e.getLocation().getBlock().getRelative(BlockFace.UP);
+                            item = BlockStorage.check(blockAbove);
+                            if (item != null) return;
+
+                            if (!Tag.SAPLINGS.isTagged(blockAbove.getType()) && !Tag.LEAVES.isTagged(blockAbove.getType()))
+                                switch (blockAbove.getType()) {
+                                    case AIR:
+                                    case CAVE_AIR:
+                                    case SNOW:
+                                        break;
+                                    default:
+                                        return;
+                                }
+
+                            BlockStorage.store(blockAbove, berry.getItem());
+                            e.getLocation().getBlock().setType(Material.OAK_LEAVES);
+                            blockAbove.setType(Material.PLAYER_HEAD);
+                            Rotatable rotatable = (Rotatable) blockAbove.getBlockData();
+                            rotatable.setRotation(faces[ThreadLocalRandom.current().nextInt(faces.length)]);
+                            blockAbove.setBlockData(rotatable);
+
+                            PlayerHead.setSkin(blockAbove, PlayerSkin.fromHashCode(berry.getTexture()), true);
+                            break;
+                        default:
+                            e.getLocation().getBlock().setType(Material.PLAYER_HEAD);
+                            Rotatable s = (Rotatable) e.getLocation().getBlock().getBlockData();
+                            s.setRotation(faces[ThreadLocalRandom.current().nextInt(faces.length)]);
+                            e.getLocation().getBlock().setBlockData(s);
 
-                        PlayerHead.setSkin(e.getLocation().getBlock(), PlayerSkin.fromHashCode(berry.getTexture()), true);
-                        break;
+                            PlayerHead.setSkin(e.getLocation().getBlock(), PlayerSkin.fromHashCode(berry.getTexture()), true);
+                            break;
                     }
 
                     BlockStorage.deleteLocationInfoUnsafely(e.getLocation(), false);
@@ -209,7 +164,6 @@ public class PlantsListener implements Listener {
                     e.getWorld().playEffect(e.getLocation(), Effect.STEP_SOUND, Material.OAK_LEAVES);
                     break;
                 }
-            }
         }
     }
 
@@ -229,55 +183,49 @@ public class PlantsListener implements Listener {
             if (!current.getType().isSolid() && current.getType() != Material.WATER && berry.isSoil(current.getRelative(BlockFace.DOWN).getType())) {
                 BlockStorage.store(current, berry.getItem());
                 switch (berry.getType()) {
-                case BUSH:
-                    if (isPaper) {
-                        current.setType(Material.OAK_LEAVES);
-                    }
-                    else {
-                        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> current.setType(Material.OAK_LEAVES));
-                    }
-                    break;
-                case FRUIT:
-                    if (isPaper) {
-                        current.setType(Material.PLAYER_HEAD);
-                        Rotatable s = (Rotatable) current.getBlockData();
-                        s.setRotation(faces[random.nextInt(faces.length)]);
-                        current.setBlockData(s);
-                        PlayerHead.setSkin(current, PlayerSkin.fromHashCode(berry.getTexture()), true);
-                    }
-                    else {
-                        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
+                    case BUSH:
+                        if (isPaper) current.setType(Material.OAK_LEAVES);
+                        else
+                            Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(AbstractAddon.getInstance(), () -> current.setType(Material.OAK_LEAVES));
+                        break;
+                    case FRUIT:
+                        if (isPaper) {
                             current.setType(Material.PLAYER_HEAD);
                             Rotatable s = (Rotatable) current.getBlockData();
                             s.setRotation(faces[random.nextInt(faces.length)]);
                             current.setBlockData(s);
                             PlayerHead.setSkin(current, PlayerSkin.fromHashCode(berry.getTexture()), true);
-                        });
-                    }
-                    break;
-                case ORE_PLANT:
-                case DOUBLE_PLANT:
-                    if (isPaper) {
-                        current.setType(Material.PLAYER_HEAD);
-                        Rotatable s = (Rotatable) current.getBlockData();
-                        s.setRotation(faces[random.nextInt(faces.length)]);
-                        current.setBlockData(s);
-                        PlayerHead.setSkin(current, PlayerSkin.fromHashCode(berry.getTexture()), true);
-                    }
-                    else {
-                        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
-                            BlockStorage.store(current.getRelative(BlockFace.UP), berry.getItem());
-                            current.setType(Material.OAK_LEAVES);
-                            current.getRelative(BlockFace.UP).setType(Material.PLAYER_HEAD);
-                            Rotatable ss = (Rotatable) current.getRelative(BlockFace.UP).getBlockData();
-                            ss.setRotation(faces[random.nextInt(faces.length)]);
-                            current.getRelative(BlockFace.UP).setBlockData(ss);
-                            PlayerHead.setSkin(current.getRelative(BlockFace.UP), PlayerSkin.fromHashCode(berry.getTexture()), true);
-                        });
-                    }
-                    break;
-                default:
-                    break;
+                        } else
+                            Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(AbstractAddon.getInstance(), () -> {
+                                current.setType(Material.PLAYER_HEAD);
+                                Rotatable s = (Rotatable) current.getBlockData();
+                                s.setRotation(faces[random.nextInt(faces.length)]);
+                                current.setBlockData(s);
+                                PlayerHead.setSkin(current, PlayerSkin.fromHashCode(berry.getTexture()), true);
+                            });
+                        break;
+                    case ORE_PLANT:
+                    case DOUBLE_PLANT:
+                        if (isPaper) {
+                            current.setType(Material.PLAYER_HEAD);
+                            Rotatable s = (Rotatable) current.getBlockData();
+                            s.setRotation(faces[random.nextInt(faces.length)]);
+                            current.setBlockData(s);
+                            PlayerHead.setSkin(current, PlayerSkin.fromHashCode(berry.getTexture()), true);
+                        } else {
+                            Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(AbstractAddon.getInstance(), () -> {
+                                BlockStorage.store(current.getRelative(BlockFace.UP), berry.getItem());
+                                current.setType(Material.OAK_LEAVES);
+                                current.getRelative(BlockFace.UP).setType(Material.PLAYER_HEAD);
+                                Rotatable ss = (Rotatable) current.getRelative(BlockFace.UP).getBlockData();
+                                ss.setRotation(faces[random.nextInt(faces.length)]);
+                                current.getRelative(BlockFace.UP).setBlockData(ss);
+                                PlayerHead.setSkin(current.getRelative(BlockFace.UP), PlayerSkin.fromHashCode(berry.getTexture()), true);
+                            });
+                        }
+                        break;
+                    default:
+                        break;
                 }
                 break;
             }
@@ -285,15 +233,11 @@ public class PlantsListener implements Listener {
     }
 
     private boolean isFlat(Block current) {
-        for (int i = 0; i < 5; i++) {
-            for (int j = 0; j < 5; j++) {
-                for (int k = 0; k < 6; k++) {
-                    if (current.getRelative(i, k, j).getType().isSolid() || Tag.LEAVES.isTagged(current.getRelative(i, k, j).getType()) || !current.getRelative(i, -1, j).getType().isSolid()) {
+        for (int i = 0; i < 5; i++)
+            for (int j = 0; j < 5; j++)
+                for (int k = 0; k < 6; k++)
+                    if (current.getRelative(i, k, j).getType().isSolid() || Tag.LEAVES.isTagged(current.getRelative(i, k, j).getType()) || !current.getRelative(i, -1, j).getType().isSolid())
                         return false;
-                    }
-                }
-            }
-        }
 
         return true;
     }
@@ -301,9 +245,8 @@ public class PlantsListener implements Listener {
     @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
     public void onHarvest(BlockBreakEvent e) {
         if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), e.getBlock().getLocation(), Interaction.BREAK_BLOCK)) {
-            if (e.getBlock().getType().equals(Material.PLAYER_HEAD) || Tag.LEAVES.isTagged(e.getBlock().getType())) {
+            if (e.getBlock().getType().equals(Material.PLAYER_HEAD) || Tag.LEAVES.isTagged(e.getBlock().getType()))
                 dropFruitFromTree(e.getBlock());
-            }
 
             if (e.getBlock().getType() == Material.GRASS) {
                 if (!ExoticGarden.getGrassDrops().keySet().isEmpty() && e.getPlayer().getGameMode() != GameMode.CREATIVE) {
@@ -314,8 +257,7 @@ public class PlantsListener implements Listener {
                         e.getBlock().getWorld().dropItemNaturally(e.getBlock().getLocation(), items[random.nextInt(items.length)]);
                     }
                 }
-            }
-            else {
+            } else {
                 ItemStack item = ExoticGarden.harvestPlant(e.getBlock());
 
                 if (item != null) {
@@ -328,20 +270,15 @@ public class PlantsListener implements Listener {
 
     @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
     public void onDecay(LeavesDecayEvent e) {
-        if (!Slimefun.getWorldSettingsService().isWorldEnabled(e.getBlock().getWorld())) {
-            return;
-        }
+        if (!Slimefun.getWorldSettingsService().isWorldEnabled(e.getBlock().getWorld())) return;
 
         String id = BlockStorage.checkID(e.getBlock());
 
-        if (id != null) {
-            for (Berry berry : ExoticGarden.getBerries()) {
-                if (id.equalsIgnoreCase(berry.getID())) {
-                    e.setCancelled(true);
-                    return;
-                }
+        if (id != null) for (Berry berry : ExoticGarden.getBerries())
+            if (id.equalsIgnoreCase(berry.getID())) {
+                e.setCancelled(true);
+                return;
             }
-        }
 
         dropFruitFromTree(e.getBlock());
         ItemStack item = BlockStorage.retrieve(e.getBlock());
@@ -365,10 +302,9 @@ public class PlantsListener implements Listener {
             if (item != null) {
                 e.getClickedBlock().getWorld().playEffect(e.getClickedBlock().getLocation(), Effect.STEP_SOUND, Material.OAK_LEAVES);
                 e.getClickedBlock().getWorld().dropItemNaturally(e.getClickedBlock().getLocation(), item);
-            } else {
+            } else
                 // The block wasn't a plant, we try harvesting a fruit instead
                 ExoticGarden.getInstance().harvestFruit(e.getClickedBlock());
-            }
         }
     }
 
@@ -423,7 +359,7 @@ public class PlantsListener implements Listener {
                     Location loc = fruit.getLocation();
                     SlimefunItem check = BlockStorage.check(loc);
                     if (check == null) continue;
-                    for (Tree tree : ExoticGarden.getTrees()) {
+                    for (Tree tree : ExoticGarden.getTrees())
                         if (check.getId().equalsIgnoreCase(tree.getFruitID())) {
                             BlockStorage.clearBlockInfo(loc);
                             ItemStack fruits = check.getItem();
@@ -432,10 +368,8 @@ public class PlantsListener implements Listener {
                             fruit.setType(Material.AIR);
                             break;
                         }
-                    }
                 }
             }
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/ExoticGardenRecipeTypes.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/ExoticGardenRecipeTypes.java
deleted file mode 100644
index 5cc183c..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/ExoticGardenRecipeTypes.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden;
-
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-
-public final class ExoticGardenRecipeTypes {
-
-    private ExoticGardenRecipeTypes() {}
-
-    public static final RecipeType KITCHEN = new RecipeType(new NamespacedKey(ExoticGarden.instance, "kitchen"), new SlimefunItemStack("KITCHEN", Material.CAULDRON, "&eKitchen"), "", "&rThis item must be made", "&rin a Kitchen");
-    public static final RecipeType BREAKING_GRASS = new RecipeType(new NamespacedKey(ExoticGarden.instance, "breaking_grass"), new CustomItemStack(Material.GRASS, "&7Breaking Grass"));
-    public static final RecipeType HARVEST_TREE = new RecipeType(new NamespacedKey(ExoticGarden.instance, "harvest_tree"), new CustomItemStack(Material.OAK_LEAVES, "&aHarvesting a Tree", "", "&rYou can obtain this Item by", "&rharvesting the shown Tree"));
-    public static final RecipeType HARVEST_BUSH = new RecipeType(new NamespacedKey(ExoticGarden.instance, "harvest_bush"), new CustomItemStack(Material.OAK_LEAVES, "&aHarvesting a Bush", "", "&rYou can obtain this Item by", "&rharvesting the shown Bush"));
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/PlantType.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/PlantType.java
deleted file mode 100644
index 3d95e36..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/PlantType.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden;
-
-public enum PlantType {
-
-	BUSH,
-	FRUIT,
-	DOUBLE_PLANT,
-	ORE_PLANT
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/FoodRegistry.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/items/FoodRegistry.java
deleted file mode 100644
index 90b7476..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/items/FoodRegistry.java
+++ /dev/null
@@ -1,538 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.items;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.bukkit.Color;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionEffect;
-import org.bukkit.potion.PotionEffectType;
-
-import io.github.thebusybiscuit.exoticgarden.CustomPotion;
-import io.github.thebusybiscuit.exoticgarden.ExoticGarden;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.github.thebusybiscuit.slimefun4.implementation.items.food.Juice;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-
-/**
- * In plugin class we register all our items and recipes for the dishes.
- * 
- * @author TheBusyBiscuit
- * @author SoSeDiK
- * @author yurinogueira
- * @author Hellcode48
- * @author CURVX
- *
- */
-public final class FoodRegistry {
-
-    private FoodRegistry() {}
-
-    public static void register(@Nonnull ExoticGarden plugin, @Nonnull ItemGroup misc, @Nonnull ItemGroup drinks, @Nonnull ItemGroup food) {
-        new Juice(drinks, new SlimefunItemStack("LIME_SMOOTHIE", new CustomPotion("&aLime Smoothie", Color.LIME, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("LIME_JUICE"), getItem("ICE_CUBE"), null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("TOMATO_JUICE", new CustomPotion("&4Tomato Juice", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER,
-        new ItemStack[] {getItem("TOMATO"), null, null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("WINE", new CustomPotion("&cWine", Color.RED, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("GRAPE"), new ItemStack(Material.SUGAR), null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("LEMON_ICED_TEA", new CustomPotion("&eLemon Iced Tea", Color.YELLOW, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("LEMON"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("RASPBERRY_ICED_TEA", new CustomPotion("&dRaspberry Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("RASPBERRY"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("PEACH_ICED_TEA", new CustomPotion("&dPeach Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("PEACH"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("STRAWBERRY_ICED_TEA", new CustomPotion("&4Strawberry Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("STRAWBERRY"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("CHERRY_ICED_TEA", new CustomPotion("&cCherry Iced Tea", Color.FUCHSIA, new PotionEffect(PotionEffectType.SATURATION, 13, 0), "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("CHERRY"), getItem("ICE_CUBE"), getItem("TEA_LEAF"), null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("THAI_TEA", new CustomPotion("&6Thai Tea", Color.RED, new PotionEffect(PotionEffectType.SATURATION, 14, 0), "", "&7&oRestores &b&o" + "7.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("TEA_LEAF"), new ItemStack(Material.SUGAR), SlimefunItems.HEAVY_CREAM, getItem("COCONUT_MILK"), null, null, null, null, null})
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("PUMPKIN_BREAD", "f3487d457f9062d787a3e6ce1c4664bf7402ec67dd111256f19b38ce4f670", "&rPumpkin Bread", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.PUMPKIN), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, null, null, null, null, null, null},
-        8)
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("MAYO", "7f8d536c8c2c2596bcc1709590a9d7e33061c56e658974cd81bb832ea4d8842", "&rMayo"), RecipeType.GRIND_STONE,
-        new ItemStack[] {new ItemStack(Material.EGG), null, null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("MUSTARD", "9b9e99621b9773b29e375e62c6495ff1ac847f85b29816c2eb77b587874ba62", "&eMustard"), RecipeType.GRIND_STONE,
-        new ItemStack[] {getItem("MUSTARD_SEED"), null, null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("BBQ_SAUCE", "a86f19bf23d248e662c9c8b7fa15efb8a1f1d5bdacd3b8625a9b59e93ac8a", "&cBBQ Sauce"), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("TOMATO"), getItem("MUSTARD"), getItem("SALT"), new ItemStack(Material.SUGAR), null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("VEGETABLE_OIL", "2acb28fb8a310443af02c7a1283ace95a9906b2e0e6f3636597edbe8cad4e", "&rVegetable Oil"), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {new ItemStack(Material.BEETROOT_SEEDS), new ItemStack(Material.WATER_BUCKET), null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("CORNMEAL", Material.SUGAR, "&rCornmeal"), RecipeType.GRIND_STONE,
-        new ItemStack[] {getItem("CORN"), null, null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("YEAST", "606be2df2122344bda479feece365ee0e9d5da276afa0e8ce8d848f373dd131", "&rYeast"), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {new ItemStack(Material.SUGAR), new ItemStack(Material.WATER_BUCKET), null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("MOLASSES", "f21d7b155edf440cb87ec94487cba64e8d128171eb1187c26d5ffe58bd794c", "&8Molasses"), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {new ItemStack(Material.BEETROOT), new ItemStack(Material.SUGAR_CANE), new ItemStack(Material.WATER_BUCKET), null, null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("BROWN_SUGAR", "964d4247278e1498374aa6b0e47368fe4f138abc94e583e8839965fbe241be", "&rBrown Sugar"), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {new ItemStack(Material.SUGAR), getItem("MOLASSES"), null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new SlimefunItem(misc, new SlimefunItemStack("COUNTRY_GRAVY", "f21fa9439bfd8384464146f9c67ebd4c5fbf4196924892627eadf3bce1ff", "&rCountry Gravy"), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.SUGAR), getItem("BLACK_PEPPER"), null, null, null, null, null, null})
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_BAR", "819f948d17718adace5dd6e050c586229653fef645d7113ab94d17b639cc466", "&rChocolate Bar", "", "&7&oRestores &b&o" + "1.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.COCOA_BEANS), SlimefunItems.HEAVY_CREAM, null, null, null, null, null, null, null},
-        3)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("POTATO_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&rPotato Salad", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BAKED_POTATO), getItem("MAYO"), getItem("ONION"), new ItemStack(Material.BOWL), null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHICKEN_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rChicken Sandwich", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.COOKED_CHICKEN), getItem("MAYO"), new ItemStack(Material.BREAD), null, null, null, null, null, null},
-        11)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("FISH_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rFish Sandwich", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.COOKED_COD), getItem("MAYO"), new ItemStack(Material.BREAD), null, null, null, null, null, null},
-        11)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BAGEL", "502e92f13de3bee69228c384478e761230681e5fce9bda195daeaf8484139331", "&rBagel", "", "&7&oRestores &b&o" + "2.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("YEAST"), SlimefunItems.WHEAT_FLOUR, null, null, null, null, null, null, null},
-        4)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("EGG_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&rEgg Salad", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.EGG), getItem("MAYO"), new ItemStack(Material.BOWL), null, null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("TOMATO_SOUP", "76366f17428a4990126844f74a02dbf5524f35be1323f8fab0bf61a57ff41de3", "&4Tomato Soup", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BOWL), getItem("TOMATO"), null, null, null, null, null, null, null},
-        11)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("STRAWBERRY_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&cStrawberry Salad", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BOWL), getItem("STRAWBERRY"), getItem("LETTUCE"), getItem("TOMATO"), null, null, null, null, null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("GRAPE_SALAD", "1fe92e11a67b56935446a214caa3723d29e6db56c55fa8d43179a8a3176c6c1", "&cGrape Salad", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BOWL), getItem("GRAPE"), getItem("LETTUCE"), getItem("TOMATO"), null, null, null, null, null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHICKEN_CURRY", "d09e0dd5489f03efdc8083088f521b82946cdec98fc1c94c4e09792e4735184a", "&rChicken Curry", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CILANTRO"), new ItemStack(Material.COOKED_CHICKEN), getItem("BROWN_SUGAR"), getItem("CURRY_LEAF"), getItem("VEGETABLE_OIL"), getItem("CURRY_LEAF"), getItem("ONION"), new ItemStack(Material.BOWL), getItem("GARLIC")},
-        16)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("COCONUT_CHICKEN_CURRY", "d09e0dd5489f03efdc8083088f521b82946cdec98fc1c94c4e09792e4735184a", "&rCoconut Chicken Curry", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("COCONUT"), getItem("COCONUT"), getItem("CHICKEN_CURRY"), null, null, null, null, null, null},
-        19)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BISCUIT", "ef094456fd794b6531fc6dec6f396b680b9536002063e11ce24d0a74b0b7d885", "&6Biscuit", "", "&7&oRestores &b&o" + "2.0" + " &7&oHunger"),
-        new ItemStack[] {SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, null, null, null, null, null, null, null},
-        4)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BISCUITS_GRAVY", "28bbb835e22d9ec62e22411b8e015138d5597283ad36e618fe44ba5f1a6b60fd", "&rBiscuits and Country Gravy", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("COUNTRY_GRAVY"), getItem("COUNTRY_GRAVY"), getItem("COUNTRY_GRAVY"), getItem("BISCUIT"), getItem("BISCUIT"), getItem("BISCUIT"), null, new ItemStack(Material.BOWL), null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&rCheesecake", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null, null, null},
-        16)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHERRY_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&cCherry Cheesecake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHEESECAKE"), getItem("CHERRY"), null, null, null, null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BLUEBERRY_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&9Blueberry Cheesecake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHEESECAKE"), getItem("BLUEBERRY"), null, null, null, null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("PUMPKIN_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&6Pumpkin Cheesecake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHEESECAKE"), new ItemStack(Material.PUMPKIN), null, null, null, null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("SWEETENED_PEAR_CHEESECAKE", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&6Sweetened Pear Cheesecake", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHEESECAKE"), new ItemStack(Material.SUGAR), getItem("PEAR"), null, null, null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BLACKBERRY_COBBLER", "c6c36523c2d11b8c8ea2e992291c52a654760ec72dcc32da2cb63616481ee", "&8Blackberry Cobbler", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.SUGAR), getItem("BLACKBERRY"), SlimefunItems.WHEAT_FLOUR, null, null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("PAVLOVA", "6365b61e79fcb913bc860f4ec635d4a6ab1b74bfab62fb6ea6d89a16aa841", "&rPavlova", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("LEMON"), getItem("STRAWBERRY"), new ItemStack(Material.SUGAR), new ItemStack(Material.EGG), SlimefunItems.HEAVY_CREAM, null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CORN_ON_THE_COB", Material.GOLDEN_CARROT, "&6Corn on the Cob", "", "&7&oRestores &b&o" + "4.5" + " &7&oHunger"),
-        new ItemStack[] {SlimefunItems.BUTTER, getItem("CORN"), null, null, null, null, null, null, null},
-        9)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CREAMED_CORN", "9174b34c549eed8bafe727618bab6821afcb1787b5decd1eecd6c213e7e7c6d", "&rCreamed Corn", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
-        new ItemStack[] {SlimefunItems.HEAVY_CREAM, getItem("CORN"), new ItemStack(Material.BOWL), null, null, null, null, null, null},
-        8)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BACON", "e7ba22d5df21e821a6de4b8c9d373a3aa187d8ae74f288a82d2b61f272e5", "&rBacon", "", "&7&oRestores &b&o" + "1.5" + " &7&oHunger"),
-        3,
-        new ItemStack[] {new ItemStack(Material.COOKED_PORKCHOP), null, null, null, null, null, null, null, null},
-        3)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rSandwich", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), getItem("MAYO"), new ItemStack(Material.COOKED_BEEF), getItem("TOMATO"), getItem("LETTUCE"), null, null, null, null},
-        19)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BLT", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rBLT", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_PORKCHOP), getItem("TOMATO"), getItem("LETTUCE"), null, null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("LEAFY_CHICKEN_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rLeafy Chicken Sandwich", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHICKEN_SANDWICH"), getItem("LETTUCE"), null, null, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("LEAFY_FISH_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rLeafy Fish Sandwich", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("FISH_SANDWICH"), getItem("LETTUCE"), null, null, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("HAMBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rHamburger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_BEEF), null, null, null, null, null, null, null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rCheeseburger", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("HAMBURGER"), SlimefunItems.CHEESE, null, null, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BACON_CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rBacon Cheeseburger", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHEESEBURGER"), getItem("BACON"), null, null, null, null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("DELUXE_CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rDeluxe Cheeseburger", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHEESEBURGER"), getItem("LETTUCE"), getItem("TOMATO"), null, null, null, null, null, null},
-        16)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("GARLIC_BREAD", "a33fa7d3e63b280a5d7e2bb09332dff86b17decd2b09eccdd62da5265597f74d", "&rGarlic Bread", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("GARLIC"), new ItemStack(Material.BREAD), null, null, null, null, null, null, null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("GARLIC_CHEESE_BREAD", "a33fa7d3e63b280a5d7e2bb09332dff86b17decd2b09eccdd62da5265597f74d", "&rGarlic Cheese Bread", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {SlimefunItems.CHEESE, getItem("GARLIC"), new ItemStack(Material.BREAD), null, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CARROT_CAKE", "f9136514f342e7c5208a1422506a866158ef84d2b249220139e8bf6032e193", "&rCarrot Cake", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.CARROT), SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.SUGAR), new ItemStack(Material.EGG), null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHICKEN_BURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rChickenburger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_CHICKEN), null, null, null, null, null, null, null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHICKEN_CHEESEBURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rChicken Cheeseburger", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHICKEN_BURGER"), SlimefunItems.CHEESE, null, null, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BACON_BURGER", "cdadf1744433e1c79d1d59d2777d939de159a24cf57e8a61c82bc4fe3777553c", "&rBacon Burger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), getItem("BACON"), null, null, null, null, null, null, null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BACON_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rBacon Sandwich", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), getItem("BACON"), getItem("MAYO"), getItem("TOMATO"), getItem("LETTUCE"), null, null, null, null},
-        19)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("TACO", "98ced74a22021a535f6bce21c8c632b273dc2d9552b71a38d57269b3538cf", "&rTaco", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORNMEAL"), new ItemStack(Material.COOKED_BEEF), getItem("LETTUCE"), getItem("TOMATO"), getItem("CHEESE"), null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("FISH_TACO", "98ced74a22021a535f6bce21c8c632b273dc2d9552b71a38d57269b3538cf", "&rFish Taco", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORNMEAL"), new ItemStack(Material.COOKED_COD), getItem("LETTUCE"), getItem("TOMATO"), getItem("CHEESE"), null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("STREET_TACO", "1ad7c0a04f1485c7a3ef261a48ee83b2f1aa701ab11f3fc911e0366a9b97e", "&rStreet Taco", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORNMEAL"), new ItemStack(Material.COOKED_BEEF), getItem("CILANTRO"), getItem("ONION"), null, null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("JAMMY_DODGER", "1d00dfb3a57c068a0cc7b624d8d8852070435d2634c0e5da9cbbab46174af0df", "&cJammy Dodger", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {null, getItem("BISCUIT"), null, null, getItem("RASPBERRY_JUICE"), null, null, getItem("BISCUIT"), null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("PANCAKES", "347f4f5a74c6691280cd80e7148b49b2ce17dcf64fd55368627f5d92a976a6a8", "&rPancakes", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("WHEAT_FLOUR"), new ItemStack(Material.SUGAR), getItem("BUTTER"), new ItemStack(Material.EGG), new ItemStack(Material.EGG), null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BLUEBERRY_PANCAKES", "347f4f5a74c6691280cd80e7148b49b2ce17dcf64fd55368627f5d92a976a6a8", "&rBlueberry Pancakes", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("PANCAKES"), getItem("BLUEBERRY"), null, null, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("SWEET_BERRY_PANCAKES", "e44ca99e308a186b30281b2017c44189acafb591152f81feea96fecbe57", "&rSweet Berry Pancakes", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("PANCAKES"), new ItemStack(Material.SWEET_BERRIES), null, null, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("FRIES", "563b8aeaf1df11488efc9bd303c233a87ccba3b33f7fba9c2fecaee9567f053", "&rFries", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.POTATO), getItem("SALT"), null, null, null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("POPCORN", "1497b147cfae52205597f72e3c4ef52512e9677020e4b4fa7512c3c6acdd8c1", "&rPopcorn", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORN"), getItem("BUTTER"), null, null, null, null, null, null, null},
-        8)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("SWEET_POPCORN", "1497b147cfae52205597f72e3c4ef52512e9677020e4b4fa7512c3c6acdd8c1", "&rPopcorn &7(Sweet)", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORN"), getItem("BUTTER"), new ItemStack(Material.SUGAR), null, null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("SALTY_POPCORN", "1497b147cfae52205597f72e3c4ef52512e9677020e4b4fa7512c3c6acdd8c1", "&rPopcorn &7(Salty)", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORN"), getItem("BUTTER"), getItem("SALT"), null, null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("SHEPARDS_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&rShepard's Pie", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CABBAGE"), new ItemStack(Material.CARROT), SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.COOKED_BEEF), getItem("TOMATO"), null, null, null, null},
-        16)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHICKEN_POT_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&rChicken Pot Pie", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.COOKED_CHICKEN), new ItemStack(Material.CARROT), SlimefunItems.WHEAT_FLOUR, new ItemStack(Material.POTATO), null, null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_CAKE", "9119fca4f28a755d37fbe5dcf6d8c3ef50fe394c1a7850bc7e2b71ee78303c4c", "&rChocolate Cake", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, new ItemStack(Material.EGG), null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CREAM_COOKIE", "dfd71e20fc50abf0de2ef7decfc01ce27ad51955759e072ceaab96355f594f0", "&rCream Cookie", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BLUEBERRY_MUFFIN", "83794c736fc76e45706830325b95969466d86f8d7b28fce8edb2c75e2ab25c", "&rBlueberry Muffin", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("BLUEBERRY"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("PUMPKIN_MUFFIN", "83794c736fc76e45706830325b95969466d86f8d7b28fce8edb2c75e2ab25c", "&rPumpkin Muffin", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.PUMPKIN), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_CHIP_MUFFIN", "83794c736fc76e45706830325b95969466d86f8d7b28fce8edb2c75e2ab25c", "&rChocolate Chip Muffin", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, SlimefunItems.HEAVY_CREAM, new ItemStack(Material.EGG), null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BOSTON_CREAM_PIE", "dfd71e20fc50abf0de2ef7decfc01ce27ad51955759e072ceaab96355f594f0", "&rBoston Cream Pie", "", "&7&oRestores &b&o" + "4.5" + " &7&oHunger"),
-        new ItemStack[] {null, getItem("CHOCOLATE_BAR"), null, null, SlimefunItems.HEAVY_CREAM, null, null, getItem("BISCUIT"), null},
-        9)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("HOT_DOG", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rHot Dog", "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger"),
-        new ItemStack[] {null, null, null, null, new ItemStack(Material.COOKED_PORKCHOP), null, null, new ItemStack(Material.BREAD), null},
-        10)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BACON_WRAPPED_CHEESE_FILLED_HOT_DOG", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rBacon wrapped Cheese filled Hot Dog", "&7&o\"When I chef\" - @Eyamaz", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("BACON"), getItem("HOT_DOG"), getItem("BACON"), null, getItem("CHEESE"), null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BBQ_BACON_WRAPPED_HOT_DOG", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rBBQ Bacon wrapped Hot Dog", "&7&o\"wanna talk about hot dogs?\" - @Pahimar", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("BACON"), getItem("HOT_DOG"), getItem("BACON"), null, getItem("BBQ_SAUCE"), null, null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BBQ_DOUBLE_BACON_WRAPPED_HOT_DOG_IN_A_TORTILLA_WITH_CHEESE", "33f2d7d7a8b1b969142881eb5a87e737b5f75fb808b9a157adddb2c6aec382", "&rBBQ Double Bacon wrapped Hot Dog in a Tortilla with Cheese", "&7&o\"When I chef\" - @Eyamaz", "", "&7&oRestores &b&o" + "10.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("BACON"), getItem("BBQ_SAUCE"), getItem("BACON"), getItem("BACON"), new ItemStack(Material.COOKED_PORKCHOP), getItem("BACON"), getItem("CORNMEAL"), getItem("CHEESE"), getItem("CORNMEAL")},
-        20)
-        .register(plugin);
-
-        new CustomFood(drinks, new SlimefunItemStack("SWEETENED_TEA", "d8e94ddd769a5bea748376b4ec7383fd36d267894d7c3bee011e8e4f5fcd7", "&aSweetened Tea", "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("TEA_LEAF"), new ItemStack(Material.SUGAR), null, null, null, null, null, null, null},
-        6)
-        .register(plugin);
-
-        new CustomFood(drinks, new SlimefunItemStack("HOT_CHOCOLATE", "411511bdd55bcb82803c8039f1c155fd43062636e23d4d46c4d761c04d22c2", "&6Hot Chocolate", "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHOCOLATE_BAR"), SlimefunItems.HEAVY_CREAM, null, null, null, null, null, null, null},
-        8)
-        .register(plugin);
-
-        new CustomFood(drinks, new SlimefunItemStack("PINACOLADA", "2a8f1f70e85825607d28edce1a2ad4506e732b4a5345a5ea6e807c4b313e88", "&6Pinacolada", "", "&7&oRestores &b&o" + "7.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("PINEAPPLE"), getItem("ICE_CUBE"), getItem("COCONUT_MILK"), null, null, null, null, null, null},
-        14)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_STRAWBERRY", "6d4ed7c73ac2853dfcaa9ca789fb18da1d47b17ad68b2da748dbd11de1a49ef", "&cChocolate Strawberry", "", "&7&oRestores &b&o" + "2.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHOCOLATE_BAR"), getItem("STRAWBERRY"), null, null, null, null, null, null, null},
-        5)
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("LEMONADE", new CustomPotion("&eLemonade", Color.YELLOW, new PotionEffect(PotionEffectType.SATURATION, 8, 0), "", "&7&oRestores &b&o" + "4.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("LEMON_JUICE"), new ItemStack(Material.SUGAR), null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("SWEET_POTATO_PIE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&rSweet Potato Pie", "", "&7&oRestores &b&o" + "6.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("SWEET_POTATO"), new ItemStack(Material.EGG), SlimefunItems.HEAVY_CREAM, SlimefunItems.WHEAT_FLOUR, null, null, null, null, null},
-        13)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("LAMINGTON", "9119fca4f28a755d37fbe5dcf6d8c3ef50fe394c1a7850bc7e2b71ee78303c4c", "&rLamington", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, getItem("COCONUT"), null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("WAFFLES", "347f4f5a74c6691280cd80e7148b49b2ce17dcf64fd55368627f5d92a976a6a8", "&rWaffles", "", "&7&oRestores &b&o" + "6.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("WHEAT_FLOUR"), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), getItem("BUTTER"), null, null, null, null, null},
-        12)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CLUB_SANDWICH", "a14216d10714082bbe3f412423e6b19232352f4d64f9aca3913cb46318d3ed", "&rClub Sandwich", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), getItem("MAYO"), getItem("BACON"), getItem("TOMATO"), getItem("LETTUCE"), getItem("MUSTARD"), null, null, null},
-        19)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("BURRITO", "a387a621e266186e60683392eb274ebb225b04868ab959177d9dc181d8f286", "&rBurrito", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORNMEAL"), new ItemStack(Material.COOKED_BEEF), getItem("LETTUCE"), getItem("TOMATO"), getItem("HEAVY_CREAM"), getItem("CHEESE"), null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHICKEN_BURRITO", "a387a621e266186e60683392eb274ebb225b04868ab959177d9dc181d8f286", "&rChicken Burrito", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("CORNMEAL"), new ItemStack(Material.COOKED_CHICKEN), getItem("LETTUCE"), getItem("TOMATO"), getItem("HEAVY_CREAM"), getItem("CHEESE"), null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("GRILLED_SANDWICH", "baee84d19c85aff796c88abda21ec4c92c655e2d67b72e5e77b5aa5e99ed", "&rGrilled Sandwich", "", "&7&oRestores &b&o" + "5.5" + " &7&oHunger"),
-        new ItemStack[] {new ItemStack(Material.BREAD), new ItemStack(Material.COOKED_PORKCHOP), getItem("CHEESE"), null, null, null, null, null, null},
-        11)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("LASAGNA", "03a3574a848f36ae37121e9058aa61c12a261ee5a3716f6d8269e11e19e37", "&rLasagna", "", "&7&oRestores &b&o" + "8.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("TOMATO"), getItem("CHEESE"), SlimefunItems.WHEAT_FLOUR, getItem("TOMATO"), getItem("CHEESE"), new ItemStack(Material.COOKED_BEEF), null, null, null},
-        17)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("ICE_CREAM", "95366ca17974892e4fd4c7b9b18feb11f05ba2ec47aa5035c81a9533b28", "&rIce Cream", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("HEAVY_CREAM"), getItem("ICE_CUBE"), new ItemStack(Material.SUGAR), new ItemStack(Material.COCOA_BEANS), getItem("STRAWBERRY"), null, null, null, null},
-        16)
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("PINEAPPLE_JUICE", new CustomPotion("&6Pineapple Juice", Color.ORANGE, new PotionEffect(PotionEffectType.SATURATION, 6, 0), "", "&7&oRestores &b&o" + "3.0" + " &7&oHunger")), RecipeType.JUICER,
-        new ItemStack[] {getItem("PINEAPPLE"), null, null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new Juice(drinks, new SlimefunItemStack("PINEAPPLE_SMOOTHIE", new CustomPotion("&6Pineapple Smoothie", Color.ORANGE, new PotionEffect(PotionEffectType.SATURATION, 10, 0), "", "&7&oRestores &b&o" + "5.0" + " &7&oHunger")), RecipeType.ENHANCED_CRAFTING_TABLE,
-        new ItemStack[] {getItem("PINEAPPLE_JUICE"), getItem("ICE_CUBE"), null, null, null, null, null, null, null})
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("TIRAMISU", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu", "", "&7&oRestores &b&o" + "8.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("HEAVY_CREAM"), new ItemStack(Material.EGG), new ItemStack(Material.SUGAR), new ItemStack(Material.COCOA_BEANS), new ItemStack(Material.EGG), null, null, null, null},
-        16)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("TIRAMISU_WITH_STRAWBERRIES", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu with Strawberries", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("TIRAMISU"), getItem("STRAWBERRY"), null, null, null, null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("TIRAMISU_WITH_RASPBERRIES", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu with Raspberries", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("TIRAMISU"), getItem("RASPBERRY"), null, null, null, null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("TIRAMISU_WITH_BLACKBERRIES", "169091d288022c7b0eb6d3e3f44b0fea7f2c069f497491a1dcab587eb1d56d4", "&rTiramisu with Blackberries", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("TIRAMISU"), getItem("BLACKBERRY"), null, null, null, null, null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("CHOCOLATE_PEAR_CAKE", "9119fca4f28a755d37fbe5dcf6d8c3ef50fe394c1a7850bc7e2b71ee78303c4c", "&rChocolate Pear Cake", "", "&7&oRestores &b&o" + "9.5" + " &7&oHunger"),
-        new ItemStack[] {getItem("CHOCOLATE_BAR"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, getItem("PEAR"), new ItemStack(Material.EGG), null, null, null},
-        19)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("APPLE_PEAR_CAKE", "3418c6b0a29fc1fe791c89774d828ff63d2a9fa6c83373ef3aa47bf3eb79", "&cApple Pear Cake", "", "&7&oRestores &b&o" + "9.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("OAK_APPLE"), new ItemStack(Material.SUGAR), SlimefunItems.WHEAT_FLOUR, SlimefunItems.BUTTER, getItem("PEAR"), new ItemStack(Material.EGG), null, null, null},
-        18)
-        .register(plugin);
-
-        new CustomFood(food, new SlimefunItemStack("STUFFED_RED_BELL_PEPPER", "b6c98b410123b0944422303798fc2db8cea0feeb09d0da40f5361b59498f3e8b", "&cStuffed Red Bell Pepper", "", "&7&oRestores &b&o" + "7.0" + " &7&oHunger"),
-        new ItemStack[] {getItem("RED_BELL_PEPPER"), getItem("ONION"), getItem("GARLIC"), getItem("TOMATO"), null, null, null, null, null},
-        14)
-        .register(plugin);
-
-    }
-    
-    @Nullable
-    private static ItemStack getItem(@Nonnull String id) {
-        SlimefunItem item = SlimefunItem.getById(id);
-        return item != null ? item.getItem() : null;
-    }
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/listeners/AndroidListener.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/listeners/AndroidListener.java
deleted file mode 100644
index 2c701b0..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/listeners/AndroidListener.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.listeners;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.event.EventHandler;
-import org.bukkit.event.Listener;
-
-import io.github.thebusybiscuit.exoticgarden.ExoticGarden;
-import io.github.thebusybiscuit.slimefun4.api.events.AndroidFarmEvent;
-
-public class AndroidListener implements Listener {
-
-    public AndroidListener(@Nonnull ExoticGarden plugin) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-    }
-
-    @EventHandler(ignoreCancelled = true)
-    public void onGrow(AndroidFarmEvent e) {
-        // Only for the advanced harvesting action
-        if (e.isAdvanced() && e.getDrop() == null) {
-            // Allow Androids to harvest our plants
-            e.setDrop(ExoticGarden.harvestPlant(e.getBlock()));
-        }
-    }
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteArrayTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteArrayTag.java
deleted file mode 100644
index 6f0431f..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteArrayTag.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_Byte_Array</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class ByteArrayTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final byte[] value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public ByteArrayTag(String name, byte[] value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public byte[] getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		StringBuilder hex = new StringBuilder();
-		for(byte b : value) {
-			String hexDigits = Integer.toHexString(b).toUpperCase();
-			if(hexDigits.length() == 1) {
-				hex.append("0");
-			}
-			hex.append(hexDigits).append(" ");
-		}
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_Byte_Array" + append + ": " + hex.toString();
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteTag.java
deleted file mode 100644
index 2df3a7e..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ByteTag.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_Byte</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class ByteTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final byte value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public ByteTag(String name, byte value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public Byte getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_Byte" + append + ": " + value;
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/CompoundTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/CompoundTag.java
deleted file mode 100644
index ac53204..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/CompoundTag.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-import java.util.Collections;
-import java.util.Map;
-
-/**
- * The <code>TAG_Compound</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class CompoundTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final Map<String, Tag> value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public CompoundTag(String name, Map<String, Tag> value) {
-		super(name);
-		this.value = Collections.unmodifiableMap(value);
-	}
-
-	@Override
-	public Map<String, Tag> getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		StringBuilder bldr = new StringBuilder();
-		bldr.append("TAG_Compound").append(append).append(": ").append(value.size()).append(" entries\r\n{\r\n");
-		for(Map.Entry<String, Tag> entry : value.entrySet()) {
-			bldr.append("   ").append(entry.getValue().toString().replace("\r\n", "\r\n   ")).append("\r\n");
-		}
-		bldr.append("}");
-		return bldr.toString();
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/DoubleTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/DoubleTag.java
deleted file mode 100644
index a157bcb..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/DoubleTag.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_Double</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class DoubleTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final double value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public DoubleTag(String name, double value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public Double getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_Double" + append + ": " + value;
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/EndTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/EndTag.java
deleted file mode 100644
index 1e5faef..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/EndTag.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_End</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class EndTag extends Tag {
-
-	/**
-	 * Creates the tag.
-	 */
-	public EndTag() {
-		super("");
-	}
-
-	@Override
-	public Object getValue() {
-		return null;
-	}
-
-	@Override
-	public String toString() {
-		return "TAG_End";
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/FloatTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/FloatTag.java
deleted file mode 100644
index 87d85a2..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/FloatTag.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_Float</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class FloatTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final float value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public FloatTag(String name, float value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public Float getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_Float" + append + ": " + value;
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/IntTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/IntTag.java
deleted file mode 100644
index fa090bb..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/IntTag.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_Int</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class IntTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final int value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public IntTag(String name, int value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public Integer getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_Int" + append + ": " + value;
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ListTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ListTag.java
deleted file mode 100644
index 29ca514..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ListTag.java
+++ /dev/null
@@ -1,97 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-import java.util.Collections;
-import java.util.List;
-
-/**
- * The <code>TAG_List</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class ListTag extends Tag {
-
-	/**
-	 * The type.
-	 */
-	private final Class<? extends Tag> type;
-
-	/**
-	 * The value.
-	 */
-	private final List<Tag> value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param type The type of item in the list.
-	 * @param value The value.
-	 */
-	public ListTag(String name, Class<? extends Tag> type, List<Tag> value) {
-		super(name);
-		this.type = type;
-		this.value = Collections.unmodifiableList(value);
-	}
-
-	/**
-	 * Gets the type of item in this list.
-	 * @return The type of item in this list.
-	 */
-	public Class<? extends Tag> getType() {
-		return type;
-	}
-
-	@Override
-	public List<Tag> getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		StringBuilder bldr = new StringBuilder();
-		bldr.append("TAG_List").append(append).append(": ").append(value.size()).append(" entries of type ").append(NBTUtils.getTypeName(type)).append("\r\n{\r\n");
-		for(Tag t : value) {
-			bldr.append("   ").append(t.toString().replace("\r\n", "\r\n   ")).append("\r\n");
-		}
-		bldr.append("}");
-		return bldr.toString();
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/LongTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/LongTag.java
deleted file mode 100644
index 890199d..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/LongTag.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_Long</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class LongTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final long value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public LongTag(String name, long value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public Long getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_Long" + append + ": " + value;
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTConstants.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTConstants.java
deleted file mode 100644
index 0da92cc..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTConstants.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * A class which holds constant values.
- * @author Graham Edgecombe
- *
- */
-public final class NBTConstants {
-
-	/**
-	 * The character set used by NBT (UTF-8).
-	 */
-	public static final Charset CHARSET = StandardCharsets.UTF_8;
-
-	/**
-	 * Tag type constants.
-	 */
-	public static final int TYPE_END = 0,
-		TYPE_BYTE = 1,
-		TYPE_SHORT = 2,
-		TYPE_INT = 3,
-		TYPE_LONG = 4,
-		TYPE_FLOAT = 5,
-		TYPE_DOUBLE = 6,
-		TYPE_BYTE_ARRAY = 7,
-		TYPE_STRING = 8,
-		TYPE_LIST = 9,
-		TYPE_COMPOUND = 10;
-
-	/**
-	 * Default private constructor.
-	 */
-	private NBTConstants() {
-
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTInputStream.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTInputStream.java
deleted file mode 100644
index 0a19762..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTInputStream.java
+++ /dev/null
@@ -1,179 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-import java.io.Closeable;
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.zip.GZIPInputStream;
-
-/**
- * <p>This class reads <strong>NBT</strong>, or
- * <strong>Named Binary Tag</strong> streams, and produces an object graph of
- * subclasses of the <code>Tag</code> object.</p>
- * 
- * <p>The NBT format was created by Markus Persson, and the specification may
- * be found at <a href="http://www.minecraft.net/docs/NBT.txt">
- * http://www.minecraft.net/docs/NBT.txt</a>.</p>
- * @author Graham Edgecombe
- *
- */
-public final class NBTInputStream implements Closeable {
-
-	/**
-	 * The data input stream.
-	 */
-	private final DataInputStream is;
-
-	/**
-	 * Creates a new <code>NBTInputStream</code>, which will source its data
-	 * from the specified input stream.
-	 * @param is The input stream.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	public NBTInputStream(InputStream is) throws IOException {
-		this.is = new DataInputStream(new GZIPInputStream(is));
-	}
-
-	/**
-	 * Reads an NBT tag from the stream.
-	 * @return The tag that was read.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	public Tag readTag() throws IOException {
-		return readTag(0);
-	}
-
-	/**
-	 * Reads an NBT from the stream.
-	 * @param depth The depth of this tag.
-	 * @return The tag that was read.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private Tag readTag(int depth) throws IOException {
-		int type = is.readByte() & 0xFF;
-
-		String name;
-		if(type != NBTConstants.TYPE_END) {
-			int nameLength = is.readShort() & 0xFFFF;
-			byte[] nameBytes = new byte[nameLength];
-			is.readFully(nameBytes);
-			name = new String(nameBytes, NBTConstants.CHARSET);
-		} else {
-			name = "";
-		}
-
-		return readTagPayload(type, name, depth);
-	}
-
-	/**
-	 * Reads the payload of a tag, given the name and type.
-	 * @param type The type.
-	 * @param name The name.
-	 * @param depth The depth.
-	 * @return The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private Tag readTagPayload(int type, String name, int depth) throws IOException {
-		switch(type) {
-		case NBTConstants.TYPE_END:
-			if(depth == 0) {
-				throw new IOException("TAG_End found without a TAG_Compound/TAG_List tag preceding it.");
-			} else {
-				return new EndTag();
-			}
-		case NBTConstants.TYPE_BYTE:
-			return new ByteTag(name, is.readByte());
-		case NBTConstants.TYPE_SHORT:
-			return new ShortTag(name, is.readShort());
-		case NBTConstants.TYPE_INT:
-			return new IntTag(name, is.readInt());
-		case NBTConstants.TYPE_LONG:
-			return new LongTag(name, is.readLong());
-		case NBTConstants.TYPE_FLOAT:
-			return new FloatTag(name, is.readFloat());
-		case NBTConstants.TYPE_DOUBLE:
-			return new DoubleTag(name, is.readDouble());
-		case NBTConstants.TYPE_BYTE_ARRAY:
-			int length = is.readInt();
-			byte[] bytes = new byte[length];
-			is.readFully(bytes);
-			return new ByteArrayTag(name, bytes);
-		case NBTConstants.TYPE_STRING:
-			length = is.readShort();
-			bytes = new byte[length];
-			is.readFully(bytes);
-			return new StringTag(name, new String(bytes, NBTConstants.CHARSET));
-		case NBTConstants.TYPE_LIST:
-			int childType = is.readByte();
-			length = is.readInt();
-
-			List<Tag> tagList = new ArrayList<>();
-			for(int i = 0; i < length; i++) {
-				Tag tag = readTagPayload(childType, "", depth + 1);
-				if(tag instanceof EndTag) {
-					throw new IOException("TAG_End not permitted in a list.");
-				}
-				tagList.add(tag);
-			}
-
-			return new ListTag(name, NBTUtils.getTypeClass(childType), tagList);
-		case NBTConstants.TYPE_COMPOUND:
-			Map<String, Tag> tagMap = new HashMap<>();
-			while(true) {
-				Tag tag = readTag(depth + 1);
-				if(tag instanceof EndTag) {
-					break;
-				} else {
-					tagMap.put(tag.getName(), tag);
-				}
-			}
-
-			return new CompoundTag(name, tagMap);
-		default:
-			throw new IOException("Invalid tag type: " + type + ".");
-		}
-	}
-
-	@Override
-	public void close() throws IOException {
-		is.close();
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTOutputStream.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTOutputStream.java
deleted file mode 100644
index 1528554..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTOutputStream.java
+++ /dev/null
@@ -1,257 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-import java.io.Closeable;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.util.List;
-import java.util.zip.GZIPOutputStream;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * <p>This class writes <strong>NBT</strong>, or
- * <strong>Named Binary Tag</strong> <code>Tag</code> objects to an underlying
- * <code>OutputStream</code>.</p>
- * 
- * <p>The NBT format was created by Markus Persson, and the specification may
- * be found at <a href="http://www.minecraft.net/docs/NBT.txt">
- * http://www.minecraft.net/docs/NBT.txt</a>.</p>
- * @author Graham Edgecombe
- *
- */
-public final class NBTOutputStream implements Closeable {
-
-	/**
-	 * The output stream.
-	 */
-	private final DataOutputStream os;
-
-	/**
-	 * Creates a new <code>NBTOutputStream</code>, which will write data to the
-	 * specified underlying output stream.
-	 * @param os The output stream.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	public NBTOutputStream(OutputStream os) throws IOException {
-		this.os = new DataOutputStream(new GZIPOutputStream(os));
-	}
-
-	/**
-	 * Writes a tag.
-	 * @param tag The tag to write.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	public void writeTag(Tag tag) throws IOException {
-		int type = NBTUtils.getTypeCode(tag.getClass());
-		String name = tag.getName();
-		byte[] nameBytes = name.getBytes(NBTConstants.CHARSET);
-
-		os.writeByte(type);
-		os.writeShort(nameBytes.length);
-		os.write(nameBytes);
-
-		if(type == NBTConstants.TYPE_END) {
-			throw new IOException("Named TAG_End not permitted.");
-		}
-
-		writeTagPayload(tag);
-	}
-
-	/**
-	 * Writes tag payload.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeTagPayload(Tag tag) throws IOException {
-		int type = NBTUtils.getTypeCode(tag.getClass());
-		switch(type) {
-		case NBTConstants.TYPE_END:
-			writeEndTagPayload((EndTag) tag);
-			break;
-		case NBTConstants.TYPE_BYTE:
-			writeByteTagPayload((ByteTag) tag);
-			break;
-		case NBTConstants.TYPE_SHORT:
-			writeShortTagPayload((ShortTag) tag);
-			break;
-		case NBTConstants.TYPE_INT:
-			writeIntTagPayload((IntTag) tag);
-			break;
-		case NBTConstants.TYPE_LONG:
-			writeLongTagPayload((LongTag) tag);
-			break;
-		case NBTConstants.TYPE_FLOAT:
-			writeFloatTagPayload((FloatTag) tag);
-			break;
-		case NBTConstants.TYPE_DOUBLE:
-			writeDoubleTagPayload((DoubleTag) tag);
-			break;
-		case NBTConstants.TYPE_BYTE_ARRAY:
-			writeByteArrayTagPayload((ByteArrayTag) tag);
-			break;
-		case NBTConstants.TYPE_STRING:
-			writeStringTagPayload((StringTag) tag);
-			break;
-		case NBTConstants.TYPE_LIST:
-			writeListTagPayload((ListTag) tag);
-			break;
-		case NBTConstants.TYPE_COMPOUND:
-			writeCompoundTagPayload((CompoundTag) tag);
-			break;
-		default:
-			throw new IOException("Invalid tag type: " + type + ".");
-		}
-	}
-
-	/**
-	 * Writes a <code>TAG_Byte</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeByteTagPayload(ByteTag tag) throws IOException {
-		os.writeByte(tag.getValue());
-	}
-
-	/**
-	 * Writes a <code>TAG_Byte_Array</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeByteArrayTagPayload(ByteArrayTag tag) throws IOException {
-		byte[] bytes = tag.getValue();
-		os.writeInt(bytes.length);
-		os.write(bytes);
-	}
-
-	/**
-	 * Writes a <code>TAG_Compound</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeCompoundTagPayload(CompoundTag tag) throws IOException {
-		for(Tag childTag : tag.getValue().values()) {
-			writeTag(childTag);
-		}
-		os.writeByte((byte) 0); // end tag - better way?
-	}
-
-	/**
-	 * Writes a <code>TAG_List</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeListTagPayload(ListTag tag) throws IOException {
-		Class<? extends Tag> clazz = tag.getType();
-		List<Tag> tags = tag.getValue();
-		int size = tags.size();
-
-		os.writeByte(NBTUtils.getTypeCode(clazz));
-		os.writeInt(size);
-		for (Tag value : tags) {
-			writeTagPayload(value);
-		}
-	}
-
-	/**
-	 * Writes a <code>TAG_String</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeStringTagPayload(StringTag tag) throws IOException {
-		byte[] bytes = tag.getValue().getBytes(NBTConstants.CHARSET);
-		os.writeShort(bytes.length);
-		os.write(bytes);
-	}
-
-	/**
-	 * Writes a <code>TAG_Double</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeDoubleTagPayload(DoubleTag tag) throws IOException {
-		os.writeDouble(tag.getValue());
-	}
-
-	/**
-	 * Writes a <code>TAG_Float</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeFloatTagPayload(FloatTag tag) throws IOException {
-		os.writeFloat(tag.getValue());
-	}
-
-	/**
-	 * Writes a <code>TAG_Long</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeLongTagPayload(LongTag tag) throws IOException {
-		os.writeLong(tag.getValue());
-	}
-
-	/**
-	 * Writes a <code>TAG_Int</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeIntTagPayload(IntTag tag) throws IOException {
-		os.writeInt(tag.getValue());
-	}
-
-	/**
-	 * Writes a <code>TAG_Short</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeShortTagPayload(ShortTag tag) throws IOException {
-		os.writeShort(tag.getValue());
-	}
-
-	/**
-	 * Writes a <code>TAG_Empty</code> tag.
-	 * @param tag The tag.
-	 * @throws IOException if an I/O error occurs.
-	 */
-	private void writeEndTagPayload(EndTag tag) {
-		/* empty */
-	}
-
-	@Override
-	public void close() throws IOException {
-		os.close();
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTUtils.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTUtils.java
deleted file mode 100644
index f9dc0fe..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/NBTUtils.java
+++ /dev/null
@@ -1,152 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * A class which contains NBT-related utility methods.
- * @author Graham Edgecombe
- *
- */
-public final class NBTUtils {
-
-	/**
-	 * Gets the type name of a tag.
-	 * @param clazz The tag class.
-	 * @return The type name.
-	 */
-	public static String getTypeName(Class<? extends Tag> clazz) {
-		if(clazz.equals(ByteArrayTag.class)) {
-			return "TAG_Byte_Array";
-		} else if(clazz.equals(ByteTag.class)) {
-			return "TAG_Byte";
-		} else if(clazz.equals(CompoundTag.class)) {
-			return "TAG_Compound";
-		} else if(clazz.equals(DoubleTag.class)) {
-			return "TAG_Double";
-		} else if(clazz.equals(EndTag.class)) {
-			return "TAG_End";
-		} else if(clazz.equals(FloatTag.class)) {
-			return "TAG_Float";
-		} else if(clazz.equals(IntTag.class)) {
-			return "TAG_Int";
-		} else if(clazz.equals(ListTag.class)) {
-			return "TAG_List";
-		} else if(clazz.equals(LongTag.class)) {
-			return "TAG_Long";
-		} else if(clazz.equals(ShortTag.class)) {
-			return "TAG_Short";
-		} else if(clazz.equals(StringTag.class)) {
-			return "TAG_String";
-		} else {
-			throw new IllegalArgumentException("Invalid tag classs (" + clazz.getName() + ").");
-		}
-	}
-
-	/**
-	 * Gets the type code of a tag class.
-	 * @param clazz The tag class.
-	 * @return The type code.
-	 * @throws IllegalArgumentException if the tag class is invalid.
-	 */
-	public static int getTypeCode(Class<? extends Tag> clazz) {
-		if(clazz.equals(ByteArrayTag.class)) {
-			return NBTConstants.TYPE_BYTE_ARRAY;
-		} else if(clazz.equals(ByteTag.class)) {
-			return NBTConstants.TYPE_BYTE;
-		} else if(clazz.equals(CompoundTag.class)) {
-			return NBTConstants.TYPE_COMPOUND;
-		} else if(clazz.equals(DoubleTag.class)) {
-			return NBTConstants.TYPE_DOUBLE;
-		} else if(clazz.equals(EndTag.class)) {
-			return NBTConstants.TYPE_END;
-		} else if(clazz.equals(FloatTag.class)) {
-			return NBTConstants.TYPE_FLOAT;
-		} else if(clazz.equals(IntTag.class)) {
-			return NBTConstants.TYPE_INT;
-		} else if(clazz.equals(ListTag.class)) {
-			return NBTConstants.TYPE_LIST;
-		} else if(clazz.equals(LongTag.class)) {
-			return NBTConstants.TYPE_LONG;
-		} else if(clazz.equals(ShortTag.class)) {
-			return NBTConstants.TYPE_SHORT;
-		} else if(clazz.equals(StringTag.class)) {
-			return NBTConstants.TYPE_STRING;
-		} else {
-			throw new IllegalArgumentException("Invalid tag classs (" + clazz.getName() + ").");
-		}
-	}
-
-	/**
-	 * Gets the class of a type of tag.
-	 * @param type The type.
-	 * @return The class.
-	 * @throws IllegalArgumentException if the tag type is invalid.
-	 */
-	public static Class<? extends Tag> getTypeClass(int type) {
-		switch(type) {
-		case NBTConstants.TYPE_END:
-			return EndTag.class;
-		case NBTConstants.TYPE_BYTE:
-			return ByteTag.class;
-		case NBTConstants.TYPE_SHORT:
-			return ShortTag.class;
-		case NBTConstants.TYPE_INT:
-			return IntTag.class;
-		case NBTConstants.TYPE_LONG:
-			return LongTag.class;
-		case NBTConstants.TYPE_FLOAT:
-			return FloatTag.class;
-		case NBTConstants.TYPE_DOUBLE:
-			return DoubleTag.class;
-		case NBTConstants.TYPE_BYTE_ARRAY:
-			return ByteArrayTag.class;
-		case NBTConstants.TYPE_STRING:
-			return StringTag.class;
-		case NBTConstants.TYPE_LIST:
-			return ListTag.class;
-		case NBTConstants.TYPE_COMPOUND:
-			return CompoundTag.class;
-		default:
-			throw new IllegalArgumentException("Invalid tag type : " + type + ".");
-		}
-	}
-
-	/**
-	 * Default private constructor.
-	 */
-	private NBTUtils() {
-
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ShortTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ShortTag.java
deleted file mode 100644
index f9ab6a1..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/ShortTag.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_Short</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class ShortTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final short value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public ShortTag(String name, short value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public Short getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_Short" + append + ": " + value;
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/StringTag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/StringTag.java
deleted file mode 100644
index a3cfb3d..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/StringTag.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * The <code>TAG_String</code> tag.
- * @author Graham Edgecombe
- *
- */
-public final class StringTag extends Tag {
-
-	/**
-	 * The value.
-	 */
-	private final String value;
-
-	/**
-	 * Creates the tag.
-	 * @param name The name.
-	 * @param value The value.
-	 */
-	public StringTag(String name, String value) {
-		super(name);
-		this.value = value;
-	}
-
-	@Override
-	public String getValue() {
-		return value;
-	}
-
-	@Override
-	public String toString() {
-		String name = getName();
-		String append = "";
-		if(name != null && !name.equals("")) {
-			append = "(\"" + this.getName() + "\")";
-		}
-		return "TAG_String" + append + ": " + value;
-	}
-
-}
diff --git a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/Tag.java b/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/Tag.java
deleted file mode 100644
index 12c57b8..0000000
--- a/src/main/java/io/github/thebusybiscuit/exoticgarden/schematics/org/jnbt/Tag.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package io.github.thebusybiscuit.exoticgarden.schematics.org.jnbt;
-
-/*
- * JNBT License
- * 
- * Copyright (c) 2010 Graham Edgecombe
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright notice,
- *       this list of conditions and the following disclaimer.
- *       
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *       
- *     * Neither the name of the JNBT team nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE. 
- */
-
-/**
- * Represents a single NBT tag.
- * @author Graham Edgecombe
- *
- */
-public abstract class Tag {
-
-	/**
-	 * The name of this tag.
-	 */
-	private final String name;
-
-	/**
-	 * Creates the tag with the specified name.
-	 * @param name The name.
-	 */
-	public Tag(String name) {
-		this.name = name;
-	}
-
-	/**
-	 * Gets the name of this tag.
-	 * @return The name of this tag.
-	 */
-	public final String getName() {
-		return name;
-	}
-
-	/**
-	 * Gets the value of this tag.
-	 * @return The value of this tag.
-	 */
-	public abstract Object getValue();
-
-}
diff --git a/src/main/resources/addons-config/ExoticGarden/config.yml b/src/main/resources/addons-config/ExoticGarden/config.yml
new file mode 100644
index 0000000..cb6e2c1
--- /dev/null
+++ b/src/main/resources/addons-config/ExoticGarden/config.yml
@@ -0,0 +1,7 @@
+grass-drops: [ ]
+world-blacklist:
+  - world_nether
+  - world_the_end
+chances:
+  TREE: 22
+  BUSH: 16
\ No newline at end of file
diff --git a/src/main/resources/schematics/CHERRY_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/CHERRY_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/CHERRY_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/CHERRY_TREE.schematic
diff --git a/src/main/resources/schematics/COCONUT_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/COCONUT_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/COCONUT_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/COCONUT_TREE.schematic
diff --git a/src/main/resources/schematics/DRAGON_FRUIT_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/DRAGON_FRUIT_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/DRAGON_FRUIT_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/DRAGON_FRUIT_TREE.schematic
diff --git a/src/main/resources/schematics/LEMON_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/LEMON_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/LEMON_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/LEMON_TREE.schematic
diff --git a/src/main/resources/schematics/LIME_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/LIME_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/LIME_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/LIME_TREE.schematic
diff --git a/src/main/resources/schematics/OAK_APPLE_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/OAK_APPLE_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/OAK_APPLE_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/OAK_APPLE_TREE.schematic
diff --git a/src/main/resources/schematics/ORANGE_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/ORANGE_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/ORANGE_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/ORANGE_TREE.schematic
diff --git a/src/main/resources/schematics/PEACH_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/PEACH_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/PEACH_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/PEACH_TREE.schematic
diff --git a/src/main/resources/schematics/PEAR_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/PEAR_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/PEAR_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/PEAR_TREE.schematic
diff --git a/src/main/resources/schematics/PLUM_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/PLUM_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/PLUM_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/PLUM_TREE.schematic
diff --git a/src/main/resources/schematics/POMEGRANATE_TREE.schematic b/src/main/resources/addons-config/ExoticGarden/schematics/POMEGRANATE_TREE.schematic
similarity index 100%
rename from src/main/resources/schematics/POMEGRANATE_TREE.schematic
rename to src/main/resources/addons-config/ExoticGarden/schematics/POMEGRANATE_TREE.schematic
diff --git a/src/main/resources/config.yml b/src/main/resources/config.yml
deleted file mode 100644
index f1b4b80..0000000
--- a/src/main/resources/config.yml
+++ /dev/null
@@ -1,9 +0,0 @@
-grass-drops: []
-world-blacklist:
-- world_nether
-- world_the_end
-chances:
-  TREE: 22
-  BUSH: 16
-options:
-  auto-update: true
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index 44598ce..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,11 +0,0 @@
-name: ExoticGarden
-version: ${project.version}
-author: TheBusyBiscuit
-description: A Slimefun Addon that adds new Plants and dishes to the game
-website: https://github.com/TheBusyBiscuit/ExoticGarden
-
-api-version: '1.13'
-main: io.github.thebusybiscuit.exoticgarden.ExoticGarden
-
-depend:
-- Slimefun
\ No newline at end of file
-- 
2.44.0.windows.1

