From c539a5aaf48382a9873015a739b1188c3fb1fde1 Mon Sep 17 00:00:00 2001
From: ARVIN3108 <70049331+ARVIN3108@users.noreply.github.com>
Date: Thu, 4 Apr 2024 10:45:52 +0700
Subject: [PATCH] SlimefunTranslation

---
 pom.xml                                       |  47 ++++
 .../SlimefunTranslation.java                  |  68 ++++++
 .../api/SlimefunTranslationAPI.java           |  27 +-
 .../api/config/TranslationConditions.java     |   8 +-
 .../api/config/TranslationConfiguration.java  | 190 +++++++-------
 .../TranslationConfigurationDefaults.java     |   2 +-
 .../TranslationConfigurationFields.java       |   2 +-
 .../api/config/Translations.java              |   5 +-
 .../api/config/package-info.java              |   2 +-
 .../api/events/TranslationsLoadEvent.java     |   3 +-
 .../TagMisconfigurationException.java         |   8 +-
 .../api/exceptions/package-info.java          |   4 +
 .../slimefuntranslation/api/package-info.java |   2 +-
 .../api/translation/ItemTranslation.java      |   8 +-
 .../api/translation/TranslationStatus.java    |   4 +-
 .../api/translation/lore/LoreHandler.java     |   4 +-
 .../api/translation/package-info.java         |   4 +
 .../slimefuntranslation/core/Registry.java    |   9 +-
 .../core/commands/AbstractSubCommand.java     |  13 +
 .../core/commands/subcommands/IdCommand.java  |  56 +++++
 .../commands/subcommands/SearchCommand.java   |  54 ++--
 .../translation/ExtractCommand.java           |  19 ++
 .../translation/GenerateCommand.java          | 121 +++++++++
 .../translation/ReloadCommand.java            |  20 ++
 .../core/factories/MessageFactory.java        |  31 ++-
 .../core/services/CommandService.java         |  19 ++
 .../core/services/ConfigurationService.java   |  13 +-
 .../core/services/IntegrationService.java     |  59 +++++
 .../core/services/ListenerService.java        |  21 ++
 .../core/services/PacketListenerService.java  |  27 ++
 .../core/services/TranslationService.java     | 231 ++++++------------
 .../core/services/UserService.java            |  16 +-
 .../slimefuntranslation/core/users/User.java  |  12 +-
 .../listeners/PlayerJoinListener.java         |   8 +-
 .../listeners/PlayerQuitListener.java         |   8 +-
 .../SlimefunBlockRightClickListener.java      |  28 +++
 .../listeners/SlimefunItemLoadListener.java   |  11 +-
 .../SlimefunLanguageChangeListener.java       |  10 +-
 .../listeners/TranslationsLoadListener.java   |  10 +-
 .../packetlisteners/AListener.java            |  13 +-
 .../client/AClientListener.java               |   8 +-
 .../client/items/SetCreativeSlotListener.java |  13 +-
 .../client/items/WindowClickListener.java     |  13 +-
 .../server/AServerListener.java               |   8 +-
 .../server/EntityMetadataListener.java        |  31 +--
 .../server/OpenWindowListener.java            |  24 +-
 .../server/items/SetSlotListener.java         |  17 +-
 .../server/items/WindowItemListener.java      |  17 +-
 .../translations/FixedItemTranslation.java    |  99 ++++----
 .../ProgrammedItemTranslation.java            |  28 +--
 .../integrations/placeholders/AExpansion.java |  15 +-
 .../placeholders/SlimefunLoreExpansion.java   |  21 +-
 .../slimefuntranslation/utils/ColorUtils.java |  28 +++
 .../utils/ConfigUtils.java                    |  39 +--
 .../slimefuntranslation/utils/FileUtils.java  |  56 ++---
 .../utils/GeneralUtils.java                   |  11 +
 .../utils/ReflectionUtils.java                |   2 +-
 .../utils/SlimefunItemUtils.java              |  33 +--
 .../utils/TranslationUtils.java               |  38 ++-
 .../utils/constant/Keys.java                  |  16 ++
 .../utils/constant/Methods.java               |  10 +-
 .../utils/constant/Patterns.java              |  12 +
 .../utils/constant/Permissions.java           |   2 +-
 .../utils/tags/SlimefunTranslationTag.java    |  46 ++--
 .../utils/tags/TagParser.java                 |  35 ++-
 .../SlimefunTranslation.java                  | 132 ----------
 .../api/exceptions/package-info.java          |   4 -
 .../api/translation/package-info.java         |   4 -
 .../core/commands/AbstractSubCommand.java     |  49 ----
 .../core/commands/MainCommand.java            |  27 --
 .../core/commands/subcommands/IdCommand.java  |  66 -----
 .../subcommands/TranslationCommand.java       |  27 --
 .../translation/ExtractCommand.java           |  44 ----
 .../translation/GenerateCommand.java          | 143 -----------
 .../translation/ReloadCommand.java            |  40 ---
 .../core/services/CommandService.java         |  10 -
 .../core/services/IntegrationService.java     |  76 ------
 .../core/services/ListenerService.java        |  22 --
 .../core/services/PacketListenerService.java  |  30 ---
 .../SlimefunBlockRightClickListener.java      |  24 --
 .../slimefuntranslation/utils/ColorUtils.java |  34 ---
 .../utils/GeneralUtils.java                   |  15 --
 .../utils/constant/Keys.java                  |  25 --
 .../utils/constant/Patterns.java              |  12 -
 .../SlimefunTranslation}/config.yml           |   0
 .../SlimefunTranslation}/tags/axe.json        |   0
 .../SlimefunTranslation}/tags/boots.json      |   0
 .../SlimefunTranslation}/tags/bow.json        |   0
 .../SlimefunTranslation}/tags/carpet.json     |   0
 .../SlimefunTranslation}/tags/chest_slot.json |   0
 .../SlimefunTranslation}/tags/chestplate.json |   0
 .../SlimefunTranslation}/tags/feet_slot.json  |   0
 .../tags/fishing_rod.json                     |   0
 .../SlimefunTranslation}/tags/hand_slot.json  |   0
 .../SlimefunTranslation}/tags/head.json       |   0
 .../SlimefunTranslation}/tags/head_slot.json  |   0
 .../SlimefunTranslation}/tags/helmet.json     |   0
 .../SlimefunTranslation}/tags/hoe.json        |   0
 .../tags/horse_armor.json                     |   0
 .../SlimefunTranslation}/tags/leggings.json   |   0
 .../SlimefunTranslation}/tags/legs_slot.json  |   0
 .../tags/off_hand_slot.json                   |   0
 .../SlimefunTranslation}/tags/pickaxe.json    |   0
 .../SlimefunTranslation}/tags/shovel.json     |   0
 .../SlimefunTranslation}/tags/sword.json      |   0
 .../translations/en/messages.yml              |   0
 .../translations/en/slimefun/armor.yml        |   0
 .../en/slimefun/basic-machines.yml            |   0
 .../en/slimefun/cargo-management.yml          |   0
 .../en/slimefun/energy-and-electricity.yml    |   0
 .../translations/en/slimefun/food.yml         |   0
 .../translations/en/slimefun/gps.yml          |   0
 .../translations/en/slimefun/guide.yml        |   0
 .../translations/en/slimefun/lore-builder.yml |   0
 .../en/slimefun/magical-armor.yml             |   0
 .../en/slimefun/magical-gadgets.yml           |   0
 .../en/slimefun/magical-items.yml             |   0
 .../en/slimefun/miscellaneous-items.yml       |   0
 .../en/slimefun/programmable-androids.yml     |   0
 .../translations/en/slimefun/resources.yml    |   0
 .../translations/en/slimefun/secret-items.yml |   0
 .../translations/en/slimefun/talismans-1.yml  |   0
 .../translations/en/slimefun/talismans-2.yml  |   0
 .../en/slimefun/technical-components.yml      |   0
 .../en/slimefun/technical-gadgets.yml         |   0
 .../translations/en/slimefun/tools.yml        |   0
 .../translations/en/slimefun/ui.yml           |   0
 .../translations/en/slimefun/useful-items.yml |   0
 .../translations/en/slimefun/weapons.yml      |   0
 .../translations/ja/slimefun/armor.yml        |   0
 .../translations/ja/slimefun/food.yml         |   0
 .../ja/slimefun/miscellaneous-items.yml       |   0
 .../ja/slimefun/technical-components.yml      |   0
 .../translations/vi/messages.yml              |   0
 .../translations/vi/slimefun/armor.yml        |   0
 .../vi/slimefun/basic-machines.yml            |   0
 .../vi/slimefun/cargo-management.yml          |   0
 .../vi/slimefun/energy-and-electricity.yml    |   0
 .../translations/vi/slimefun/food.yml         |   0
 .../translations/vi/slimefun/gps.yml          |   0
 .../translations/vi/slimefun/guide.yml        |   0
 .../translations/vi/slimefun/lore-builder.yml |   0
 .../vi/slimefun/magical-armor.yml             |   0
 .../vi/slimefun/magical-gadgets.yml           |   0
 .../vi/slimefun/magical-items.yml             |   0
 .../vi/slimefun/miscellaneous-items.yml       |   0
 .../vi/slimefun/programmable-androids.yml     |   0
 .../translations/vi/slimefun/resources.yml    |   0
 .../translations/vi/slimefun/secret-items.yml |   0
 .../translations/vi/slimefun/talismans-1.yml  |   0
 .../translations/vi/slimefun/talismans-2.yml  |   0
 .../vi/slimefun/technical-components.yml      |   0
 .../vi/slimefun/technical-gadgets.yml         |   0
 .../translations/vi/slimefun/tools.yml        |   0
 .../translations/vi/slimefun/ui.yml           |   0
 .../translations/vi/slimefun/useful-items.yml |   0
 .../translations/vi/slimefun/weapons.yml      |   0
 .../translations/zh-Hans/messages.yml         |   0
 .../translations/zh-Hans/slimefun/armor.yml   |   0
 .../zh-Hans/slimefun/basic-machines.yml       |   0
 .../zh-Hans/slimefun/cargo-management.yml     |   0
 .../slimefun/energy-and-electricity.yml       |   0
 .../translations/zh-Hans/slimefun/food.yml    |   0
 .../translations/zh-Hans/slimefun/gps.yml     |   0
 .../translations/zh-Hans/slimefun/guide.yml   |   0
 .../zh-Hans/slimefun/lore-builder.yml         |   0
 .../zh-Hans/slimefun/magical-armor.yml        |   0
 .../zh-Hans/slimefun/magical-gadgets.yml      |   0
 .../zh-Hans/slimefun/magical-items.yml        |   0
 .../zh-Hans/slimefun/miscellaneous-items.yml  |   0
 .../slimefun/programmable-androids.yml        |   0
 .../zh-Hans/slimefun/resources.yml            |   0
 .../zh-Hans/slimefun/secret-items.yml         |   0
 .../zh-Hans/slimefun/talismans-1.yml          |   0
 .../zh-Hans/slimefun/talismans-2.yml          |   0
 .../zh-Hans/slimefun/technical-components.yml |   0
 .../zh-Hans/slimefun/technical-gadgets.yml    |   0
 .../translations/zh-Hans/slimefun/tools.yml   |   0
 .../translations/zh-Hans/slimefun/ui.yml      |   0
 .../zh-Hans/slimefun/useful-items.yml         |   0
 .../translations/zh-Hans/slimefun/weapons.yml |   0
 181 files changed, 1071 insertions(+), 1532 deletions(-)
 create mode 100644 pom.xml
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/SlimefunTranslation.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/SlimefunTranslationAPI.java (82%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/config/TranslationConditions.java (93%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/config/TranslationConfiguration.java (50%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/config/TranslationConfigurationDefaults.java (87%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/config/TranslationConfigurationFields.java (93%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/config/Translations.java (75%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/config/package-info.java (55%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/events/TranslationsLoadEvent.java (89%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/exceptions/TagMisconfigurationException.java (89%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/exceptions/package-info.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/package-info.java (55%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/translation/ItemTranslation.java (83%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/translation/TranslationStatus.java (66%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/api/translation/lore/LoreHandler.java (57%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/package-info.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/core/Registry.java (75%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/AbstractSubCommand.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/IdCommand.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/core/commands/subcommands/SearchCommand.java (72%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/core/factories/MessageFactory.java (79%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/CommandService.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/core/services/ConfigurationService.java (78%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/IntegrationService.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/ListenerService.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/PacketListenerService.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/core/services/TranslationService.java (54%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/core/services/UserService.java (63%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/core/users/User.java (78%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/listeners/PlayerJoinListener.java (56%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/listeners/PlayerQuitListener.java (56%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/listeners/SlimefunItemLoadListener.java (52%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/listeners/SlimefunLanguageChangeListener.java (58%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/listeners/TranslationsLoadListener.java (52%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/AListener.java (73%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/client/AClientListener.java (57%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/client/items/SetCreativeSlotListener.java (54%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/client/items/WindowClickListener.java (53%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/server/AServerListener.java (57%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/server/EntityMetadataListener.java (84%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/server/OpenWindowListener.java (69%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/server/items/SetSlotListener.java (60%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/packetlisteners/server/items/WindowItemListener.java (56%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/translations/FixedItemTranslation.java (57%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/implementation/translations/ProgrammedItemTranslation.java (69%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/integrations/placeholders/AExpansion.java (54%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/integrations/placeholders/SlimefunLoreExpansion.java (67%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ColorUtils.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/ConfigUtils.java (62%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/FileUtils.java (61%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/GeneralUtils.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/ReflectionUtils.java (86%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/SlimefunItemUtils.java (65%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/TranslationUtils.java (71%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Keys.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/constant/Methods.java (58%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Patterns.java
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/constant/Permissions.java (90%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/tags/SlimefunTranslationTag.java (76%)
 rename src/main/java/{net/guizhanss => id/universenetwork/sfa_loader/addons}/slimefuntranslation/utils/tags/TagParser.java (76%)
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/SlimefunTranslation.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/api/exceptions/package-info.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/api/translation/package-info.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/commands/AbstractSubCommand.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/commands/MainCommand.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/IdCommand.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/TranslationCommand.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/services/CommandService.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/services/IntegrationService.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/services/ListenerService.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/core/services/PacketListenerService.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/utils/ColorUtils.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/utils/GeneralUtils.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Keys.java
 delete mode 100644 src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Patterns.java
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/config.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/axe.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/boots.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/bow.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/carpet.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/chest_slot.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/chestplate.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/feet_slot.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/fishing_rod.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/hand_slot.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/head.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/head_slot.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/helmet.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/hoe.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/horse_armor.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/leggings.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/legs_slot.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/off_hand_slot.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/pickaxe.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/shovel.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/tags/sword.json (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/messages.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/armor.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/basic-machines.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/cargo-management.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/energy-and-electricity.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/food.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/gps.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/guide.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/lore-builder.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/magical-armor.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/magical-gadgets.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/magical-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/miscellaneous-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/programmable-androids.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/resources.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/secret-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/talismans-1.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/talismans-2.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/technical-components.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/technical-gadgets.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/tools.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/ui.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/useful-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/en/slimefun/weapons.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/ja/slimefun/armor.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/ja/slimefun/food.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/ja/slimefun/miscellaneous-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/ja/slimefun/technical-components.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/messages.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/armor.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/basic-machines.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/cargo-management.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/energy-and-electricity.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/food.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/gps.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/guide.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/lore-builder.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/magical-armor.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/magical-gadgets.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/magical-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/miscellaneous-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/programmable-androids.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/resources.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/secret-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/talismans-1.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/talismans-2.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/technical-components.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/technical-gadgets.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/tools.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/ui.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/useful-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/vi/slimefun/weapons.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/messages.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/armor.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/basic-machines.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/cargo-management.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/energy-and-electricity.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/food.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/gps.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/guide.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/lore-builder.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/magical-armor.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/magical-gadgets.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/magical-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/miscellaneous-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/programmable-androids.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/resources.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/secret-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/talismans-1.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/talismans-2.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/technical-components.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/technical-gadgets.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/tools.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/ui.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/useful-items.yml (100%)
 rename src/main/resources/{ => addons-config/SlimefunTranslation}/translations/zh-Hans/slimefun/weapons.yml (100%)

diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..548f78d
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,47 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>UNOFFICIAL</version>
+    </parent>
+
+    <groupId>net.guizhanss</groupId>
+    <artifactId>SlimefunTranslation</artifactId>
+    <version>UNOFFICIAL</version>
+
+    <repositories>
+        <repository>
+            <id>dmulloy2</id>
+            <url>https://repo.dmulloy2.net/repository/public</url>
+        </repository>
+        <repository>
+            <id>PlaceholderAPI</id>
+            <url>https://repo.extendedclip.com/content/repositories/placeholderapi</url>
+        </repository>
+    </repositories>
+
+    <dependencies>
+        <dependency>
+            <groupId>io.papermc.paper</groupId>
+            <artifactId>paper-api</artifactId>
+            <version>1.20.4-R0.1-SNAPSHOT</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>me.clip</groupId>
+            <artifactId>placeholderapi</artifactId>
+            <version>2.11.5</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.comphenix.protocol</groupId>
+            <artifactId>ProtocolLib</artifactId>
+            <version>5.1.0</version>
+            <scope>provided</scope>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/SlimefunTranslation.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/SlimefunTranslation.java
new file mode 100644
index 0000000..dbf5007
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/SlimefunTranslation.java
@@ -0,0 +1,68 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation;
+
+import java.util.logging.Level;
+
+import javax.annotation.Nonnull;
+
+import com.google.common.base.Preconditions;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.Registry;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services.CommandService;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services.ConfigurationService;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services.IntegrationService;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services.ListenerService;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services.TranslationService;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services.UserService;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.tags.SlimefunTranslationTag;
+import id.universenetwork.sfa_loader.annotations.AddonDependencies;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import lombok.Getter;
+
+@AddonDependencies({"ProtocolLib", "PlaceholderAPI"})
+public final class SlimefunTranslation extends AddonTemplate {
+    @Getter
+    private static ConfigurationService configService;
+    @Getter
+    private static Registry registry;
+    @Getter
+    private static UserService userService;
+    @Getter
+    private static TranslationService translationService;
+    @Getter
+    private static IntegrationService integrationService;
+    private static boolean debugEnabled = false;
+
+    public static void debug(@Nonnull String message, @Nonnull Object... args) {
+        Preconditions.checkNotNull(message, "message cannot be null");
+
+        if (debugEnabled) LogUtils.log(Level.INFO, "[DEBUG] " + message, args);
+    }
+
+    @Override
+    public void onLoad() {
+        LogUtils.info("====================");
+        LogUtils.info("Slimefun Translation");
+        LogUtils.info("     by ybw0014     ");
+        LogUtils.info("====================");
+
+        // tags
+        SlimefunTranslationTag.reloadAll();
+
+        // config
+        configService = new ConfigurationService(this);
+
+        // registry
+        registry = new Registry();
+
+        // debug
+        debugEnabled = configService.isDebug();
+
+        // other services
+        userService = new UserService();
+        translationService = new TranslationService(this);
+        new CommandService();
+        new ListenerService();
+        integrationService = new IntegrationService();
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/SlimefunTranslationAPI.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/SlimefunTranslationAPI.java
similarity index 82%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/SlimefunTranslationAPI.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/SlimefunTranslationAPI.java
index 8407b27..608210c 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/SlimefunTranslationAPI.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/SlimefunTranslationAPI.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.api;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api;
 
 import java.util.UUID;
 
@@ -14,11 +14,10 @@ import org.bukkit.plugin.Plugin;
 
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.translation.lore.LoreHandler;
-import net.guizhanss.slimefuntranslation.core.factories.MessageFactory;
-import net.guizhanss.slimefuntranslation.core.users.User;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.lore.LoreHandler;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.factories.MessageFactory;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
 import lombok.experimental.UtilityClass;
 
 /**
@@ -35,7 +34,7 @@ public final class SlimefunTranslationAPI {
      * @return The {@link User} with the given {@link UUID}.
      */
     @Nonnull
-    public static User getUser(@Nonnull UUID uuid) {
+    public User getUser(@Nonnull UUID uuid) {
         Preconditions.checkArgument(uuid != null, "UUID cannot be null");
 
         return SlimefunTranslation.getUserService().getUser(uuid);
@@ -48,7 +47,7 @@ public final class SlimefunTranslationAPI {
      * @return The {@link User} with the given {@link Player}.
      */
     @Nonnull
-    public static User getUser(@Nonnull Player player) {
+    public User getUser(@Nonnull Player player) {
         Preconditions.checkArgument(player != null, "Player cannot be null");
 
         return getUser(player.getUniqueId());
@@ -63,7 +62,7 @@ public final class SlimefunTranslationAPI {
      * Will return an empty string when the item is null, or the original item name if the translation is disabled.
      */
     @Nonnull
-    public static String getItemName(@Nonnull User user, @Nullable SlimefunItem sfItem) {
+    public String getItemName(@Nonnull User user, @Nullable SlimefunItem sfItem) {
         Preconditions.checkArgument(user != null, "User cannot be null");
 
         return SlimefunTranslation.getTranslationService().getTranslatedItemName(user, sfItem);
@@ -79,7 +78,7 @@ public final class SlimefunTranslationAPI {
      */
     @Nonnull
     @ParametersAreNonnullByDefault
-    public static String getItemName(User user, String id) {
+    public String getItemName(User user, String id) {
         Preconditions.checkArgument(user != null, "User cannot be null");
         Preconditions.checkArgument(id != null, "ID cannot be null");
 
@@ -94,7 +93,7 @@ public final class SlimefunTranslationAPI {
      * @return Whether the translation is processed.
      */
     @ParametersAreNonnullByDefault
-    public static boolean translateItem(User user, ItemStack item) {
+    public boolean translateItem(User user, ItemStack item) {
         Preconditions.checkArgument(user != null, "User cannot be null");
         Preconditions.checkArgument(item != null, "Item cannot be null");
 
@@ -111,7 +110,7 @@ public final class SlimefunTranslationAPI {
      */
     @Nonnull
     @ParametersAreNonnullByDefault
-    public static String getLore(User user, String id, boolean defaultToId) {
+    public String getLore(User user, String id, boolean defaultToId) {
         Preconditions.checkArgument(user != null, "User cannot be null");
         Preconditions.checkArgument(id != null, "ID cannot be null");
 
@@ -119,7 +118,7 @@ public final class SlimefunTranslationAPI {
     }
 
     @ParametersAreNonnullByDefault
-    public static void registerLoreHandler(String id, LoreHandler handler) {
+    public void registerLoreHandler(String id, LoreHandler handler) {
         Preconditions.checkArgument(id != null, "ID cannot be null");
         Preconditions.checkArgument(handler != null, "Handler cannot be null");
 
@@ -133,7 +132,7 @@ public final class SlimefunTranslationAPI {
      * @return The {@link MessageFactory} for the given {@link Plugin}.
      */
     @Nonnull
-    public static MessageFactory getMessageFactory(@Nonnull Plugin plugin) {
+    public MessageFactory getMessageFactory(@Nonnull Plugin plugin) {
         Preconditions.checkArgument(plugin != null, "Plugin cannot be null");
 
         return MessageFactory.get(plugin);
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConditions.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConditions.java
similarity index 93%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConditions.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConditions.java
index 9396f76..5ab7479 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConditions.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConditions.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.api.config;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -52,7 +52,7 @@ public final class TranslationConditions {
      */
     @Nonnull
     public static TranslationConditions load(@Nullable ConfigurationSection section) {
-        // the default conditions are all false
+        // The default conditions are all false
         return load(TranslationConditions.builder().build(), section);
     }
 
@@ -66,9 +66,7 @@ public final class TranslationConditions {
      */
     public static TranslationConditions load(@Nonnull TranslationConditions parent, @Nullable ConfigurationSection section) {
         Preconditions.checkArgument(parent != null, "parent cannot be null");
-        if (section == null) {
-            return parent;
-        }
+        if (section == null) return parent;
         return TranslationConditions.builder()
             .matchName(section.getBoolean(KEY_MATCH_NAME, parent.matchName))
             .matchLore(section.getBoolean(KEY_MATCH_LORE, parent.matchLore))
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfiguration.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfiguration.java
similarity index 50%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfiguration.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfiguration.java
index e495b23..5f08ca8 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfiguration.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfiguration.java
@@ -1,6 +1,7 @@
-package net.guizhanss.slimefuntranslation.api.config;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config;
 
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.logging.Level;
@@ -17,12 +18,13 @@ import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.translation.ItemTranslation;
-import net.guizhanss.slimefuntranslation.implementation.translations.FixedItemTranslation;
-import net.guizhanss.slimefuntranslation.utils.ConfigUtils;
-import net.guizhanss.slimefuntranslation.utils.GeneralUtils;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.ItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.Registry;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.translations.FixedItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.ConfigUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.GeneralUtils;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
@@ -81,65 +83,53 @@ public class TranslationConfiguration {
         String lang = SlimefunTranslation.getConfigService().getMappedLanguage(language);
 
         if (SlimefunTranslation.getConfigService().getDisabledLanguages().contains(lang)) {
-            SlimefunTranslation.log(Level.INFO, "Language {0} is disabled, ignoring.", lang);
+            LogUtils.log(Level.INFO, "Language {0} is disabled, ignoring.", (Object) lang);
             return Optional.empty();
         }
 
         String itemIdPrefix = config.getString(fields.getPrefix(), defaults.getPrefix());
         String itemIdSuffix = config.getString(fields.getSuffix(), defaults.getSuffix());
 
-        var guidesSection = config.getConfigurationSection(fields.getGuides());
-        var itemGroupsSection = config.getConfigurationSection(fields.getItemGroups());
-        var itemsSection = config.getConfigurationSection(fields.getItems());
-        var loreSection = config.getConfigurationSection(fields.getLore());
-        var messagesSection = config.getConfigurationSection(fields.getMessages());
-
+        ConfigurationSection guidesSection = config.getConfigurationSection(fields.getGuides());
+        ConfigurationSection itemGroupsSection = config.getConfigurationSection(fields.getItemGroups());
+        ConfigurationSection itemsSection = config.getConfigurationSection(fields.getItems());
+        ConfigurationSection loreSection = config.getConfigurationSection(fields.getLore());
+        ConfigurationSection messagesSection = config.getConfigurationSection(fields.getMessages());
         if (GeneralUtils.isAllNull(guidesSection, itemGroupsSection, itemsSection, loreSection, messagesSection)) {
-            SlimefunTranslation.log(Level.WARNING, "No translations found in " + name);
+            LogUtils.warning("No translations found in " + name);
             return Optional.empty();
         }
-
-        var fileConditions = TranslationConditions.load(config.getConfigurationSection(fields.getConditions()));
+        TranslationConditions fileConditions = TranslationConditions.load(config.getConfigurationSection(fields.getConditions()));
         SlimefunTranslation.debug("Current file condition: {0}", fileConditions);
-        var translations = new Translations();
-        var guideTranslations = translations.getGuide();
-        var itemGroupTranslations = translations.getItemGroup();
-        var itemTranslations = translations.getItem();
-        var loreTranslations = translations.getLore();
-        var messageTranslations = translations.getMessage();
+        Translations translations = new Translations();
+        Map<String, ItemTranslation> guideTranslations = translations.getGuide();
+        Map<String, String> itemGroupTranslations = translations.getItemGroup();
+        Map<String, ItemTranslation> itemTranslations = translations.getItem();
+        Map<String, String> loreTranslations = translations.getLore();
+        Map<String, String> messageTranslations = translations.getMessage();
 
-        SlimefunTranslation.log(Level.INFO, "Loading translation configuration \"{0}\", language: {1}", name, lang);
+        LogUtils.log(Level.INFO, "Loading translation configuration \"{0}\", language: {1}", (Object) name, lang);
 
-        if (guidesSection != null) {
-            loadGuides(guideTranslations, guidesSection);
-        }
+        if (guidesSection != null) loadGuides(guideTranslations, guidesSection);
 
-        if (itemGroupsSection != null) {
-            for (var group : itemGroupsSection.getKeys(true)) {
-                SlimefunTranslation.debug("Loading item group translation {0}", group);
-                var translation = itemGroupsSection.getString(group);
-                itemGroupTranslations.put(group, translation);
-            }
+        if (itemGroupsSection != null) for (String group : itemGroupsSection.getKeys(true)) {
+            SlimefunTranslation.debug("Loading item group translation {0}", group);
+            String translation = itemGroupsSection.getString(group);
+            itemGroupTranslations.put(group, translation);
         }
 
-        if (itemsSection != null) {
+        if (itemsSection != null)
             loadItems(itemTranslations, itemsSection, fields, fileConditions, itemIdPrefix, itemIdSuffix);
-        }
 
-        if (loreSection != null) {
-            for (var loreId : loreSection.getKeys(true)) {
-                SlimefunTranslation.debug("Loading lore translation {0}", loreId);
-                var lore = loreSection.getString(loreId);
-                loreTranslations.put(loreId, lore);
-            }
+        if (loreSection != null) for (String loreId : loreSection.getKeys(true)) {
+            SlimefunTranslation.debug("Loading lore translation {0}", loreId);
+            String lore = loreSection.getString(loreId);
+            loreTranslations.put(loreId, lore);
         }
-
-        if (messagesSection != null) {
-            for (var messageId : messagesSection.getKeys(true)) {
-                SlimefunTranslation.debug("Loading message translation {0}", messageId);
-                var message = messagesSection.getString(messageId);
-                messageTranslations.put(messageId, message);
-            }
+        if (messagesSection != null) for (String messageId : messagesSection.getKeys(true)) {
+            SlimefunTranslation.debug("Loading message translation {0}", messageId);
+            String message = messagesSection.getString(messageId);
+            messageTranslations.put(messageId, message);
         }
 
         return Optional.of(new TranslationConfiguration(name, lang, translations));
@@ -149,21 +139,21 @@ public class TranslationConfiguration {
         Map<String, ItemTranslation> translations,
         ConfigurationSection guidesSection
     ) {
-        for (var mode : guidesSection.getKeys(false)) {
+        for (String mode : guidesSection.getKeys(false)) {
             SlimefunTranslation.debug("Loading guide translation for mode {0}", mode);
 
-            var guideSection = guidesSection.getConfigurationSection(mode);
+            ConfigurationSection guideSection = guidesSection.getConfigurationSection(mode);
             if (guideSection == null) {
-                SlimefunTranslation.log(Level.SEVERE, "Invalid guide section {0} in configuration file.", mode);
+                LogUtils.log(Level.SEVERE, "Invalid guide section {0} in configuration file.", (Object) mode);
                 continue;
             }
 
-            // name
+            // Name
             String displayName = guideSection.getString("name", "");
-            // lore
-            var lore = guideSection.getStringList("lore");
+            // Lore
+            List<String> lore = guideSection.getStringList("lore");
 
-            var translation = new FixedItemTranslation(displayName, lore);
+            FixedItemTranslation translation = new FixedItemTranslation(displayName, lore);
             translations.put(mode, translation);
         }
     }
@@ -177,70 +167,63 @@ public class TranslationConfiguration {
         String suffix
     ) {
         int count = 0;
-        for (var id : itemsSection.getKeys(false)) {
+        for (String id : itemsSection.getKeys(false)) {
             String itemId = prefix + id + suffix;
             SlimefunTranslation.debug("Loading item translation {0}", itemId);
 
-            var itemSection = itemsSection.getConfigurationSection(id);
+            ConfigurationSection itemSection = itemsSection.getConfigurationSection(id);
             if (itemSection == null) {
-                SlimefunTranslation.log(Level.SEVERE, "Invalid item section {0} in configuration file.", id);
+                LogUtils.log(Level.SEVERE, "Invalid item section {0} in configuration file.", (Object) id);
                 continue;
             }
 
-            var itemConditions = TranslationConditions.load(fileConditions, itemSection.getConfigurationSection(fields.getConditions()));
+            TranslationConditions itemConditions = TranslationConditions.load(fileConditions, itemSection.getConfigurationSection(fields.getConditions()));
             SlimefunTranslation.debug("Current item condition: {0}", itemConditions);
             boolean forceLoad = itemConditions.isForceLoad();
 
-            // sfItem
+            // SFItem
             SlimefunItem sfItem = SlimefunItem.getById(itemId);
             if (sfItem == null && !forceLoad) {
-                SlimefunTranslation.log(Level.WARNING, "Item {0} is not registered, ignoring.", itemId);
+                LogUtils.log(Level.WARNING, "Item {0} is not registered, ignoring.", (Object) itemId);
                 continue;
             }
 
-            // name
+            // Name
             String displayName = itemSection.getString("name", "");
 
-            // lore
-            var lore = itemSection.getStringList("lore");
+            // Lore
+            List<String> lore = itemSection.getStringList("lore");
 
-            // lore overrides
+            // Lore overrides
             Map<Integer, String> overrides = new HashMap<>();
-            if (itemSection.contains("lore-overrides")) {
-                try {
-                    Map<String, String> replacements = ConfigUtils.getMap(itemSection.getConfigurationSection("lore-overrides"));
-                    for (var entry : replacements.entrySet()) {
-                        overrides.put(Integer.parseInt(entry.getKey()), entry.getValue());
-                    }
-                } catch (NumberFormatException | NullPointerException ex) {
-                    SlimefunTranslation.log(Level.SEVERE, "Invalid lore overrides of item {0}.", itemId);
-                    continue;
-                }
+            if (itemSection.contains("lore-overrides")) try {
+                Map<String, String> replacements = ConfigUtils.getMap(itemSection.getConfigurationSection("lore-overrides"));
+                for (Map.Entry<String, String> entry : replacements.entrySet())
+                    overrides.put(Integer.parseInt(entry.getKey()), entry.getValue());
+            } catch (NumberFormatException | NullPointerException ex) {
+                LogUtils.log(Level.SEVERE, "Invalid lore overrides of item {0}.", itemId);
+                continue;
             }
 
-            // lore replacements
+            // Lore replacements
             Map<Integer, Pair<String, String>> replacements = new HashMap<>();
-            if (itemSection.contains("lore-replacements")) {
-                try {
-                    for (String idx : itemSection.getConfigurationSection("lore-replacements").getKeys(false)) {
-                        int i = Integer.parseInt(idx);
-                        var section = itemSection.getConfigurationSection("lore-replacements." + idx);
-                        replacements.put(i, new Pair<>(section.getString("original"), section.getString("replaced")));
-                    }
-                } catch (NumberFormatException | NullPointerException ex) {
-                    SlimefunTranslation.log(Level.SEVERE, "Invalid lore replacements of item {0}", itemId);
-                    continue;
+            if (itemSection.contains("lore-replacements")) try {
+                for (String idx : itemSection.getConfigurationSection("lore-replacements").getKeys(false)) {
+                    int i = Integer.parseInt(idx);
+                    ConfigurationSection section = itemSection.getConfigurationSection("lore-replacements." + idx);
+                    replacements.put(i, new Pair<>(section.getString("original"), section.getString("replaced")));
                 }
+            } catch (NumberFormatException | NullPointerException ex) {
+                LogUtils.log(Level.SEVERE, "Invalid lore replacements of item {0}", (Object) itemId);
+                continue;
             }
 
-            // check partial override
-            if (!itemConditions.isPartialOverride() && !forceLoad) {
-                itemConditions.setPartialOverride(
-                    SlimefunTranslation.getConfigService().getPartialOverrideMaterials().contains(sfItem.getItem().getType())
-                );
-            }
+            // Check partial override
+            if (!itemConditions.isPartialOverride() && !forceLoad) itemConditions.setPartialOverride(
+                SlimefunTranslation.getConfigService().getPartialOverrideMaterials().contains(sfItem.getItem().getType())
+            );
 
-            var translation = new FixedItemTranslation(displayName, lore, overrides, replacements, itemConditions);
+            FixedItemTranslation translation = new FixedItemTranslation(displayName, lore, overrides, replacements, itemConditions);
             translations.put(itemId, translation);
             count++;
         }
@@ -248,23 +231,22 @@ public class TranslationConfiguration {
     }
 
     public void register(@Nonnull SlimefunAddon addon) {
-        if (state != State.UNREGISTERED) {
+        if (state != State.UNREGISTERED)
             throw new IllegalStateException("TranslationConfiguration is already registered");
-        }
 
-        var registry = SlimefunTranslation.getRegistry();
+        Registry registry = SlimefunTranslation.getRegistry();
 
-        // guides
+        // Guides
         registerTranslations(registry.getGuideTranslations(), lang, translations.getGuide());
-        // itemGroups
+        // ItemGroups
         registerTranslations(registry.getItemGroupTranslations(), lang, translations.getItemGroup());
-        // items
+        // Items
         registerTranslations(registry.getItemTranslations(), lang, translations.getItem());
-        // lore
+        // Lore
         registerTranslations(registry.getLoreTranslations(), lang, translations.getLore());
-        // messages
-        var allMessageTranslations = registry.getMessageTranslations();
-        var pluginMessageTranslations = allMessageTranslations.computeIfAbsent(addon.getName(), k -> new HashMap<>());
+        // Messages
+        Map<String, Map<String, Map<String, String>>> allMessageTranslations = registry.getMessageTranslations();
+        Map<String, Map<String, String>> pluginMessageTranslations = allMessageTranslations.computeIfAbsent(addon.getName(), k -> new HashMap<>());
         registerTranslations(pluginMessageTranslations, lang, translations.getMessage());
 
         setAddon(addon);
@@ -272,7 +254,7 @@ public class TranslationConfiguration {
     }
 
     private <V> void registerTranslations(Map<String, Map<String, V>> allTranslations, String lang, Map<String, V> translations) {
-        var currentTranslations = allTranslations.computeIfAbsent(lang, k -> new HashMap<>());
+        Map<String, V> currentTranslations = allTranslations.computeIfAbsent(lang, k -> new HashMap<>());
         currentTranslations.putAll(translations);
     }
 
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfigurationDefaults.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfigurationDefaults.java
similarity index 87%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfigurationDefaults.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfigurationDefaults.java
index 6a99038..6d24512 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfigurationDefaults.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfigurationDefaults.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.api.config;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfigurationFields.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfigurationFields.java
similarity index 93%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfigurationFields.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfigurationFields.java
index 75b0650..f6ef365 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/config/TranslationConfigurationFields.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/TranslationConfigurationFields.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.api.config;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/config/Translations.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/Translations.java
similarity index 75%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/config/Translations.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/Translations.java
index e94a270..790b51d 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/config/Translations.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/Translations.java
@@ -1,10 +1,9 @@
-package net.guizhanss.slimefuntranslation.api.config;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import net.guizhanss.slimefuntranslation.api.translation.ItemTranslation;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.ItemTranslation;
 import lombok.Getter;
 
 /**
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/config/package-info.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/package-info.java
similarity index 55%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/config/package-info.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/package-info.java
index 60d29bb..b92a03e 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/config/package-info.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/config/package-info.java
@@ -1,4 +1,4 @@
 /**
  * This package contains configuration related classes provided by SlimefunTranslation.
  */
-package net.guizhanss.slimefuntranslation.api.config;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/events/TranslationsLoadEvent.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/events/TranslationsLoadEvent.java
similarity index 89%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/events/TranslationsLoadEvent.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/events/TranslationsLoadEvent.java
index 6ff5092..ff29688 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/events/TranslationsLoadEvent.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/events/TranslationsLoadEvent.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.api.events;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.events;
 
 import javax.annotation.Nonnull;
 
@@ -13,7 +13,6 @@ import org.bukkit.event.HandlerList;
  * @author ybw0014
  */
 public final class TranslationsLoadEvent extends Event {
-
     private static final HandlerList handlers = new HandlerList();
 
     @Nonnull
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/exceptions/TagMisconfigurationException.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/exceptions/TagMisconfigurationException.java
similarity index 89%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/exceptions/TagMisconfigurationException.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/exceptions/TagMisconfigurationException.java
index b219f41..88a03f8 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/exceptions/TagMisconfigurationException.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/exceptions/TagMisconfigurationException.java
@@ -1,12 +1,10 @@
-package net.guizhanss.slimefuntranslation.api.exceptions;
-
-import java.io.Serial;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.exceptions;
 
 import javax.annotation.ParametersAreNonnullByDefault;
 
 import org.bukkit.NamespacedKey;
 
-import net.guizhanss.slimefuntranslation.utils.tags.SlimefunTranslationTag;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.tags.SlimefunTranslationTag;
 
 /**
  * A {@link TagMisconfigurationException} is thrown whenever a {@link }
@@ -15,8 +13,6 @@ import net.guizhanss.slimefuntranslation.utils.tags.SlimefunTranslationTag;
  * @author ybw0014
  */
 public class TagMisconfigurationException extends Exception {
-
-    @Serial
     private static final long serialVersionUID = 1145141919810L;
 
     /**
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/exceptions/package-info.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/exceptions/package-info.java
new file mode 100644
index 0000000..4686c1b
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/exceptions/package-info.java
@@ -0,0 +1,4 @@
+/**
+ * This package contains exceptions provided by SlimefunTranslation.
+ */
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.exceptions;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/package-info.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/package-info.java
similarity index 55%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/package-info.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/package-info.java
index 7b30c7b..be2048f 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/package-info.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/package-info.java
@@ -1,4 +1,4 @@
 /**
  * This package contains all the API classes provided by SlimefunTranslation.
  */
-package net.guizhanss.slimefuntranslation.api;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/ItemTranslation.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/ItemTranslation.java
similarity index 83%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/translation/ItemTranslation.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/ItemTranslation.java
index 6399c25..833d236 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/ItemTranslation.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/ItemTranslation.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.api.translation;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation;
 
 import java.util.List;
 
@@ -10,9 +10,9 @@ import org.bukkit.inventory.meta.ItemMeta;
 
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.implementation.translations.FixedItemTranslation;
-import net.guizhanss.slimefuntranslation.implementation.translations.ProgrammedItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.translations.FixedItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.translations.ProgrammedItemTranslation;
 
 /**
  * This interface represents an item translation.
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/TranslationStatus.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/TranslationStatus.java
similarity index 66%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/translation/TranslationStatus.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/TranslationStatus.java
index 936c112..a73b0bb 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/TranslationStatus.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/TranslationStatus.java
@@ -1,6 +1,6 @@
-package net.guizhanss.slimefuntranslation.api.translation;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation;
 
-import net.guizhanss.slimefuntranslation.implementation.translations.FixedItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.translations.FixedItemTranslation;
 
 /**
  * Represents the status of the translation for a specific item.
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/lore/LoreHandler.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/lore/LoreHandler.java
similarity index 57%
rename from src/main/java/net/guizhanss/slimefuntranslation/api/translation/lore/LoreHandler.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/lore/LoreHandler.java
index f29031b..f22bee9 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/lore/LoreHandler.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/lore/LoreHandler.java
@@ -1,9 +1,9 @@
-package net.guizhanss.slimefuntranslation.api.translation.lore;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.lore;
 
 import javax.annotation.Nullable;
 import javax.annotation.ParametersAreNonnullByDefault;
 
-import net.guizhanss.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
 
 public interface LoreHandler {
     @Nullable
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/package-info.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/package-info.java
new file mode 100644
index 0000000..f2a25c6
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/api/translation/package-info.java
@@ -0,0 +1,4 @@
+/**
+ * This package contains translation related classes and interfaces.
+ */
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/Registry.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/Registry.java
similarity index 75%
rename from src/main/java/net/guizhanss/slimefuntranslation/core/Registry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/Registry.java
index 4a5b3c8..4be1559 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/Registry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/Registry.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.core;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -6,10 +6,9 @@ import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
 
-import net.guizhanss.slimefuntranslation.api.translation.ItemTranslation;
-import net.guizhanss.slimefuntranslation.api.translation.lore.LoreHandler;
-import net.guizhanss.slimefuntranslation.core.users.User;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.ItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.lore.LoreHandler;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
 import lombok.Getter;
 
 @Getter
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/AbstractSubCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/AbstractSubCommand.java
new file mode 100644
index 0000000..633cee4
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/AbstractSubCommand.java
@@ -0,0 +1,13 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.factories.MessageFactory;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+
+/**
+ * A SubCommand that contains some common utility methods.
+ *
+ * @author ybw0014
+ */
+public class AbstractSubCommand {
+    protected static final MessageFactory MESSAGE_FACTORY = MessageFactory.get(AbstractAddon.getInstance());
+}
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/IdCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/IdCommand.java
new file mode 100644
index 0000000..ff2e3e0
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/IdCommand.java
@@ -0,0 +1,56 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands;
+
+import org.bukkit.inventory.ItemStack;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.ClickEvent;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.chat.hover.content.Text;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.AbstractSubCommand;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.SlimefunItemUtils;
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
+import org.incendo.cloud.annotations.Command;
+import org.incendo.cloud.annotations.Permission;
+
+/**
+ * The subcommand that displays the ID of the Slimefun item in the player's hand.
+ * <p>
+ * Code from StarWishsama's Slimefun4 fork:
+ * <a href="https://github.com/StarWishsama/Slimefun4/blob/master/src/main/java/io/github/thebusybiscuit/slimefun4/core/commands/subcommands/ItemIdCommand.java">Link</a>
+ */
+@SuppressWarnings("unused")
+public class IdCommand extends AbstractSubCommand {
+    @Command("sftranslation|slimefuntranslation|sft|sftr|sftransl id")
+    @Permission("sftranslation.command.id")
+    public void cmdId(SpecialCommandSender sender) {
+        if (!sender.isPlayer()) {
+            MESSAGE_FACTORY.sendMessage(sender.getSender(), "player-only");
+            return;
+        }
+
+        ItemStack item = sender.getPlayer().getInventory().getItemInMainHand();
+        if (item.getType().isAir()) {
+            MESSAGE_FACTORY.sendMessage(sender.getSender(), "commands.id.not-sf-item");
+            return;
+        }
+
+        String sfId = SlimefunItemUtils.getId(item);
+        if (sfId == null) {
+            MESSAGE_FACTORY.sendMessage(sender.getSender(), "commands.id.not-sf-item");
+            return;
+        }
+
+        TextComponent msg = new TextComponent(MESSAGE_FACTORY.getMessage(sender.getSender(), "commands.id.result"));
+        msg.setColor(ChatColor.YELLOW);
+        String clickToCopy = MESSAGE_FACTORY.getMessage(sender.getSender(), "commands.id.click-to-copy");
+        TextComponent idMsg = new TextComponent(sfId);
+        idMsg.setUnderlined(true);
+        idMsg.setItalic(true);
+        idMsg.setColor(ChatColor.GRAY);
+        idMsg.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text(clickToCopy)));
+        idMsg.setClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, sfId));
+        sender.spigot().sendMessage(msg, idMsg);
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/SearchCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/SearchCommand.java
similarity index 72%
rename from src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/SearchCommand.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/SearchCommand.java
index e35fcac..22e68e5 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/SearchCommand.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/SearchCommand.java
@@ -1,14 +1,12 @@
-package net.guizhanss.slimefuntranslation.core.commands.subcommands;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands;
 
 import java.util.Arrays;
 import java.util.Locale;
 import java.util.logging.Level;
 
-import javax.annotation.Nonnull;
 import javax.annotation.ParametersAreNonnullByDefault;
 
 import org.bukkit.ChatColor;
-import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemFlag;
 import org.bukkit.inventory.ItemStack;
@@ -25,11 +23,15 @@ import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 
-import net.guizhanss.guizhanlib.minecraft.commands.AbstractCommand;
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.commands.AbstractSubCommand;
-import net.guizhanss.slimefuntranslation.utils.constant.Keys;
-import net.guizhanss.slimefuntranslation.utils.constant.Permissions;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.AbstractSubCommand;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant.Keys;
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import org.incendo.cloud.annotation.specifier.Greedy;
+import org.incendo.cloud.annotations.Argument;
+import org.incendo.cloud.annotations.Command;
+import org.incendo.cloud.annotations.Permission;
 
 /**
  * The subcommand that searches for Slimefun items with player's language.
@@ -37,32 +39,23 @@ import net.guizhanss.slimefuntranslation.utils.constant.Permissions;
  * Guide code from:
  * <a href="https://github.com/Slimefun/Slimefun4/blob/cd3672c3f29dcb9d02d02cd1c80758c3badb6931/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/SurvivalSlimefunGuide.java#L334">Link</a>
  */
+@SuppressWarnings("unused")
 public class SearchCommand extends AbstractSubCommand {
-    public SearchCommand(@Nonnull AbstractCommand parent) {
-        super(parent, "search", (cmd, sender) -> getDescription("search", sender), "<query> [.] [.] [.] [.] [.]");
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    public void onExecute(CommandSender sender, String[] args) {
-        if (!(sender instanceof Player p)) {
-            MESSAGE_FACTORY.sendMessage(sender, "player-only");
-            return;
-        }
-        if (!Permissions.COMMAND_SEARCH.hasPermission(p)) {
-            MESSAGE_FACTORY.sendMessage(sender, "no-permission");
+    @Command("sftranslation|slimefuntranslation|sft|sftr|sftransl search <query>")
+    @Permission("sftranslation.command.search")
+    public void cmdSearch(final SpecialCommandSender sender,
+                          final @Argument("query") @Greedy String query) {
+        if (!sender.isPlayer()) {
+            MESSAGE_FACTORY.sendMessage(sender.getSender(), "player-only");
             return;
         }
 
-        final String query = String.join(" ", args);
-        PlayerProfile.get(p, profile -> openSearch(profile, query));
+        PlayerProfile.get(sender.getPlayer(), profile -> openSearch(profile, query));
     }
 
     private void openSearch(PlayerProfile profile, String query) {
         Player p = profile.getPlayer();
-        if (p == null) {
-            return;
-        }
+        if (p == null) return;
 
         final String searchTerm = ChatColor.stripColor(query.toLowerCase(Locale.ROOT));
         ChestMenu menu = new ChestMenu(Slimefun.getLocalization().getMessage(p, "guide.search.inventory").replace("%item%", ChatUtils.crop(ChatColor.WHITE, query)));
@@ -73,9 +66,7 @@ public class SearchCommand extends AbstractSubCommand {
         int index = 0;
         // Find items and add them
         for (SlimefunItem slimefunItem : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-            if (index == 44) {
-                break;
-            }
+            if (index == 44) break;
 
             if (!slimefunItem.isHidden() &&
                 slimefunItem.getItemGroup().isAccessible(p) &&
@@ -93,7 +84,7 @@ public class SearchCommand extends AbstractSubCommand {
                         SlimefunGuide.displayItem(profile, slimefunItem, true);
                     } catch (Exception | LinkageError x) {
                         MESSAGE_FACTORY.sendMessage(pl, "sftranslation.commands.search.error");
-                        SlimefunTranslation.log(Level.WARNING, x, "Failed to open guide for item" + slimefunItem.getId());
+                        LogUtils.log(Level.WARNING, "Failed to open guide for item" + slimefunItem.getId(), x);
                     }
 
                     return false;
@@ -103,9 +94,8 @@ public class SearchCommand extends AbstractSubCommand {
             }
         }
 
-        for (int i = 45; i < 54; i++) {
+        for (int i = 45; i < 54; i++)
             menu.addItem(i, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         menu.open(p);
     }
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java
new file mode 100644
index 0000000..cb767d8
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java
@@ -0,0 +1,19 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.translation;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.AbstractSubCommand;
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
+import org.incendo.cloud.annotations.Argument;
+import org.incendo.cloud.annotations.Command;
+
+@SuppressWarnings("unused")
+public class ExtractCommand extends AbstractSubCommand {
+    @Command("sftranslation|slimefuntranslation|sft|sftr|sftransl translation extract <replace>")
+    @ParametersAreNonnullByDefault
+    public void cmdExtract(final SpecialCommandSender sender, final @Argument("replace") boolean replace) {
+        SlimefunTranslation.getTranslationService().extractTranslations(replace);
+        MESSAGE_FACTORY.sendMessage(sender.getSender(), "commands.translation.extract.success", replace);
+    }
+}
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java
new file mode 100644
index 0000000..f67101c
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java
@@ -0,0 +1,121 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.translation;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import org.bukkit.Bukkit;
+import org.bukkit.NamespacedKey;
+import org.bukkit.plugin.Plugin;
+
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.groups.FlexItemGroup;
+import io.github.thebusybiscuit.slimefun4.core.services.localization.Language;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.AbstractSubCommand;
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
+import org.incendo.cloud.annotations.Argument;
+import org.incendo.cloud.annotations.Command;
+import org.incendo.cloud.annotations.Permission;
+import org.incendo.cloud.annotations.suggestion.Suggestions;
+import org.incendo.cloud.context.CommandContext;
+
+@SuppressWarnings("unused")
+public class GenerateCommand extends AbstractSubCommand {
+    @Command("sftranslation|slimefuntranslation|sft|sftr|sftransl translation generate <addon> <language> [itemgroup]")
+    @Permission("sftranslation.command.translation.generate")
+    public void cmdGenerate(SpecialCommandSender sender,
+                            @Argument(value = "addon", suggestions = "getAddons") String addonName,
+                            @Argument(value = "language", suggestions = "getLanguages") String language,
+                            @Argument(value = "itemgroup", suggestions = "getItemGroups") String itemgroup) {
+        if (!Bukkit.getPluginManager().isPluginEnabled(addonName)) {
+            MESSAGE_FACTORY.sendMessage(sender.getSender(), "commands.translation.generate.invalid-addon", addonName);
+            return;
+        }
+
+        Set<String> exportIds = new HashSet<>();
+
+        if (!itemgroup.isEmpty()) {
+            // Export every item in the item group
+            ItemGroup itemGroup = findItemGroup(addonName.toLowerCase(Locale.ROOT), itemgroup);
+            if (itemGroup == null) {
+                MESSAGE_FACTORY.sendMessage(sender.getSender(), "commands.translation.generate.invalid-itemgroup", itemgroup);
+                return;
+            }
+            exportIds.addAll(
+                Slimefun.getRegistry().getAllSlimefunItems().stream()
+                    .filter(item -> item.getItemGroup().equals(itemGroup))
+                    .map(SlimefunItem::getId)
+                    .collect(Collectors.toList())
+            );
+        } else exportIds.addAll( // Export every item in the addon
+            Slimefun.getRegistry().getAllSlimefunItems().stream()
+                .filter(item -> item.getItemGroup().getKey().getNamespace().equals(addonName.toLowerCase(Locale.ROOT)))
+                .map(SlimefunItem::getId)
+                .collect(Collectors.toList())
+        );
+
+        final String fileName = SlimefunTranslation.getTranslationService().exportItemTranslations(language, addonName, exportIds);
+        MESSAGE_FACTORY.sendMessage(sender.getSender(), "commands.translation.generate.success", fileName, language);
+    }
+
+    @Nonnull
+    @Suggestions("getAddons")
+    public List<String> getAddons(CommandContext<SpecialCommandSender> sender, @Nonnull String filter) {
+        Collection<Plugin> addons = Slimefun.getInstalledAddons();
+
+        List<String> result = addons.stream()
+            .map(Plugin::getName)
+            .filter(name -> name.toLowerCase(Locale.ROOT).startsWith(filter.toLowerCase(Locale.ROOT)))
+            .collect(Collectors.toList());
+        result.add(0, "Slimefun");
+        return result;
+    }
+
+    @Nonnull
+    @Suggestions("getLanguages")
+    public List<String> getLanguages(CommandContext<SpecialCommandSender> sender, @Nonnull String filter) {
+        Set<String> result = new HashSet<>();
+
+        result.addAll(Slimefun.getLocalization().getLanguages().stream().map(Language::getId).collect(Collectors.toList()));
+        result.addAll(SlimefunTranslation.getRegistry().getLanguages());
+
+        return result.stream()
+            .filter(lang -> lang.toLowerCase(Locale.ROOT).startsWith(filter.toLowerCase(Locale.ROOT)))
+            .collect(Collectors.toList());
+    }
+
+    @Nonnull
+    @Suggestions("getItemGroups")
+    public List<String> getItemGroups(CommandContext<SpecialCommandSender> sender, String filter) {
+        Collection<ItemGroup> itemGroups = Slimefun.getRegistry().getAllItemGroups();
+
+        return itemGroups.stream()
+            .filter(itemGroup -> !(itemGroup instanceof FlexItemGroup))
+            .map(itemGroup -> itemGroup.getKey().toString())
+            .filter(key -> key.startsWith(sender.get("addon").toString().toLowerCase(Locale.ROOT) + ":"))
+            .filter(key -> key.toLowerCase(Locale.ROOT).startsWith(filter.toLowerCase(Locale.ROOT)))
+            .map(key -> key.split(":")[1])
+            .collect(Collectors.toList());
+    }
+
+    @Nullable
+    @ParametersAreNonnullByDefault
+    private ItemGroup findItemGroup(String namespace, String key) {
+        for (ItemGroup itemGroup : Slimefun.getRegistry().getAllItemGroups()) {
+            NamespacedKey itemGroupKey = itemGroup.getKey();
+            if (itemGroupKey.getNamespace().equals(namespace) && itemGroupKey.getKey().equals(key)) return itemGroup;
+        }
+        return null;
+    }
+}
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java
new file mode 100644
index 0000000..1ab083a
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java
@@ -0,0 +1,20 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.translation;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.AbstractSubCommand;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services.TranslationService;
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
+import org.incendo.cloud.annotations.Command;
+import org.incendo.cloud.annotations.Permission;
+
+@SuppressWarnings("unused")
+public class ReloadCommand extends AbstractSubCommand {
+    @Command("sftranslation|slimefuntranslation|sft|sftr|sftransl translation reload")
+    @Permission("sftranslation.command.translation.reload")
+    public void cmdReload(SpecialCommandSender sender) {
+        TranslationService translationService = SlimefunTranslation.getTranslationService();
+        translationService.clearTranslations();
+        translationService.callLoadEvent();
+        MESSAGE_FACTORY.sendMessage(sender.getSender(), "commands.translation.reload.success");
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/factories/MessageFactory.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/factories/MessageFactory.java
similarity index 79%
rename from src/main/java/net/guizhanss/slimefuntranslation/core/factories/MessageFactory.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/factories/MessageFactory.java
index 1502f0e..1f2f4f2 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/factories/MessageFactory.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/factories/MessageFactory.java
@@ -1,8 +1,9 @@
-package net.guizhanss.slimefuntranslation.core.factories;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.factories;
 
 import java.text.MessageFormat;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Optional;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -14,13 +15,14 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 
-import net.guizhanss.guizhanlib.minecraft.utils.ChatUtil;
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.utils.TranslationUtils;
 import net.md_5.bungee.api.ChatMessageType;
 import net.md_5.bungee.api.chat.TextComponent;
 
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.TranslationUtils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.minecraft.utils.ChatUtil;
+
 /**
  * A factory to get the translated messages for a plugin.
  */
@@ -73,7 +75,8 @@ public class MessageFactory {
     public String getMessage(CommandSender sender, String key, Object... args) {
         Preconditions.checkArgument(sender != null, "sender cannot be null");
         User user = null;
-        if (sender instanceof Player p) {
+        if (sender instanceof Player) {
+            Player p = (Player) sender;
             user = SlimefunTranslation.getUserService().getUser(p);
         }
         return getMessage(user, key, args);
@@ -90,20 +93,14 @@ public class MessageFactory {
     @Nonnull
     public String getMessage(@Nullable User user, @Nonnull String key, @Nonnull Object... args) {
         Preconditions.checkArgument(key != null, "key cannot be null");
-        var messageTranslations = SlimefunTranslation.getRegistry().getMessageTranslations();
-        if (!messageTranslations.containsKey(plugin.getName())) {
-            return key;
-        }
-        var transl = TranslationUtils.findTranslation(
+        Map<String, Map<String, Map<String, String>>> messageTranslations = SlimefunTranslation.getRegistry().getMessageTranslations();
+        if (!messageTranslations.containsKey(plugin.getName())) return key;
+        Optional<String> transl = TranslationUtils.findTranslation(
             messageTranslations.get(plugin.getName()), user, key);
-        if (transl.isEmpty()) {
-            return key;
-        }
+        if (!transl.isPresent()) return key;
 
         String message = MessageFormat.format(transl.get(), args);
-        if (user != null) {
-            message = SlimefunTranslation.getIntegrationService().applyPlaceholders(user, message);
-        }
+        if (user != null) message = SlimefunTranslation.getIntegrationService().applyPlaceholders(user, message);
         return ChatUtil.color(message);
     }
 }
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/CommandService.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/CommandService.java
new file mode 100644
index 0000000..d86887e
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/CommandService.java
@@ -0,0 +1,19 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.IdCommand;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.SearchCommand;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.translation.ExtractCommand;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.translation.GenerateCommand;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.commands.subcommands.translation.ReloadCommand;
+import id.universenetwork.sfa_loader.managers.CommandManager;
+
+public final class CommandService {
+    public CommandService() {
+        CommandManager.register(
+            new IdCommand(),
+            new SearchCommand(),
+            new ExtractCommand(),
+            new GenerateCommand(),
+            new ReloadCommand());
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/services/ConfigurationService.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/ConfigurationService.java
similarity index 78%
rename from src/main/java/net/guizhanss/slimefuntranslation/core/services/ConfigurationService.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/ConfigurationService.java
index a712f93..cf051a0 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/services/ConfigurationService.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/ConfigurationService.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.core.services;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services;
 
 import java.util.HashSet;
 import java.util.Map;
@@ -10,10 +10,9 @@ import com.google.common.base.Preconditions;
 
 import org.bukkit.Material;
 
-import net.guizhanss.guizhanlib.slimefun.addon.AddonConfig;
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.utils.ConfigUtils;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.ConfigUtils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AddonConfig;
 import lombok.AccessLevel;
 import lombok.Getter;
 
@@ -29,8 +28,8 @@ public final class ConfigurationService {
     private Set<Material> partialOverrideMaterials;
     private Set<String> disabledItems;
 
-    public ConfigurationService(SlimefunTranslation plugin) {
-        config = new AddonConfig(plugin, "config.yml");
+    public ConfigurationService(SlimefunTranslation main) {
+        config = main.getConfig();
         reload();
     }
 
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/IntegrationService.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/IntegrationService.java
new file mode 100644
index 0000000..8898556
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/IntegrationService.java
@@ -0,0 +1,59 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import org.bukkit.Bukkit;
+
+import me.clip.placeholderapi.PlaceholderAPI;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.integrations.placeholders.SlimefunLoreExpansion;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import lombok.Getter;
+
+@Getter
+public final class IntegrationService {
+    private final boolean protocolLibEnabled;
+    private final boolean placeholderAPIEnabled;
+
+    public IntegrationService() {
+        protocolLibEnabled = isEnabled("ProtocolLib");
+        placeholderAPIEnabled = isEnabled("PlaceholderAPI");
+
+        if (protocolLibEnabled) {
+            LogUtils.info("ProtocolLib found, enabling packet listener...");
+            new PacketListenerService();
+        } else LogUtils.severe("ProtocolLib not found, this plugin will not be fully functional...");
+
+        if (placeholderAPIEnabled) {
+            LogUtils.info("PlaceholderAPI found, enabling placeholders...");
+            new SlimefunLoreExpansion().register();
+        } else LogUtils.severe("PlaceholderAPI not found, this plugin will not be fully functional...");
+    }
+
+    private boolean isEnabled(@Nonnull String pluginName) {
+        return Bukkit.getPluginManager().isPluginEnabled(pluginName);
+    }
+
+    @Nonnull
+    @ParametersAreNonnullByDefault
+    public String applyPlaceholders(User user, String str) {
+        if (!placeholderAPIEnabled) return str;
+
+        return PlaceholderAPI.setPlaceholders(user.getPlayer(), str);
+    }
+
+    @Nonnull
+    @ParametersAreNonnullByDefault
+    public List<String> applyPlaceholders(User user, List<String> list) {
+        if (!placeholderAPIEnabled) return list;
+
+        List<String> result = new ArrayList<>();
+        for (String str : list) result.add(applyPlaceholders(user, str));
+        return result;
+    }
+}
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/ListenerService.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/ListenerService.java
new file mode 100644
index 0000000..52534d1
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/ListenerService.java
@@ -0,0 +1,21 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners.PlayerJoinListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners.PlayerQuitListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners.SlimefunBlockRightClickListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners.SlimefunItemLoadListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners.SlimefunLanguageChangeListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners.TranslationsLoadListener;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+
+public final class ListenerService {
+    public ListenerService() {
+        Event.registerListeners(
+            new PlayerJoinListener(),
+            new PlayerQuitListener(),
+            new SlimefunBlockRightClickListener(),
+            new SlimefunItemLoadListener(),
+            new SlimefunLanguageChangeListener(),
+            new TranslationsLoadListener());
+    }
+}
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/PacketListenerService.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/PacketListenerService.java
new file mode 100644
index 0000000..0adcaab
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/PacketListenerService.java
@@ -0,0 +1,27 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.AListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.client.items.SetCreativeSlotListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.client.items.WindowClickListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.EntityMetadataListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.OpenWindowListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.items.SetSlotListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.items.WindowItemListener;
+
+public final class PacketListenerService {
+    public PacketListenerService() {
+        List<AListener> packetListeners = new ArrayList<>();
+
+        packetListeners.add(new SetSlotListener());
+        packetListeners.add(new WindowItemListener());
+        packetListeners.add(new SetCreativeSlotListener());
+        packetListeners.add(new WindowClickListener());
+        packetListeners.add(new EntityMetadataListener());
+        packetListeners.add(new OpenWindowListener());
+
+        for (AListener listener : packetListeners) listener.register();
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/services/TranslationService.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/TranslationService.java
similarity index 54%
rename from src/main/java/net/guizhanss/slimefuntranslation/core/services/TranslationService.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/TranslationService.java
index d90324f..4c2e9b2 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/services/TranslationService.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/TranslationService.java
@@ -1,10 +1,13 @@
-package net.guizhanss.slimefuntranslation.core.services;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services;
 
 import java.io.File;
 import java.io.IOException;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 import java.util.logging.Level;
 
@@ -20,22 +23,27 @@ import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.plugin.java.JavaPlugin;
 
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.core.guide.SlimefunGuideMode;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.config.TranslationConfiguration;
-import net.guizhanss.slimefuntranslation.api.events.TranslationsLoadEvent;
-import net.guizhanss.slimefuntranslation.api.translation.TranslationStatus;
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.implementation.translations.ProgrammedItemTranslation;
-import net.guizhanss.slimefuntranslation.utils.ColorUtils;
-import net.guizhanss.slimefuntranslation.utils.FileUtils;
-import net.guizhanss.slimefuntranslation.utils.SlimefunItemUtils;
-import net.guizhanss.slimefuntranslation.utils.TranslationUtils;
-import net.guizhanss.slimefuntranslation.utils.constant.Keys;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config.TranslationConfiguration;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.events.TranslationsLoadEvent;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.ItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.TranslationStatus;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.Registry;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.translations.ProgrammedItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.ColorUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.FileUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.SlimefunItemUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.TranslationUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant.Keys;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 
 /**
  * This class holds all translations and can be used to access these translations
@@ -45,16 +53,15 @@ import net.guizhanss.slimefuntranslation.utils.constant.Keys;
  */
 @SuppressWarnings("ConstantConditions")
 public final class TranslationService {
-    private static final String FOLDER_NAME = "translations";
-    private final SlimefunTranslation plugin;
+    private final SlimefunTranslation main;
+    private final String FOLDER_NAME;
     private final File translationsFolder;
-    private final File jarFile;
 
     @ParametersAreNonnullByDefault
-    public TranslationService(SlimefunTranslation plugin, File jarFile) {
-        translationsFolder = new File(plugin.getDataFolder(), FOLDER_NAME);
-        this.plugin = plugin;
-        this.jarFile = jarFile;
+    public TranslationService(SlimefunTranslation main) {
+        translationsFolder = new File(main.getAddonFolder(), "translations");
+        this.main = main;
+        FOLDER_NAME = main.getAddonFolderString() + "/translations";
 
         extractTranslations(false);
     }
@@ -75,7 +82,7 @@ public final class TranslationService {
     }
 
     public void clearTranslations() {
-        var registry = SlimefunTranslation.getRegistry();
+        Registry registry = SlimefunTranslation.getRegistry();
         registry.getLanguages().clear();
         registry.getItemTranslations().clear();
         registry.getLoreTranslations().clear();
@@ -88,40 +95,33 @@ public final class TranslationService {
     }
 
     private void loadFixedTranslations() {
-        // standard translations
-        for (String lang : SlimefunTranslation.getRegistry().getLanguages()) {
+        // Standard translations
+        for (String lang : SlimefunTranslation.getRegistry().getLanguages()) loadFixedTranslations(lang);
+        // Language mappings
+        for (String lang : SlimefunTranslation.getConfigService().getLanguageMappings().keySet())
             loadFixedTranslations(lang);
-        }
-        // language mappings
-        for (String lang : SlimefunTranslation.getConfigService().getLanguageMappings().keySet()) {
-            loadFixedTranslations(lang);
-        }
     }
 
     private void loadFixedTranslations(String language) {
         File languageFolder = new File(translationsFolder, language);
         List<String> translationFiles = FileUtils.listYamlFiles(languageFolder);
         for (String translationFile : translationFiles) {
-            var config = YamlConfiguration.loadConfiguration(new File(languageFolder, translationFile));
-            var translationConfig = TranslationConfiguration.fromFileConfiguration(language, config);
-            if (translationConfig.isEmpty()) {
-                continue;
-            }
-            translationConfig.get().register(SlimefunTranslation.getInstance());
+            YamlConfiguration config = YamlConfiguration.loadConfiguration(new File(languageFolder, translationFile));
+            Optional<TranslationConfiguration> translationConfig = TranslationConfiguration.fromFileConfiguration(language, config);
+            if (!translationConfig.isPresent()) continue;
+            translationConfig.get().register(SlimefunAddonInstance.getSFAInstance());
         }
     }
 
     private void loadProgrammedTranslations() {
-        var languages = SlimefunTranslation.getRegistry().getLanguages();
+        Set<String> languages = SlimefunTranslation.getRegistry().getLanguages();
         for (SlimefunItem sfItem : Slimefun.getRegistry().getAllSlimefunItems()) {
-            if (!TranslationUtils.isTranslatableItem(sfItem)) {
-                continue;
-            }
+            if (!TranslationUtils.isTranslatableItem(sfItem)) continue;
             for (String lang : languages) {
-                var translation = new ProgrammedItemTranslation(lang, sfItem);
-                var allItemTranslations = SlimefunTranslation.getRegistry().getItemTranslations();
+                ProgrammedItemTranslation translation = new ProgrammedItemTranslation(lang, sfItem);
+                Map<String, Map<String, ItemTranslation>> allItemTranslations = SlimefunTranslation.getRegistry().getItemTranslations();
                 allItemTranslations.putIfAbsent(lang, new HashMap<>());
-                var currentTranslations = allItemTranslations.get(lang);
+                Map<String, ItemTranslation> currentTranslations = allItemTranslations.get(lang);
                 currentTranslations.put(sfItem.getId(), translation);
             }
         }
@@ -133,17 +133,20 @@ public final class TranslationService {
      * @param replace Whether to replace existing files.
      */
     public void extractTranslations(boolean replace) {
-        if (!translationsFolder.exists()) {
-            translationsFolder.mkdirs();
+        if (!translationsFolder.exists()) translationsFolder.mkdirs();
+        File jarFile = null;
+        try {
+            Method method = JavaPlugin.class.getDeclaredMethod("getFile");
+            method.setAccessible(true);
+            jarFile = (File) method.invoke(AbstractAddon.getInstance());
+        } catch (Exception ignore) {
         }
         List<String> translationFiles = FileUtils.listYamlFilesInJar(jarFile, FOLDER_NAME + "/");
         for (String translationFile : translationFiles) {
-            String filePath = FOLDER_NAME + File.separator + translationFile;
-            File file = new File(plugin.getDataFolder(), filePath);
-            if (file.exists() && !replace) {
-                continue;
-            }
-            plugin.saveResource(filePath, replace);
+            String filePath = "translations" + File.separator + translationFile;
+            File file = new File(main.getAddonFolder(), filePath);
+            if (file.exists() && !replace) continue;
+            AbstractAddon.getInstance().saveResource(FOLDER_NAME + File.separator + translationFile, replace);
         }
     }
 
@@ -157,13 +160,11 @@ public final class TranslationService {
      */
     @ParametersAreNonnullByDefault
     public String exportItemTranslations(String language, String addonName, Set<String> ids) {
-        // make language folder if not exists
+        // Make language folder if not exists
         File langFolder = new File(translationsFolder, language);
-        if (!langFolder.exists()) {
-            langFolder.mkdirs();
-        }
+        if (!langFolder.exists()) langFolder.mkdirs();
 
-        // find the next available file name
+        // Find the next available file name
         int idx = 1;
         File file;
         String fileName;
@@ -179,21 +180,17 @@ public final class TranslationService {
         for (String itemId : ids) {
             String path = "translations." + itemId;
             SlimefunItem sfItem = SlimefunItem.getById(itemId);
-            if (sfItem == null) {
-                continue;
-            }
+            if (sfItem == null) continue;
             config.set(path + ".name", ColorUtils.useAltCode(sfItem.getItemName()));
-            var meta = sfItem.getItem().getItemMeta();
-            if (meta.hasLore()) {
-                config.set(path + ".lore", ColorUtils.useAltCode(meta.getLore()));
-            }
+            ItemMeta meta = sfItem.getItem().getItemMeta();
+            if (meta.hasLore()) config.set(path + ".lore", ColorUtils.useAltCode(meta.getLore()));
         }
 
-        // save the file
+        // Save the file
         try {
             config.save(file);
         } catch (IOException ex) {
-            SlimefunTranslation.log(Level.SEVERE, ex, "An error has occurred while exporting translation file.");
+            LogUtils.log(Level.SEVERE, "An error has occurred while exporting translation file.", ex);
         }
 
         return fileName;
@@ -210,14 +207,11 @@ public final class TranslationService {
     @Nonnull
     public String getTranslatedItemName(@Nonnull User user, @Nullable SlimefunItem sfItem) {
         Preconditions.checkArgument(user != null, "user cannot be null");
-        if (sfItem == null) {
-            return "";
-        }
-        // if the item is disabled, return the original name
-        if (SlimefunTranslation.getConfigService().getDisabledItems().contains(sfItem.getId())) {
+        if (sfItem == null) return "";
+        // If the item is disabled, return the original name
+        if (SlimefunTranslation.getConfigService().getDisabledItems().contains(sfItem.getId()))
             return sfItem.getItemName();
-        }
-        var transl = TranslationUtils.findTranslation(
+        Optional<ItemTranslation> transl = TranslationUtils.findTranslation(
             SlimefunTranslation.getRegistry().getItemTranslations(), user, sfItem.getId());
         return transl.map(itemTranslation -> SlimefunTranslation.getIntegrationService().applyPlaceholders(
             user,
@@ -235,98 +229,33 @@ public final class TranslationService {
      */
     public boolean translateItem(@Nonnull User user, @Nullable ItemStack item) {
         Preconditions.checkArgument(user != null, "user cannot be null");
-        if (item == null || !item.hasItemMeta()) {
-            return false;
-        }
-
-        // slimefun guide
-        SlimefunGuideMode guideMode = SlimefunItemUtils.getGuideMode(item);
-        if (guideMode != null) {
-            return translateSfGuide(user, item, guideMode);
-        }
-
-        // slimefun item group
-        String itemGroupKey = SlimefunItemUtils.getItemGroupKey(item);
-        if (itemGroupKey != null) {
-            return translateSfItemGroup(user, item, itemGroupKey);
-        }
-
-        // slimefun item
+        if (item == null || !item.hasItemMeta()) return false;
         String sfId = SlimefunItemUtils.getId(item);
-        if (sfId != null) {
-            return translateSfItem(user, item, sfId);
-        }
+        if (sfId == null) return false;
 
-        return false;
+        return translateItem(user, item, sfId);
     }
 
     @ParametersAreNonnullByDefault
-    private boolean translateSfGuide(User user, ItemStack item, SlimefunGuideMode guideMode) {
-        var transl = TranslationUtils.findTranslation(
-            SlimefunTranslation.getRegistry().getGuideTranslations(), user, guideMode.name());
-        if (transl.isEmpty()) {
-            return false;
-        }
-
-        var translation = transl.get();
-        final ItemMeta meta = item.getItemMeta();
-
-        var integrationService = SlimefunTranslation.getIntegrationService();
-        // display name
-        String originalDisplayName = meta.hasDisplayName() ? meta.getDisplayName() : "";
-        meta.setDisplayName(integrationService.applyPlaceholders(user, translation.getDisplayName(user, item, meta, originalDisplayName)));
-        // lore
-        List<String> originalLore = meta.hasLore() ? meta.getLore() : new ArrayList<>();
-        meta.setLore(integrationService.applyPlaceholders(user, translation.getLore(user, item, meta, originalLore)));
-
-        item.setItemMeta(meta);
-        return true;
-    }
-
-    @ParametersAreNonnullByDefault
-    private boolean translateSfItemGroup(User user, ItemStack item, String itemGroupKey) {
-        var transl = TranslationUtils.findTranslation(
-            SlimefunTranslation.getRegistry().getItemGroupTranslations(), user, itemGroupKey);
-        if (transl.isEmpty()) {
-            return false;
-        }
-
-        var translation = transl.get();
-        final ItemMeta meta = item.getItemMeta();
-
-        var integrationService = SlimefunTranslation.getIntegrationService();
-        // display name
-        meta.setDisplayName(integrationService.applyPlaceholders(user, translation));
-        item.setItemMeta(meta);
-        return true;
-    }
-
-    @ParametersAreNonnullByDefault
-    private boolean translateSfItem(User user, ItemStack item, String sfId) {
-        // check if the item is disabled
-        if (SlimefunTranslation.getConfigService().getDisabledItems().contains(sfId)) {
-            return false;
-        }
-        // find the translation
-        var transl = TranslationUtils.findTranslation(
+    private boolean translateItem(User user, ItemStack item, String sfId) {
+        // Check if the item is disabled
+        if (SlimefunTranslation.getConfigService().getDisabledItems().contains(sfId)) return false;
+        // Find the translation
+        Optional<ItemTranslation> transl = TranslationUtils.findTranslation(
             SlimefunTranslation.getRegistry().getItemTranslations(), user, sfId);
-        if (transl.isEmpty()) {
-            return false;
-        }
-        var translation = transl.get();
+        if (!transl.isPresent()) return false;
+        ItemTranslation translation = transl.get();
         final ItemMeta meta = item.getItemMeta();
 
-        // check whether the translation can be applied
+        // Check whether the translation can be applied
         TranslationStatus status = translation.canTranslate(user, item, meta, sfId);
-        if (status == TranslationStatus.DENIED) {
-            return false;
-        }
+        if (status == TranslationStatus.DENIED) return false;
 
-        var integrationService = SlimefunTranslation.getIntegrationService();
-        // display name
+        IntegrationService integrationService = SlimefunTranslation.getIntegrationService();
+        // Display name
         String originalDisplayName = meta.hasDisplayName() ? meta.getDisplayName() : "";
         meta.setDisplayName(integrationService.applyPlaceholders(user, translation.getDisplayName(user, item, meta, originalDisplayName)));
-        // lore
+        // Lore
         if (shouldTranslateLore(meta) && status != TranslationStatus.NAME_ONLY) {
             List<String> originalLore = meta.hasLore() ? meta.getLore() : new ArrayList<>();
             meta.setLore(integrationService.applyPlaceholders(user, translation.getLore(user, item, meta, originalLore)));
@@ -354,7 +283,7 @@ public final class TranslationService {
     @Nonnull
     @ParametersAreNonnullByDefault
     public String getLore(User user, String id, boolean defaultToId) {
-        var transl = TranslationUtils.findTranslation(
+        Optional<String> transl = TranslationUtils.findTranslation(
             SlimefunTranslation.getRegistry().getLoreTranslations(), user, id);
         return transl.orElse(defaultToId ? id : "");
     }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/services/UserService.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/UserService.java
similarity index 63%
rename from src/main/java/net/guizhanss/slimefuntranslation/core/services/UserService.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/UserService.java
index 55c5622..88d79bf 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/services/UserService.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/services/UserService.java
@@ -1,23 +1,23 @@
-package net.guizhanss.slimefuntranslation.core.services;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.services;
 
+import java.util.Map;
 import java.util.UUID;
 
 import javax.annotation.Nonnull;
 
 import org.bukkit.entity.Player;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
 
 public final class UserService {
 
     @Nonnull
     public User getUser(@Nonnull UUID uuid) {
-        var users = SlimefunTranslation.getRegistry().getUsers();
-        if (users.containsKey(uuid)) {
-            return users.get(uuid);
-        } else {
-            var user = new User(uuid);
+        Map<UUID, User> users = SlimefunTranslation.getRegistry().getUsers();
+        if (users.containsKey(uuid)) return users.get(uuid);
+        else {
+            User user = new User(uuid);
             users.put(uuid, user);
             return user;
         }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/users/User.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/users/User.java
similarity index 78%
rename from src/main/java/net/guizhanss/slimefuntranslation/core/users/User.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/users/User.java
index 862409c..fb0a71f 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/users/User.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/core/users/User.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.core.users;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users;
 
 import java.util.UUID;
 
@@ -11,6 +11,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.core.services.localization.Language;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 
 import lombok.Getter;
@@ -44,12 +45,9 @@ public class User {
     }
 
     public void updateLocale() {
-        var lang = Slimefun.getLocalization().getLanguage(player);
-        if (lang != null) {
-            setLocale(lang.getId());
-        } else {
-            setLocale(Slimefun.getLocalization().getDefaultLanguage().getId());
-        }
+        Language lang = Slimefun.getLocalization().getLanguage(player);
+        if (lang != null) setLocale(lang.getId());
+        else setLocale(Slimefun.getLocalization().getDefaultLanguage().getId());
     }
 
     public void setLocale(@Nonnull String newLocale) {
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/PlayerJoinListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/PlayerJoinListener.java
similarity index 56%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/PlayerJoinListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/PlayerJoinListener.java
index c0d7d6d..d9207fe 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/PlayerJoinListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/PlayerJoinListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.listeners;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners;
 
 import javax.annotation.Nonnull;
 
@@ -6,13 +6,9 @@ import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.player.PlayerJoinEvent;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
 
 public class PlayerJoinListener implements Listener {
-    public PlayerJoinListener(@Nonnull SlimefunTranslation plugin) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-    }
-
     @EventHandler
     public void onJoin(@Nonnull PlayerJoinEvent e) {
         SlimefunTranslation.getUserService().addUser(e.getPlayer());
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/PlayerQuitListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/PlayerQuitListener.java
similarity index 56%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/PlayerQuitListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/PlayerQuitListener.java
index 752dd39..f9c15e5 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/PlayerQuitListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/PlayerQuitListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.listeners;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners;
 
 import javax.annotation.Nonnull;
 
@@ -6,13 +6,9 @@ import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.player.PlayerQuitEvent;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
 
 public class PlayerQuitListener implements Listener {
-    public PlayerQuitListener(@Nonnull SlimefunTranslation plugin) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-    }
-
     @EventHandler
     public void onJoin(@Nonnull PlayerQuitEvent e) {
         SlimefunTranslation.getUserService().removeUser(e.getPlayer());
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java
new file mode 100644
index 0000000..83cfb50
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java
@@ -0,0 +1,28 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners;
+
+import java.util.Optional;
+
+import javax.annotation.Nonnull;
+
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+
+import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+
+public class SlimefunBlockRightClickListener implements Listener {
+    public SlimefunBlockRightClickListener() {
+        Event.registerListeners(this);
+    }
+
+    @EventHandler
+    public void onRightClick(@Nonnull PlayerRightClickEvent e) {
+        User user = SlimefunTranslation.getUserService().getUser(e.getPlayer());
+        Optional<SlimefunItem> sfBlock = e.getSlimefunBlock();
+        user.setRecentClickedBlock(sfBlock.orElse(null));
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunItemLoadListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunItemLoadListener.java
similarity index 52%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunItemLoadListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunItemLoadListener.java
index 9155eb9..09a6938 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunItemLoadListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunItemLoadListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.listeners;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners;
 
 import javax.annotation.Nonnull;
 
@@ -7,16 +7,13 @@ import org.bukkit.event.Listener;
 
 import io.github.thebusybiscuit.slimefun4.api.events.SlimefunItemRegistryFinalizedEvent;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
 
 public class SlimefunItemLoadListener implements Listener {
-    public SlimefunItemLoadListener(@Nonnull SlimefunTranslation plugin) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-    }
-
     @EventHandler
     public void onSlimefunItemLoad(@Nonnull SlimefunItemRegistryFinalizedEvent e) {
         SlimefunTranslation.getTranslationService().clearTranslations();
-        SlimefunTranslation.getScheduler().run(() -> SlimefunTranslation.getTranslationService().callLoadEvent());
+        AbstractAddon.getScheduler().run(() -> SlimefunTranslation.getTranslationService().callLoadEvent());
     }
 }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunLanguageChangeListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunLanguageChangeListener.java
similarity index 58%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunLanguageChangeListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunLanguageChangeListener.java
index b428b04..7d9b18d 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunLanguageChangeListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/SlimefunLanguageChangeListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.listeners;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners;
 
 import javax.annotation.Nonnull;
 
@@ -7,14 +7,10 @@ import org.bukkit.event.Listener;
 
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerLanguageChangeEvent;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
 
 public class SlimefunLanguageChangeListener implements Listener {
-    public SlimefunLanguageChangeListener(@Nonnull SlimefunTranslation plugin) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-    }
-
     @EventHandler
     public void onLanguageChange(@Nonnull PlayerLanguageChangeEvent e) {
         User user = SlimefunTranslation.getUserService().getUser(e.getPlayer());
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/TranslationsLoadListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/TranslationsLoadListener.java
similarity index 52%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/TranslationsLoadListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/TranslationsLoadListener.java
index c1b7b46..3223bd0 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/TranslationsLoadListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/listeners/TranslationsLoadListener.java
@@ -1,18 +1,14 @@
-package net.guizhanss.slimefuntranslation.implementation.listeners;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.listeners;
 
 import javax.annotation.Nonnull;
 
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.events.TranslationsLoadEvent;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.events.TranslationsLoadEvent;
 
 public class TranslationsLoadListener implements Listener {
-    public TranslationsLoadListener(@Nonnull SlimefunTranslation plugin) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-    }
-
     @EventHandler
     public void onJoin(@Nonnull TranslationsLoadEvent e) {
         SlimefunTranslation.getTranslationService().clearTranslations();
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/AListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/AListener.java
similarity index 73%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/AListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/AListener.java
index b58d5fd..cef3bfc 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/AListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/AListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners;
 
 import java.util.logging.Level;
 
@@ -13,8 +13,9 @@ import com.google.common.base.Preconditions;
 
 import org.bukkit.entity.Player;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 
 public abstract class AListener {
     protected final PacketType packetType;
@@ -29,13 +30,11 @@ public abstract class AListener {
         Preconditions.checkArgument(event != null, "PacketEvent cannot be null");
         Player p = event.getPlayer();
         if (event.isPlayerTemporary()) {
-            SlimefunTranslation.log(Level.WARNING,
+            LogUtils.log(Level.WARNING,
                 "ProtocolLib returns temporary player [{0}] for packet {1}. It cannot be processed.",
                 p.getAddress(), packetType.name());
             return null;
-        } else {
-            return SlimefunTranslation.getUserService().getUser(p);
-        }
+        } else return SlimefunTranslation.getUserService().getUser(p);
     }
 
     public void register() {
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/AClientListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/AClientListener.java
similarity index 57%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/AClientListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/AClientListener.java
index 1d6d653..3229647 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/AClientListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/AClientListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.client;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.client;
 
 import javax.annotation.Nonnull;
 
@@ -7,14 +7,14 @@ import com.comphenix.protocol.events.ListenerPriority;
 import com.comphenix.protocol.events.PacketAdapter;
 import com.comphenix.protocol.events.PacketEvent;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.AListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.AListener;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
 
 public abstract class AClientListener extends AListener {
     protected AClientListener(@Nonnull PacketType packetType) {
         super(packetType);
 
-        adapter = new PacketAdapter(SlimefunTranslation.getInstance(), ListenerPriority.HIGHEST, packetType) {
+        adapter = new PacketAdapter(AbstractAddon.getInstance(), ListenerPriority.HIGHEST, packetType) {
             @Override
             public void onPacketReceiving(@Nonnull PacketEvent event) {
                 process(event);
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/items/SetCreativeSlotListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/items/SetCreativeSlotListener.java
similarity index 54%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/items/SetCreativeSlotListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/items/SetCreativeSlotListener.java
index c4866f4..1b34762 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/items/SetCreativeSlotListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/items/SetCreativeSlotListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.client.items;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.client.items;
 
 import javax.annotation.Nonnull;
 
@@ -7,8 +7,9 @@ import com.comphenix.protocol.events.PacketEvent;
 
 import org.bukkit.inventory.ItemStack;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.client.AClientListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.client.AClientListener;
 
 public class SetCreativeSlotListener extends AClientListener {
     public SetCreativeSlotListener() {
@@ -16,10 +17,8 @@ public class SetCreativeSlotListener extends AClientListener {
     }
 
     protected void process(@Nonnull PacketEvent event) {
-        var user = getUser(event);
-        if (user == null) {
-            return;
-        }
+        User user = getUser(event);
+        if (user == null) return;
         ItemStack item = event.getPacket().getItemModifier().read(0);
         SlimefunTranslation.getTranslationService().translateItem(user, item);
     }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/items/WindowClickListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/items/WindowClickListener.java
similarity index 53%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/items/WindowClickListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/items/WindowClickListener.java
index 63d5b7f..3d1ab28 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/client/items/WindowClickListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/client/items/WindowClickListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.client.items;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.client.items;
 
 import javax.annotation.Nonnull;
 
@@ -7,8 +7,9 @@ import com.comphenix.protocol.events.PacketEvent;
 
 import org.bukkit.inventory.ItemStack;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.client.AClientListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.client.AClientListener;
 
 public class WindowClickListener extends AClientListener {
     public WindowClickListener() {
@@ -16,10 +17,8 @@ public class WindowClickListener extends AClientListener {
     }
 
     protected void process(@Nonnull PacketEvent event) {
-        var user = getUser(event);
-        if (user == null) {
-            return;
-        }
+        User user = getUser(event);
+        if (user == null) return;
         ItemStack item = event.getPacket().getItemModifier().read(0);
         SlimefunTranslation.getTranslationService().translateItem(user, item);
     }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/AServerListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/AServerListener.java
similarity index 57%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/AServerListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/AServerListener.java
index 40b33d3..2d893d1 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/AServerListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/AServerListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.server;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server;
 
 import javax.annotation.Nonnull;
 
@@ -7,14 +7,14 @@ import com.comphenix.protocol.events.ListenerPriority;
 import com.comphenix.protocol.events.PacketAdapter;
 import com.comphenix.protocol.events.PacketEvent;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.AListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.AListener;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
 
 public abstract class AServerListener extends AListener {
     protected AServerListener(@Nonnull PacketType packetType) {
         super(packetType);
 
-        adapter = new PacketAdapter(SlimefunTranslation.getInstance(), ListenerPriority.HIGHEST, packetType) {
+        adapter = new PacketAdapter(AbstractAddon.getInstance(), ListenerPriority.HIGHEST, packetType) {
             @Override
             public void onPacketSending(@Nonnull PacketEvent event) {
                 process(event);
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/EntityMetadataListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/EntityMetadataListener.java
similarity index 84%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/EntityMetadataListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/EntityMetadataListener.java
index 8deef1f..c52fbdf 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/EntityMetadataListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/EntityMetadataListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.server;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -27,12 +27,11 @@ import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.utils.SlimefunItemUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.SlimefunItemUtils;
 
 public class EntityMetadataListener extends AServerListener {
-
     private static final boolean USE_DV = Slimefun.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_20) ||
         (Slimefun.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_19) && PaperLib.getMinecraftPatchVersion() >= 3);
 
@@ -42,26 +41,18 @@ public class EntityMetadataListener extends AServerListener {
 
     @Override
     protected void process(@Nonnull PacketEvent event) {
-        var user = getUser(event);
-        if (user == null) {
-            return;
-        }
+        User user = getUser(event);
+        if (user == null) return;
         final PacketContainer packet = event.getPacket();
         final Entity entity = packet.getEntityModifier(event).read(0);
 
-        if (entity == null || entity.getType() != EntityType.DROPPED_ITEM) {
-            return;
-        }
+        if (entity == null || entity.getType() != EntityType.DROPPED_ITEM) return;
 
         final Item itemEntity = (Item) entity;
-        if (!entity.isCustomNameVisible()) {
-            return;
-        }
+        if (!entity.isCustomNameVisible()) return;
         final ItemStack item = itemEntity.getItemStack();
         final String sfId = SlimefunItemUtils.getId(item);
-        if (sfId == null) {
-            return;
-        }
+        if (sfId == null) return;
         PacketContainer processed = processPacket(packet, user, itemEntity, sfId);
         event.setPacket(processed);
     }
@@ -89,9 +80,7 @@ public class EntityMetadataListener extends AServerListener {
                 );
             }
             packet.getDataValueCollectionModifier().write(0, wrappedDataValueList);
-        } else {
-            packet.getWatchableCollectionModifier().write(0, dataWatcher.getWatchableObjects());
-        }
+        } else packet.getWatchableCollectionModifier().write(0, dataWatcher.getWatchableObjects());
         return packet;
     }
 }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/OpenWindowListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/OpenWindowListener.java
similarity index 69%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/OpenWindowListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/OpenWindowListener.java
index 5e8411a..6b6dd89 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/OpenWindowListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/OpenWindowListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.server;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server;
 
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -11,10 +11,14 @@ import com.comphenix.protocol.events.PacketEvent;
 import com.comphenix.protocol.reflect.StructureModifier;
 import com.comphenix.protocol.wrappers.WrappedChatComponent;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.chat.ComponentSerializer;
 
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+
 public class OpenWindowListener extends AServerListener {
     public OpenWindowListener() {
         super(PacketType.Play.Server.OPEN_WINDOW);
@@ -22,23 +26,17 @@ public class OpenWindowListener extends AServerListener {
 
     @Override
     protected void process(@Nonnull PacketEvent event) {
-        var user = getUser(event);
-        if (user == null) {
-            return;
-        }
-        var block = user.getRecentClickedBlock();
-        if (block == null) {
-            return;
-        }
+        User user = getUser(event);
+        if (user == null) return;
+        SlimefunItem block = user.getRecentClickedBlock();
+        if (block == null) return;
 
         final PacketContainer packet = event.getPacket();
         StructureModifier<WrappedChatComponent> modifier = packet.getChatComponents();
         WrappedChatComponent wrappedChatComponent = modifier.read(0);
         BaseComponent[] components = ComponentSerializer.parse(wrappedChatComponent.getJson());
         String title = Stream.of(components).map(c -> c.toLegacyText()).collect(Collectors.joining());
-        if (!block.getItemName().equals(title)) {
-            return;
-        }
+        if (!block.getItemName().equals(title)) return;
         modifier.write(0, WrappedChatComponent.fromLegacyText(
             SlimefunTranslation.getTranslationService().getTranslatedItemName(user, block)
         ));
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/items/SetSlotListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/items/SetSlotListener.java
similarity index 60%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/items/SetSlotListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/items/SetSlotListener.java
index bc74ef9..cd5832e 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/items/SetSlotListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/items/SetSlotListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.items;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.items;
 
 import javax.annotation.Nonnull;
 
@@ -9,8 +9,9 @@ import com.comphenix.protocol.reflect.StructureModifier;
 
 import org.bukkit.inventory.ItemStack;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.AServerListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.AServerListener;
 
 public class SetSlotListener extends AServerListener {
     public SetSlotListener() {
@@ -19,17 +20,13 @@ public class SetSlotListener extends AServerListener {
 
     @Override
     protected void process(@Nonnull PacketEvent event) {
-        var user = getUser(event);
-        if (user == null) {
-            return;
-        }
+        User user = getUser(event);
+        if (user == null) return;
         PacketContainer packet = event.getPacket();
         StructureModifier<ItemStack> modifier = packet.getItemModifier();
         for (int i = 0; i < modifier.size(); i++) {
             ItemStack item = modifier.read(i);
-            if (SlimefunTranslation.getTranslationService().translateItem(user, item)) {
-                modifier.write(i, item);
-            }
+            if (SlimefunTranslation.getTranslationService().translateItem(user, item)) modifier.write(i, item);
         }
     }
 }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/items/WindowItemListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/items/WindowItemListener.java
similarity index 56%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/items/WindowItemListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/items/WindowItemListener.java
index 83bfc50..dac3061 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/packetlisteners/server/items/WindowItemListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/packetlisteners/server/items/WindowItemListener.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.items;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.items;
 
 import java.util.List;
 
@@ -11,8 +11,9 @@ import com.comphenix.protocol.reflect.StructureModifier;
 
 import org.bukkit.inventory.ItemStack;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.AServerListener;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.packetlisteners.server.AServerListener;
 
 public class WindowItemListener extends AServerListener {
     public WindowItemListener() {
@@ -21,16 +22,12 @@ public class WindowItemListener extends AServerListener {
 
     @Override
     protected void process(@Nonnull PacketEvent event) {
-        var user = getUser(event);
-        if (user == null) {
-            return;
-        }
+        User user = getUser(event);
+        if (user == null) return;
         PacketContainer packet = event.getPacket();
         StructureModifier<List<ItemStack>> modifier = packet.getItemListModifier();
         List<ItemStack> items = modifier.read(0);
-        for (ItemStack item : items) {
-            SlimefunTranslation.getTranslationService().translateItem(user, item);
-        }
+        for (ItemStack item : items) SlimefunTranslation.getTranslationService().translateItem(user, item);
         modifier.write(0, items);
     }
 }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/translations/FixedItemTranslation.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/translations/FixedItemTranslation.java
similarity index 57%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/translations/FixedItemTranslation.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/translations/FixedItemTranslation.java
index f03dc39..9e0b06b 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/translations/FixedItemTranslation.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/translations/FixedItemTranslation.java
@@ -1,8 +1,10 @@
-package net.guizhanss.slimefuntranslation.implementation.translations;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.translations;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 
 import javax.annotation.Nonnull;
 import javax.annotation.ParametersAreNonnullByDefault;
@@ -14,11 +16,12 @@ import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 
-import net.guizhanss.slimefuntranslation.api.config.TranslationConditions;
-import net.guizhanss.slimefuntranslation.api.translation.ItemTranslation;
-import net.guizhanss.slimefuntranslation.api.translation.TranslationStatus;
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.utils.ColorUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.config.TranslationConditions;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.ItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.TranslationStatus;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.ColorUtils;
+import id.universenetwork.sfa_loader.utils.TextUtils;
 
 /**
  * A fixed translation is defined from config file, or from other plugins.
@@ -34,7 +37,7 @@ public class FixedItemTranslation implements ItemTranslation {
         String displayName,
         List<String> lore
     ) {
-        this(displayName, lore, Map.of(), Map.of(), new TranslationConditions());
+        this(displayName, lore, Collections.emptyMap(), Collections.emptyMap(), new TranslationConditions());
     }
 
     @ParametersAreNonnullByDefault
@@ -45,7 +48,7 @@ public class FixedItemTranslation implements ItemTranslation {
         Map<Integer, Pair<String, String>> replacements,
         TranslationConditions conditions
     ) {
-        this.displayName = ColorUtils.color(displayName);
+        this.displayName = TextUtils.translateColor(displayName);
         this.lore = ColorUtils.color(lore);
         this.overrides = overrides;
         this.replacements = replacements;
@@ -85,41 +88,34 @@ public class FixedItemTranslation implements ItemTranslation {
     public List<String> getLore(User user, ItemStack item, ItemMeta meta, List<String> original) {
         List<String> newLore = new ArrayList<>(original);
 
-        if (!lore.isEmpty()) {
-            // lore specified
-            if (conditions.isPartialOverride()) {
-                // partial override enabled, only override the specified lines
-                for (int i = 0; i < lore.size(); i++) {
-                    try {
-                        var line = lore.get(i);
-                        newLore.set(i, ColorUtils.color(line));
-                    } catch (IndexOutOfBoundsException e) {
-                        // ignore
-                    }
+        // Lore specified
+        if (!lore.isEmpty())
+            // Partial override enabled, only override the specified lines
+            if (conditions.isPartialOverride()) for (int i = 0; i < lore.size(); i++) {
+                try {
+                    String line = lore.get(i);
+                    newLore.set(i, TextUtils.translateColor(line));
+                } catch (IndexOutOfBoundsException e) {
+                    // Ignore
                 }
-            } else {
-                // partial override disabled, override all lines
-                newLore = new ArrayList<>(lore);
             }
-        }
+            else newLore = new ArrayList<>(lore); // Partial override disabled, override all lines
 
-        // specific line overrides
-        for (var entry : overrides.entrySet()) {
+        // Specific line overrides
+        for (Map.Entry<Integer, String> entry : overrides.entrySet())
             try {
-                newLore.set(entry.getKey() - 1, ColorUtils.color(entry.getValue()));
+                newLore.set(entry.getKey() - 1, TextUtils.translateColor(entry.getValue()));
             } catch (IndexOutOfBoundsException e) {
-                // ignore
+                // Ignore
             }
-        }
-        // specific line replacements
-        for (var entry : replacements.entrySet()) {
+        // Specific line replacements
+        for (Map.Entry<Integer, Pair<String, String>> entry : replacements.entrySet())
             try {
-                var line = newLore.get(entry.getKey() - 1);
-                newLore.set(entry.getKey() - 1, ColorUtils.color(line.replace(entry.getValue().getFirstValue(), entry.getValue().getSecondValue())));
+                String line = newLore.get(entry.getKey() - 1);
+                newLore.set(entry.getKey() - 1, TextUtils.translateColor(line.replace(entry.getValue().getFirstValue(), entry.getValue().getSecondValue())));
             } catch (IndexOutOfBoundsException e) {
-                // ignore
+                // Ignore
             }
-        }
 
         return newLore;
     }
@@ -137,38 +133,29 @@ public class FixedItemTranslation implements ItemTranslation {
     @Nonnull
     @ParametersAreNonnullByDefault
     public TranslationStatus canTranslate(User user, ItemStack item, ItemMeta meta, String sfId) {
-        if (conditions.isForceLoad()) {
-            return TranslationStatus.ALLOWED;
-        }
+        if (conditions.isForceLoad()) return TranslationStatus.ALLOWED;
 
         SlimefunItem sfItem = SlimefunItem.getById(sfId);
-        if (sfItem == null) {
-            return TranslationStatus.DENIED;
-        }
+        if (sfItem == null) return TranslationStatus.DENIED;
 
         if (conditions.isMatchName()) {
-            var originalDisplayName = sfItem.getItemName();
-            if (!meta.hasDisplayName() || !meta.getDisplayName().equals(originalDisplayName)) {
+            String originalDisplayName = sfItem.getItemName();
+            if (!meta.hasDisplayName() || !meta.getDisplayName().equals(originalDisplayName))
                 return TranslationStatus.DENIED;
-            }
         }
 
         if (conditions.isMatchLore()) {
-            var originalItem = sfItem.getItem();
-            if (originalItem instanceof SlimefunItemStack sfItemStack) {
-                var originalLore = sfItemStack.getItemMetaSnapshot().getLore();
-                if (originalLore.isEmpty() || !meta.hasLore() || !meta.getLore().equals(originalLore.get())) {
+            ItemStack originalItem = sfItem.getItem();
+            if (originalItem instanceof SlimefunItemStack) {
+                SlimefunItemStack sfItemStack = (SlimefunItemStack) originalItem;
+                Optional<List<String>> originalLore = sfItemStack.getItemMetaSnapshot().getLore();
+                if (!originalLore.isPresent() || !meta.hasLore() || !meta.getLore().equals(originalLore.get()))
                     return TranslationStatus.NAME_ONLY;
-                }
             } else {
-                var originalMeta = originalItem.getItemMeta();
-                if (!originalMeta.hasLore()) {
-                    return TranslationStatus.DENIED;
-                }
-                var originalLore = originalMeta.getLore();
-                if (!meta.hasLore() || !meta.getLore().equals(originalLore)) {
-                    return TranslationStatus.NAME_ONLY;
-                }
+                ItemMeta originalMeta = originalItem.getItemMeta();
+                if (!originalMeta.hasLore()) return TranslationStatus.DENIED;
+                List<String> originalLore = originalMeta.getLore();
+                if (!meta.hasLore() || !meta.getLore().equals(originalLore)) return TranslationStatus.NAME_ONLY;
             }
         }
 
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/translations/ProgrammedItemTranslation.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/translations/ProgrammedItemTranslation.java
similarity index 69%
rename from src/main/java/net/guizhanss/slimefuntranslation/implementation/translations/ProgrammedItemTranslation.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/translations/ProgrammedItemTranslation.java
index b247fec..57bef0c 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/translations/ProgrammedItemTranslation.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/implementation/translations/ProgrammedItemTranslation.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.implementation.translations;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.implementation.translations;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -13,11 +13,11 @@ import org.bukkit.inventory.meta.ItemMeta;
 
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.translation.ItemTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.utils.constant.Methods;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.ItemTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant.Methods;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 import lombok.RequiredArgsConstructor;
 
 /**
@@ -69,17 +69,13 @@ public class ProgrammedItemTranslation implements ItemTranslation {
 
     @ParametersAreNonnullByDefault
     private void handleError(User user, Exception ex) {
-        SlimefunTranslation.log(Level.SEVERE, ex, "An error has occurred while translating item " + sfItem.getId() + " for user " + user.getPlayer().getName() + "." +
-            "Report this to the developer of addon " + sfItem.getAddon().getName() + ".");
+        LogUtils.log(Level.SEVERE, "An error has occurred while translating item " + sfItem.getId() + " for user " + user.getPlayer().getName() + "." +
+            "Report this to the developer of addon " + sfItem.getAddon().getName() + ".", ex);
         if (++errorCount >= 5) {
-            for (var idMap : SlimefunTranslation.getRegistry().getItemTranslations().values()) {
-                for (var entry : idMap.entrySet()) {
-                    if (entry.getKey().equals(sfItem.getId())) {
-                        idMap.remove(entry.getKey());
-                    }
-                }
-            }
-            SlimefunTranslation.log(Level.SEVERE, "Too many exceptions were thrown by item translation of " + sfItem.getId() + " for user " + user.getPlayer().getName() + "." +
+            for (java.util.Map<String, ItemTranslation> idMap : SlimefunTranslation.getRegistry().getItemTranslations().values())
+                for (java.util.Map.Entry<String, ItemTranslation> entry : idMap.entrySet())
+                    if (entry.getKey().equals(sfItem.getId())) idMap.remove(entry.getKey());
+            LogUtils.log(Level.SEVERE, "Too many exceptions were thrown by item translation of " + sfItem.getId() + " for user " + user.getPlayer().getName() + "." +
                 "Terminating translation.");
         }
     }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/integrations/placeholders/AExpansion.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/integrations/placeholders/AExpansion.java
similarity index 54%
rename from src/main/java/net/guizhanss/slimefuntranslation/integrations/placeholders/AExpansion.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/integrations/placeholders/AExpansion.java
index c63bbb1..2151d18 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/integrations/placeholders/AExpansion.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/integrations/placeholders/AExpansion.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.integrations.placeholders;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.integrations.placeholders;
 
 import java.text.MessageFormat;
 
@@ -7,9 +7,10 @@ import javax.annotation.ParametersAreNonnullByDefault;
 
 import me.clip.placeholderapi.expansion.PlaceholderExpansion;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.utils.ColorUtils;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.utils.TextUtils;
 
 public abstract class AExpansion extends PlaceholderExpansion {
     @Override
@@ -21,14 +22,14 @@ public abstract class AExpansion extends PlaceholderExpansion {
     @Override
     @Nonnull
     public String getVersion() {
-        return SlimefunTranslation.getInstance().getPluginVersion();
+        return AbstractAddon.getInstance().getDescription().getVersion();
     }
 
     @Nonnull
     @ParametersAreNonnullByDefault
     protected String getLore(User user, String id, String... args) {
-        var translation = SlimefunTranslation.getTranslationService().getLore(user, id, true);
-        return ColorUtils.color(
+        String translation = SlimefunTranslation.getTranslationService().getLore(user, id, true);
+        return TextUtils.translateColor(
             SlimefunTranslation.getIntegrationService().applyPlaceholders(
                 user, MessageFormat.format(translation, (Object[]) args)
             )
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/integrations/placeholders/SlimefunLoreExpansion.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/integrations/placeholders/SlimefunLoreExpansion.java
similarity index 67%
rename from src/main/java/net/guizhanss/slimefuntranslation/integrations/placeholders/SlimefunLoreExpansion.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/integrations/placeholders/SlimefunLoreExpansion.java
index 89aebdc..029db79 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/integrations/placeholders/SlimefunLoreExpansion.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/integrations/placeholders/SlimefunLoreExpansion.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.integrations.placeholders;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.integrations.placeholders;
 
 import java.util.Arrays;
 
@@ -8,9 +8,10 @@ import javax.annotation.ParametersAreNonnullByDefault;
 
 import org.bukkit.entity.Player;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.SlimefunTranslationAPI;
-import net.guizhanss.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.SlimefunTranslation;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.SlimefunTranslationAPI;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.translation.lore.LoreHandler;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
 
 public class SlimefunLoreExpansion extends AExpansion {
     public SlimefunLoreExpansion() {
@@ -18,9 +19,9 @@ public class SlimefunLoreExpansion extends AExpansion {
         SlimefunTranslationAPI.registerLoreHandler("Machine", (user, id, args) -> {
             if (args.length != 2) return null;
             return getLore(user, "Machine.Format",
-                getLore(user, "Machine.TierColor." + args[0]), // color
-                getLore(user, "Machine.Tier." + args[0]), // tier
-                getLore(user, "Machine.Type." + args[1]) // type
+                getLore(user, "Machine.TierColor." + args[0]), // Color
+                getLore(user, "Machine.Tier." + args[0]), // Tier
+                getLore(user, "Machine.Type." + args[1]) // Type
             );
         });
         SlimefunTranslationAPI.registerLoreHandler("Radioactive", (user, id, args) -> {
@@ -54,10 +55,8 @@ public class SlimefunLoreExpansion extends AExpansion {
 
         String id = s[0];
         String[] args = new String[0];
-        if (s.length >= 2) {
-            args = Arrays.copyOfRange(s, 1, s.length);
-        }
-        var handler = SlimefunTranslation.getRegistry().getSlimefunLoreHandlers().getOrDefault(id, this::getLore);
+        if (s.length >= 2) args = Arrays.copyOfRange(s, 1, s.length);
+        LoreHandler handler = SlimefunTranslation.getRegistry().getSlimefunLoreHandlers().getOrDefault(id, this::getLore);
         return handler.getLore(user, id, args);
     }
 }
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ColorUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ColorUtils.java
new file mode 100644
index 0000000..334056d
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ColorUtils.java
@@ -0,0 +1,28 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+import javax.annotation.Nonnull;
+
+import id.universenetwork.sfa_loader.utils.TextUtils;
+import lombok.experimental.UtilityClass;
+
+@UtilityClass
+public final class ColorUtils {
+    @Nonnull
+    public List<String> color(@Nonnull List<String> str) {
+        return str.stream().map(TextUtils::translateColor).collect(Collectors.toCollection(ArrayList::new));
+    }
+
+    @Nonnull
+    public String useAltCode(@Nonnull String str) {
+        return str.replace('§', '&');
+    }
+
+    @Nonnull
+    public List<String> useAltCode(@Nonnull List<String> str) {
+        return str.stream().map(ColorUtils::useAltCode).collect(Collectors.toCollection(ArrayList::new));
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/ConfigUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ConfigUtils.java
similarity index 62%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/ConfigUtils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ConfigUtils.java
index 42e5655..0803ffc 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/ConfigUtils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ConfigUtils.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -19,27 +19,22 @@ import org.bukkit.configuration.InvalidConfigurationException;
 
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.CommonPatterns;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.utils.constant.Patterns;
-import net.guizhanss.slimefuntranslation.utils.tags.SlimefunTranslationTag;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant.Patterns;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.tags.SlimefunTranslationTag;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 import lombok.experimental.UtilityClass;
 
 @SuppressWarnings("unchecked")
 @UtilityClass
 public final class ConfigUtils {
-
     @Nonnull
     public static <V> Map<String, V> getMap(@Nullable ConfigurationSection section) {
         Map<String, V> map = new HashMap<>();
-        if (section == null) {
-            return map;
-        }
+        if (section == null) return map;
         for (String key : section.getKeys(false)) {
-            var value = section.get(key);
-            if (value instanceof String || value instanceof Integer || value instanceof Double || value instanceof Boolean) {
+            Object value = section.get(key);
+            if (value instanceof String || value instanceof Integer || value instanceof Double || value instanceof Boolean)
                 map.put(key, (V) value);
-            }
         }
         return map;
     }
@@ -49,31 +44,23 @@ public final class ConfigUtils {
         Preconditions.checkArgument(materialList != null, "materialList cannot be null");
 
         Set<Material> materials = new HashSet<>();
-        for (String value : materialList) {
+        for (String value : materialList)
             try {
                 if (Patterns.MINECRAFT_NAMESPACEDKEY.matcher(value).matches()) {
                     Material material = Material.matchMaterial(value);
 
-                    if (material != null) {
-                        materials.add(material);
-                    } else {
-                        throw new InvalidConfigurationException("Invalid minecraft material: " + value);
-                    }
+                    if (material != null) materials.add(material);
+                    else throw new InvalidConfigurationException("Invalid minecraft material: " + value);
                 } else if (Patterns.SFT_TAG_CONFIG.matcher(value).matches()) {
                     String keyValue = CommonPatterns.COLON.split(value)[1].toUpperCase(Locale.ROOT);
                     SlimefunTranslationTag tag = SlimefunTranslationTag.getTag(keyValue);
 
-                    if (tag != null) {
-                        materials.addAll(tag.getValues());
-                    } else {
-                        throw new InvalidConfigurationException("Invalid SlimefunTranslationTag: " + keyValue);
-                    }
+                    if (tag != null) materials.addAll(tag.getValues());
+                    else throw new InvalidConfigurationException("Invalid SlimefunTranslationTag: " + keyValue);
                 }
             } catch (InvalidConfigurationException ex) {
-                SlimefunTranslation.log(Level.SEVERE, ex.getMessage(), ex);
+                LogUtils.log(Level.SEVERE, ex.getMessage(), ex);
             }
-
-        }
         return materials;
     }
 }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/FileUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/FileUtils.java
similarity index 61%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/FileUtils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/FileUtils.java
index 0ee33c4..1e44b6a 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/FileUtils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/FileUtils.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -13,8 +13,7 @@ import java.util.logging.Level;
 import javax.annotation.Nonnull;
 import javax.annotation.ParametersAreNonnullByDefault;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-
+import id.universenetwork.sfa_loader.utils.LogUtils;
 import lombok.experimental.UtilityClass;
 
 @SuppressWarnings("ConstantConditions")
@@ -27,21 +26,13 @@ public final class FileUtils {
      * @return a list of all folders in the given folder
      */
     @Nonnull
-    public static List<String> listFolders(@Nonnull File folder) {
-        if (folder == null || !folder.isDirectory()) {
-            return Collections.emptyList();
-        }
-        var files = folder.listFiles();
-        if (files == null) {
-            return Collections.emptyList();
-        }
+    public List<String> listFolders(@Nonnull File folder) {
+        if (folder == null || !folder.isDirectory()) return Collections.emptyList();
+        File[] files = folder.listFiles();
+        if (files == null) return Collections.emptyList();
 
         List<String> result = new ArrayList<>();
-        for (File file : files) {
-            if (file.isDirectory()) {
-                result.add(file.getName());
-            }
-        }
+        for (File file : files) if (file.isDirectory()) result.add(file.getName());
         return result;
     }
 
@@ -53,35 +44,25 @@ public final class FileUtils {
      * @return a list of all YAML files in the given folder
      */
     @Nonnull
-    public static List<String> listYamlFiles(@Nonnull File folder) {
+    public List<String> listYamlFiles(@Nonnull File folder) {
         return listYamlFiles(folder, "");
     }
 
     @Nonnull
     @ParametersAreNonnullByDefault
-    private static List<String> listYamlFiles(File folder, String path) {
-        if (folder == null || !folder.isDirectory()) {
-            return Collections.emptyList();
-        }
-        var files = folder.listFiles();
-        if (files == null) {
-            return Collections.emptyList();
-        }
+    private List<String> listYamlFiles(File folder, String path) {
+        if (folder == null || !folder.isDirectory()) return Collections.emptyList();
+        File[] files = folder.listFiles();
+        if (files == null) return Collections.emptyList();
 
         List<String> result = new ArrayList<>();
         for (File file : files) {
             final String filename = file.getName();
-            if (filename.startsWith(".") || filename.startsWith("_")) {
-                continue;
-            }
+            if (filename.startsWith(".") || filename.startsWith("_")) continue;
             if (file.isDirectory()) {
                 String subFolderPath = path + filename + File.separator;
                 result.addAll(listYamlFiles(file, subFolderPath));
-            } else {
-                if (filename.endsWith(".yml") || filename.endsWith(".yaml")) {
-                    result.add(path + filename);
-                }
-            }
+            } else if (filename.endsWith(".yml") || filename.endsWith(".yaml")) result.add(path + filename);
         }
         return result;
     }
@@ -89,9 +70,7 @@ public final class FileUtils {
     @Nonnull
     @ParametersAreNonnullByDefault
     public List<String> listYamlFilesInJar(File jarFile, String folderPath) {
-        if (jarFile == null || !jarFile.isFile()) {
-            return Collections.emptyList();
-        }
+        if (jarFile == null || !jarFile.isFile()) return Collections.emptyList();
         List<String> result = new ArrayList<>();
         try (JarInputStream stream = new JarInputStream(new FileInputStream(jarFile))) {
             JarEntry entry;
@@ -99,12 +78,11 @@ public final class FileUtils {
                 String entryName = entry.getName();
                 String filename = entryName.substring(entryName.lastIndexOf("/") + 1);
                 // Check if it's a .yml file and is under the "translations" folder
-                if (entryName.startsWith(folderPath) && filename.endsWith(".yml") && !entry.isDirectory()) {
+                if (entryName.startsWith(folderPath) && filename.endsWith(".yml") && !entry.isDirectory())
                     result.add(entryName.replace(folderPath, ""));
-                }
             }
         } catch (IOException ex) {
-            SlimefunTranslation.log(Level.SEVERE, ex, "An error has occurred while listing YAML files in jar file {0}", jarFile.getName());
+            LogUtils.log(Level.SEVERE, "An error has occurred while listing YAML files in jar file {0}", ex, jarFile.getName());
         }
         return result;
     }
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/GeneralUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/GeneralUtils.java
new file mode 100644
index 0000000..35e12ff
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/GeneralUtils.java
@@ -0,0 +1,11 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils;
+
+import lombok.experimental.UtilityClass;
+
+@UtilityClass
+public final class GeneralUtils {
+    public boolean isAllNull(Object... objects) {
+        for (Object object : objects) if (object != null) return false;
+        return true;
+    }
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/ReflectionUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ReflectionUtils.java
similarity index 86%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/ReflectionUtils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ReflectionUtils.java
index 07a6d58..4814710 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/ReflectionUtils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/ReflectionUtils.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils;
 
 import javax.annotation.ParametersAreNonnullByDefault;
 
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/SlimefunItemUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/SlimefunItemUtils.java
similarity index 65%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/SlimefunItemUtils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/SlimefunItemUtils.java
index 97369d2..833cec0 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/SlimefunItemUtils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/SlimefunItemUtils.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -11,30 +11,21 @@ import io.github.thebusybiscuit.slimefun4.core.guide.SlimefunGuideMode;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
 
-import net.guizhanss.slimefuntranslation.utils.constant.Keys;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant.Keys;
 import lombok.experimental.UtilityClass;
 
 @UtilityClass
 public class SlimefunItemUtils {
-
     @Nullable
-    public static String getId(@Nullable ItemStack item) {
-        if (item == null || item.getType().isAir() || !item.hasItemMeta()) {
-            return null;
-        }
-        if (item instanceof SlimefunItemStack sfItemStack) {
-            return sfItemStack.getItemId();
-        } else {
-            return PersistentDataAPI.getString(item.getItemMeta(), Keys.SLIMEFUN_ITEM);
-        }
+    public String getId(@Nullable ItemStack item) {
+        if (item == null || item.getType().isAir() || !item.hasItemMeta()) return null;
+        if (item instanceof SlimefunItemStack) return ((SlimefunItemStack) item).getItemId();
+        else return PersistentDataAPI.getString(item.getItemMeta(), Keys.SLIMEFUN_ITEM);
     }
 
     @Nullable
-    public static SlimefunGuideMode getGuideMode(@Nullable ItemStack item) {
-        if (item == null || item.getType().isAir() || !item.hasItemMeta()) {
-            return null;
-        }
+    public SlimefunGuideMode getGuideMode(@Nullable ItemStack item) {
+        if (item == null || item.getType().isAir() || !item.hasItemMeta()) return null;
         String mode = PersistentDataAPI.getString(item.getItemMeta(), Slimefun.getRegistry().getGuideDataKey());
         try {
             return SlimefunGuideMode.valueOf(mode);
@@ -44,15 +35,13 @@ public class SlimefunItemUtils {
     }
 
     @Nullable
-    public static String getItemGroupKey(@Nullable ItemStack item) {
-        if (item == null || item.getType().isAir() || !item.hasItemMeta()) {
-            return null;
-        }
+    public String getItemGroupKey(@Nullable ItemStack item) {
+        if (item == null || item.getType().isAir() || !item.hasItemMeta()) return null;
         return PersistentDataAPI.getString(item.getItemMeta(), Keys.SLIMEFUN_ITEM_GROUP);
     }
 
     @Nonnull
-    public static ItemStack getDisplayItem(@Nonnull ItemStack item) {
+    public ItemStack getDisplayItem(@Nonnull ItemStack item) {
         ItemStack displayItem = item.clone();
         ItemMeta meta = displayItem.getItemMeta();
         PersistentDataAPI.setBoolean(meta, Keys.SEARCH_DISPLAY, true);
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/TranslationUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/TranslationUtils.java
similarity index 71%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/TranslationUtils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/TranslationUtils.java
index 3cfbe82..3d5f938 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/TranslationUtils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/TranslationUtils.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils;
 
 import java.util.Map;
 import java.util.Optional;
@@ -10,11 +10,11 @@ import javax.annotation.ParametersAreNonnullByDefault;
 import com.google.common.base.Preconditions;
 
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.core.services.localization.Language;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.utils.constant.Methods;
-
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.core.users.User;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant.Methods;
 import lombok.experimental.UtilityClass;
 
 @SuppressWarnings("ConstantConditions")
@@ -37,17 +37,13 @@ public final class TranslationUtils {
         Preconditions.checkArgument(map != null, "map cannot be null");
         Preconditions.checkArgument(key != null, "key cannot be null");
 
-        if (user == null) {
-            return findDefaultTranslation(map, key);
-        }
+        if (user == null) return findDefaultTranslation(map, key);
 
-        // find the translations for user's current locale
-        var translations = map.get(user.getLocale());
+        // Find the translations for user's current locale
+        Map<String, V> translations = map.get(user.getLocale());
         if (translations != null) {
-            var translation = translations.get(key);
-            if (translation != null) {
-                return Optional.of(translation);
-            }
+            V translation = translations.get(key);
+            if (translation != null) return Optional.of(translation);
         }
 
         return findDefaultTranslation(map, key);
@@ -61,30 +57,24 @@ public final class TranslationUtils {
 
         Map<String, V> translations;
         // try server default locale
-        var serverDefault = Slimefun.getLocalization().getDefaultLanguage();
+        Language serverDefault = Slimefun.getLocalization().getDefaultLanguage();
         if (serverDefault != null) {
             translations = map.get(serverDefault.getId());
             if (translations != null) {
-                var translation = translations.get(key);
-                if (translation != null) {
-                    return Optional.of(translation);
-                }
+                V translation = translations.get(key);
+                if (translation != null) return Optional.of(translation);
             }
         }
 
         // try default locale
         translations = map.get(DEFAULT_LANGUAGE);
-        if (translations != null) {
-            return Optional.ofNullable(translations.get(key));
-        }
+        if (translations != null) return Optional.ofNullable(translations.get(key));
 
         return Optional.empty();
     }
 
     public static boolean isTranslatableItem(@Nullable SlimefunItem item) {
-        if (item == null) {
-            return false;
-        }
+        if (item == null) return false;
         return ReflectionUtils.hasMethod(item.getClass(), Methods.TRANSLATABLE_ITEM_GET_NAME, Methods.TRANSLATABLE_ITEM_GET_NAME_PARAMS)
             && ReflectionUtils.hasMethod(item.getClass(), Methods.TRANSLATABLE_ITEM_GET_LORE, Methods.TRANSLATABLE_ITEM_GET_LORE_PARAMS);
     }
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Keys.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Keys.java
new file mode 100644
index 0000000..32892ec
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Keys.java
@@ -0,0 +1,16 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant;
+
+import org.bukkit.NamespacedKey;
+
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import lombok.experimental.UtilityClass;
+
+@UtilityClass
+public final class Keys {
+    public final NamespacedKey SEARCH_DISPLAY = AbstractAddon.createKey("search_display");
+    // Slimefun keys
+    public final NamespacedKey SLIMEFUN_ITEM = new NamespacedKey("slimefun", "slimefun_item");
+    public final NamespacedKey SLIMEFUN_ITEM_GROUP = new NamespacedKey("slimefun", "item_group");
+    // zAuctionHouse keys
+    public final NamespacedKey AUCTION_ITEM = new NamespacedKey("zauctionhousev3", "zauctionhouse-item");
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Methods.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Methods.java
similarity index 58%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Methods.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Methods.java
index 2f5c823..8e4b745 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Methods.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Methods.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils.constant;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant;
 
 import java.util.List;
 
@@ -17,21 +17,21 @@ public final class Methods {
     /**
      * Method name of a SlimefunItem that provides translated item name.
      */
-    public static final String TRANSLATABLE_ITEM_GET_NAME = "getTranslatedItemName";
+    public final String TRANSLATABLE_ITEM_GET_NAME = "getTranslatedItemName";
     /**
      * Method parameters of a SlimefunItem that provides translated item name.
      * <p>
      * player, lang, item, originalName
      */
-    public static final Class<?>[] TRANSLATABLE_ITEM_GET_NAME_PARAMS = new Class[] {Player.class, String.class, ItemStack.class, String.class};
+    public final Class<?>[] TRANSLATABLE_ITEM_GET_NAME_PARAMS = new Class[]{Player.class, String.class, ItemStack.class, String.class};
     /**
      * Method name of a SlimefunItem that provides translated item lore.
      */
-    public static final String TRANSLATABLE_ITEM_GET_LORE = "getTranslatedItemLore";
+    public final String TRANSLATABLE_ITEM_GET_LORE = "getTranslatedItemLore";
     /**
      * Method parameters of a SlimefunItem that provides translated item lore.
      * <p>
      * player, lang, item, originalLore
      */
-    public static final Class<?>[] TRANSLATABLE_ITEM_GET_LORE_PARAMS = new Class[] {Player.class, String.class, ItemStack.class, List.class};
+    public final Class<?>[] TRANSLATABLE_ITEM_GET_LORE_PARAMS = new Class[]{Player.class, String.class, ItemStack.class, List.class};
 }
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Patterns.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Patterns.java
new file mode 100644
index 0000000..d32436e
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Patterns.java
@@ -0,0 +1,12 @@
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant;
+
+import java.util.regex.Pattern;
+
+import lombok.experimental.UtilityClass;
+
+@UtilityClass
+public final class Patterns {
+    public final Pattern MINECRAFT_NAMESPACEDKEY = Pattern.compile("minecraft:[a-z0-9/._-]+");
+    public final Pattern SFT_TAG = Pattern.compile("#sft:[a-z_]+");
+    public final Pattern SFT_TAG_CONFIG = Pattern.compile("sft:[a-z_]+");
+}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Permissions.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Permissions.java
similarity index 90%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Permissions.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Permissions.java
index fe93b51..98ca900 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Permissions.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/constant/Permissions.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils.constant;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant;
 
 import javax.annotation.Nonnull;
 
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/tags/SlimefunTranslationTag.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/tags/SlimefunTranslationTag.java
similarity index 76%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/tags/SlimefunTranslationTag.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/tags/SlimefunTranslationTag.java
index e36876d..c85f8b1 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/tags/SlimefunTranslationTag.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/tags/SlimefunTranslationTag.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils.tags;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.tags;
 
 import java.util.Collections;
 import java.util.EnumSet;
@@ -18,8 +18,9 @@ import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Tag;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.exceptions.TagMisconfigurationException;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.exceptions.TagMisconfigurationException;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 
 /**
  * Tags for some materials.
@@ -140,9 +141,7 @@ public enum SlimefunTranslationTag implements Tag<Material> {
     private static final Map<String, SlimefunTranslationTag> nameLookup = new HashMap<>();
 
     static {
-        for (SlimefunTranslationTag tag : cachedValues) {
-            nameLookup.put(tag.name(), tag);
-        }
+        for (SlimefunTranslationTag tag : cachedValues) nameLookup.put(tag.name(), tag);
     }
 
     private final NamespacedKey key;
@@ -150,16 +149,14 @@ public enum SlimefunTranslationTag implements Tag<Material> {
     private final Set<Tag<Material>> additionalTags = new HashSet<>();
 
     SlimefunTranslationTag() {
-        this.key = new NamespacedKey(SlimefunTranslation.getInstance(), name().toLowerCase(Locale.ROOT));
+        this.key = AbstractAddon.createKey(name().toLowerCase(Locale.ROOT));
     }
 
     /**
      * Reload all tags.
      */
     public static void reloadAll() {
-        for (SlimefunTranslationTag tag : cachedValues) {
-            tag.reload();
-        }
+        for (SlimefunTranslationTag tag : cachedValues) tag.reload();
     }
 
     /**
@@ -188,7 +185,7 @@ public enum SlimefunTranslationTag implements Tag<Material> {
                 additionalTags.addAll(additionalTagSet);
             });
         } catch (TagMisconfigurationException ex) {
-            SlimefunTranslation.log(Level.SEVERE, ex, "An error has occurred while trying to load SlimefunTranslationTag: " + name());
+            LogUtils.log(Level.SEVERE, "An error has occurred while trying to load SlimefunTranslationTag: " + name(), ex);
         }
     }
 
@@ -200,14 +197,9 @@ public enum SlimefunTranslationTag implements Tag<Material> {
 
     @Override
     public boolean isTagged(@Nonnull Material material) {
-        if (materials.contains(material)) {
-            return true;
-        } else {
-            for (Tag<Material> tag : additionalTags) {
-                if (tag.isTagged(material)) {
-                    return true;
-                }
-            }
+        if (materials.contains(material)) return true;
+        else {
+            for (Tag<Material> tag : additionalTags) if (tag.isTagged(material)) return true;
 
             return false;
         }
@@ -216,25 +208,19 @@ public enum SlimefunTranslationTag implements Tag<Material> {
     @Nonnull
     @Override
     public Set<Material> getValues() {
-        if (additionalTags.isEmpty()) {
-            return Collections.unmodifiableSet(materials);
-        } else {
+        if (additionalTags.isEmpty()) return Collections.unmodifiableSet(materials);
+        else {
             Set<Material> values = EnumSet.noneOf(Material.class);
             values.addAll(materials);
 
-            for (Tag<Material> tag : additionalTags) {
-                values.addAll(tag.getValues());
-            }
+            for (Tag<Material> tag : additionalTags) values.addAll(tag.getValues());
 
             return values;
         }
     }
 
     public boolean isEmpty() {
-        if (!materials.isEmpty()) {
-            return false;
-        } else {
-            return getValues().isEmpty();
-        }
+        if (!materials.isEmpty()) return false;
+        else return getValues().isEmpty();
     }
 }
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/tags/TagParser.java b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/tags/TagParser.java
similarity index 76%
rename from src/main/java/net/guizhanss/slimefuntranslation/utils/tags/TagParser.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/tags/TagParser.java
index 39570a3..0e861aa 100644
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/tags/TagParser.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/slimefuntranslation/utils/tags/TagParser.java
@@ -1,4 +1,4 @@
-package net.guizhanss.slimefuntranslation.utils.tags;
+package id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.tags;
 
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -27,9 +27,9 @@ import org.bukkit.Tag;
 
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.CommonPatterns;
 
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.api.exceptions.TagMisconfigurationException;
-import net.guizhanss.slimefuntranslation.utils.constant.Patterns;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.api.exceptions.TagMisconfigurationException;
+import id.universenetwork.sfa_loader.addons.slimefuntranslation.utils.constant.Patterns;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
 
 /**
  * The {@link TagParser} is responsible for parsing a JSON file into a {@link SlimefunTranslationTag}.
@@ -62,12 +62,12 @@ class TagParser implements Keyed {
      *                                      {@link Material} or {@link Tag} could be found
      */
     public void parse(@Nonnull BiConsumer<Set<Material>, Set<Tag<Material>>> callback) throws TagMisconfigurationException {
-        String path = "/tags/" + key.getKey() + ".json";
+        String path = "addons-config/SlimefunTranslation/tags/" + key.getKey() + ".json";
         Set<Material> materials = EnumSet.noneOf(Material.class);
         Set<Tag<Material>> tags = new HashSet<>();
 
         try {
-            final InputStream stream = SlimefunTranslation.class.getResourceAsStream(path);
+            final InputStream stream = AbstractAddon.getInstance().getResource(path);
             JsonReader reader = new JsonReader(new InputStreamReader(stream, StandardCharsets.UTF_8));
             JsonObject root = new JsonParser().parse(reader).getAsJsonObject();
             JsonElement child = root.get("values");
@@ -76,17 +76,15 @@ class TagParser implements Keyed {
                 JsonArray values = child.getAsJsonArray();
 
                 for (JsonElement element : values) {
-                    if (element instanceof JsonPrimitive primitive && primitive.isString()) {
-                        parseString(element.getAsString(), materials, tags);
-                    } else {
+                    if (element instanceof JsonPrimitive) {
+                        JsonPrimitive primitive = (JsonPrimitive) element;
+                        if (primitive.isString()) parseString(element.getAsString(), materials, tags);
+                    } else
                         throw new TagMisconfigurationException(key, "Unexpected value format: " + element.getClass().getSimpleName() + " - " + element);
-                    }
                 }
 
                 callback.accept(materials, tags);
-            } else {
-                throw new TagMisconfigurationException(key, "No values array specified");
-            }
+            } else throw new TagMisconfigurationException(key, "No values array specified");
         } catch (NullPointerException | IllegalStateException | JsonParseException x) {
             throw new TagMisconfigurationException(key, x);
         }
@@ -97,18 +95,13 @@ class TagParser implements Keyed {
         if (Patterns.MINECRAFT_NAMESPACEDKEY.matcher(value).matches()) {
             Material material = Material.matchMaterial(value);
 
-            if (material != null) {
-                materials.add(material);
-            }
+            if (material != null) materials.add(material);
         } else if (Patterns.SFT_TAG.matcher(value).matches()) {
             String keyValue = CommonPatterns.COLON.split(value)[1].toUpperCase(Locale.ROOT);
             SlimefunTranslationTag tag = SlimefunTranslationTag.getTag(keyValue);
 
-            if (tag != null) {
-                tags.add(tag);
-            } else {
-                throw new TagMisconfigurationException(key, "SlimefunTranslationTag not exist: " + keyValue);
-            }
+            if (tag != null) tags.add(tag);
+            else throw new TagMisconfigurationException(key, "SlimefunTranslationTag not exist: " + keyValue);
         }
     }
 
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/SlimefunTranslation.java b/src/main/java/net/guizhanss/slimefuntranslation/SlimefunTranslation.java
deleted file mode 100644
index 5f8314d..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/SlimefunTranslation.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package net.guizhanss.slimefuntranslation;
-
-import java.io.File;
-import java.lang.reflect.Method;
-import java.util.logging.Level;
-
-import javax.annotation.Nonnull;
-
-import com.google.common.base.Preconditions;
-
-import org.bukkit.plugin.Plugin;
-
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.BlobBuildUpdater;
-
-import net.guizhanss.guizhanlib.slimefun.addon.AbstractAddon;
-import net.guizhanss.guizhanlib.updater.GuizhanBuildsUpdater;
-import net.guizhanss.slimefuntranslation.core.Registry;
-import net.guizhanss.slimefuntranslation.core.services.CommandService;
-import net.guizhanss.slimefuntranslation.core.services.ConfigurationService;
-import net.guizhanss.slimefuntranslation.core.services.IntegrationService;
-import net.guizhanss.slimefuntranslation.core.services.ListenerService;
-import net.guizhanss.slimefuntranslation.core.services.TranslationService;
-import net.guizhanss.slimefuntranslation.core.services.UserService;
-import net.guizhanss.slimefuntranslation.utils.tags.SlimefunTranslationTag;
-
-import org.bstats.bukkit.Metrics;
-
-public final class SlimefunTranslation extends AbstractAddon {
-
-    private ConfigurationService configService;
-    private Registry registry;
-    private UserService userService;
-    private TranslationService translationService;
-    private IntegrationService integrationService;
-    private boolean debugEnabled = false;
-
-    public SlimefunTranslation() {
-        super("ybw0014", "SlimefunTranslation", "master", "auto-update");
-    }
-
-    private static SlimefunTranslation inst() {
-        return getInstance();
-    }
-
-    @Nonnull
-    public static ConfigurationService getConfigService() {
-        return inst().configService;
-    }
-
-    @Nonnull
-    public static Registry getRegistry() {
-        return inst().registry;
-    }
-
-    @Nonnull
-    public static UserService getUserService() {
-        return inst().userService;
-    }
-
-    @Nonnull
-    public static TranslationService getTranslationService() {
-        return inst().translationService;
-    }
-
-    @Nonnull
-    public static IntegrationService getIntegrationService() {
-        return inst().integrationService;
-    }
-
-    public static void debug(@Nonnull String message, @Nonnull Object... args) {
-        Preconditions.checkNotNull(message, "message cannot be null");
-
-        if (inst().debugEnabled) {
-            inst().getLogger().log(Level.INFO, "[DEBUG] " + message, args);
-        }
-    }
-
-    @Override
-    public void enable() {
-        log(Level.INFO, "====================");
-        log(Level.INFO, "Slimefun Translation");
-        log(Level.INFO, "     by ybw0014     ");
-        log(Level.INFO, "====================");
-
-        // tags
-        SlimefunTranslationTag.reloadAll();
-
-        // config
-        configService = new ConfigurationService(this);
-
-        // registry
-        registry = new Registry();
-
-        // debug
-        debugEnabled = configService.isDebug();
-
-        // other services
-        userService = new UserService();
-        translationService = new TranslationService(this, getFile());
-        new CommandService(this);
-        new ListenerService(this);
-        integrationService = new IntegrationService(this);
-
-        // metrics
-        setupMetrics();
-    }
-
-    @Override
-    public void disable() {
-    }
-
-    private void setupMetrics() {
-        new Metrics(this, 20496);
-    }
-
-    @Override
-    protected void autoUpdate() {
-        if (getPluginVersion().startsWith("Dev")) {
-            new BlobBuildUpdater(this, getFile(), getGithubRepo()).start();
-        } else if (getPluginVersion().startsWith("Build")) {
-            try {
-                // use updater in lib plugin
-                Class<?> clazz = Class.forName("net.guizhanss.guizhanlibplugin.updater.GuizhanUpdater");
-                Method updaterStart = clazz.getDeclaredMethod("start", Plugin.class, File.class, String.class, String.class, String.class);
-                updaterStart.invoke(null, this, getFile(), getGithubUser(), getGithubRepo(), getGithubBranch());
-            } catch (Exception ignored) {
-                // use updater in lib
-                new GuizhanBuildsUpdater(this, getFile(), getGithubUser(), getGithubRepo(), getGithubBranch()).start();
-            }
-        }
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/exceptions/package-info.java b/src/main/java/net/guizhanss/slimefuntranslation/api/exceptions/package-info.java
deleted file mode 100644
index 83bb3ab..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/exceptions/package-info.java
+++ /dev/null
@@ -1,4 +0,0 @@
-/**
- * This package contains exceptions provided by SlimefunTranslation.
- */
-package net.guizhanss.slimefuntranslation.api.exceptions;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/package-info.java b/src/main/java/net/guizhanss/slimefuntranslation/api/translation/package-info.java
deleted file mode 100644
index 3814a65..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/api/translation/package-info.java
+++ /dev/null
@@ -1,4 +0,0 @@
-/**
- * This package contains translation related classes and interfaces.
- */
-package net.guizhanss.slimefuntranslation.api.translation;
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/AbstractSubCommand.java b/src/main/java/net/guizhanss/slimefuntranslation/core/commands/AbstractSubCommand.java
deleted file mode 100644
index c1bc800..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/AbstractSubCommand.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.commands;
-
-import java.util.function.BiFunction;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.command.CommandSender;
-
-import net.guizhanss.guizhanlib.minecraft.commands.AbstractCommand;
-import net.guizhanss.guizhanlib.minecraft.commands.SubCommand;
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.factories.MessageFactory;
-
-/**
- * A {@link SubCommand} that contains some common utility methods.
- *
- * @author ybw0014
- */
-public abstract class AbstractSubCommand extends SubCommand {
-    protected static final MessageFactory MESSAGE_FACTORY = MessageFactory.get(SlimefunTranslation.getInstance());
-
-    protected AbstractSubCommand(
-        @Nullable AbstractCommand parent,
-        @Nonnull String name,
-        @Nonnull BiFunction<AbstractCommand, CommandSender, String> description,
-        @Nonnull String usage,
-        @Nonnull SubCommand... subCommands
-    ) {
-        super(parent, name, description, usage, subCommands);
-    }
-
-    @ParametersAreNonnullByDefault
-    protected AbstractSubCommand(
-        String name,
-        BiFunction<AbstractCommand, CommandSender, String> description,
-        String usage,
-        SubCommand... subCommands
-    ) {
-        super(name, description, usage, subCommands);
-    }
-
-    @Nonnull
-    @ParametersAreNonnullByDefault
-    protected static String getDescription(String key, CommandSender sender) {
-        return MESSAGE_FACTORY.getMessage(sender, "commands." + key + ".description");
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/MainCommand.java b/src/main/java/net/guizhanss/slimefuntranslation/core/commands/MainCommand.java
deleted file mode 100644
index 4299b6f..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/MainCommand.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.commands;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.command.CommandSender;
-import org.bukkit.command.PluginCommand;
-
-import net.guizhanss.guizhanlib.minecraft.commands.BaseCommand;
-import net.guizhanss.slimefuntranslation.core.commands.subcommands.IdCommand;
-import net.guizhanss.slimefuntranslation.core.commands.subcommands.SearchCommand;
-import net.guizhanss.slimefuntranslation.core.commands.subcommands.TranslationCommand;
-
-public class MainCommand extends BaseCommand {
-    public MainCommand(@Nonnull PluginCommand command) {
-        super(command, (cmd, sender) -> "", "<subcommand>");
-        addSubCommand(new IdCommand(this));
-        addSubCommand(new SearchCommand(this));
-        addSubCommand(new TranslationCommand(this));
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    public void onExecute(CommandSender sender, String[] args) {
-        // we have subcommands so this method doesn't need to do anything
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/IdCommand.java b/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/IdCommand.java
deleted file mode 100644
index 180bb80..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/IdCommand.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.commands.subcommands;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import net.guizhanss.guizhanlib.minecraft.commands.AbstractCommand;
-import net.guizhanss.slimefuntranslation.core.commands.AbstractSubCommand;
-import net.guizhanss.slimefuntranslation.utils.SlimefunItemUtils;
-import net.guizhanss.slimefuntranslation.utils.constant.Permissions;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.chat.ClickEvent;
-import net.md_5.bungee.api.chat.HoverEvent;
-import net.md_5.bungee.api.chat.TextComponent;
-import net.md_5.bungee.api.chat.hover.content.Text;
-
-/**
- * The subcommand that displays the ID of the Slimefun item in the player's hand.
- * <p>
- * Code from StarWishsama's Slimefun4 fork:
- * <a href="https://github.com/StarWishsama/Slimefun4/blob/master/src/main/java/io/github/thebusybiscuit/slimefun4/core/commands/subcommands/ItemIdCommand.java">Link</a>
- */
-public class IdCommand extends AbstractSubCommand {
-    public IdCommand(@Nonnull AbstractCommand parent) {
-        super(parent, "id", (cmd, sender) -> getDescription("id", sender), "");
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    public void onExecute(CommandSender sender, String[] args) {
-        if (!(sender instanceof Player p)) {
-            MESSAGE_FACTORY.sendMessage(sender, "player-only");
-            return;
-        }
-        if (!Permissions.COMMAND_ID.hasPermission(p)) {
-            MESSAGE_FACTORY.sendMessage(sender, "no-permission");
-            return;
-        }
-
-        ItemStack item = p.getInventory().getItemInMainHand();
-        if (item.getType().isAir()) {
-            MESSAGE_FACTORY.sendMessage(sender, "commands.id.not-sf-item");
-            return;
-        }
-
-        String sfId = SlimefunItemUtils.getId(item);
-        if (sfId == null) {
-            MESSAGE_FACTORY.sendMessage(sender, "commands.id.not-sf-item");
-            return;
-        }
-
-        TextComponent msg = new TextComponent(MESSAGE_FACTORY.getMessage(sender, "commands.id.result"));
-        msg.setColor(ChatColor.YELLOW);
-        String clickToCopy = MESSAGE_FACTORY.getMessage(sender, "commands.id.click-to-copy");
-        var idMsg = new TextComponent(sfId);
-        idMsg.setUnderlined(true);
-        idMsg.setItalic(true);
-        idMsg.setColor(ChatColor.GRAY);
-        idMsg.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text(clickToCopy)));
-        idMsg.setClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, sfId));
-        sender.spigot().sendMessage(msg, idMsg);
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/TranslationCommand.java b/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/TranslationCommand.java
deleted file mode 100644
index f16628d..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/TranslationCommand.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.commands.subcommands;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.command.CommandSender;
-
-import net.guizhanss.guizhanlib.minecraft.commands.AbstractCommand;
-import net.guizhanss.slimefuntranslation.core.commands.AbstractSubCommand;
-import net.guizhanss.slimefuntranslation.core.commands.subcommands.translation.ExtractCommand;
-import net.guizhanss.slimefuntranslation.core.commands.subcommands.translation.GenerateCommand;
-import net.guizhanss.slimefuntranslation.core.commands.subcommands.translation.ReloadCommand;
-
-public class TranslationCommand extends AbstractSubCommand {
-    public TranslationCommand(@Nonnull AbstractCommand parent) {
-        super(parent, "translation", (cmd, sender) -> getDescription("translation", sender), "<subcommands>");
-        addSubCommand(new ExtractCommand(this));
-        addSubCommand(new GenerateCommand(this));
-        addSubCommand(new ReloadCommand(this));
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    public void onExecute(CommandSender sender, String[] args) {
-        // we have subcommands so this method doesn't need to do anything
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java b/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java
deleted file mode 100644
index 8318866..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ExtractCommand.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.commands.subcommands.translation;
-
-import java.util.List;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.command.CommandSender;
-
-import net.guizhanss.guizhanlib.minecraft.commands.AbstractCommand;
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.commands.AbstractSubCommand;
-import net.guizhanss.slimefuntranslation.utils.constant.Permissions;
-
-public class ExtractCommand extends AbstractSubCommand {
-
-    public ExtractCommand(@Nonnull AbstractCommand parent) {
-        super(parent, "extract", (cmd, sender) -> getDescription("translation.extract", sender), "<replace:true/false>");
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    public void onExecute(CommandSender sender, String[] args) {
-        if (!Permissions.COMMAND_TRANSLATION_EXTRACT.hasPermission(sender)) {
-            MESSAGE_FACTORY.sendMessage(sender, "no-permission");
-            return;
-        }
-
-        boolean replace = Boolean.parseBoolean(args[0]);
-        SlimefunTranslation.getTranslationService().extractTranslations(replace);
-        MESSAGE_FACTORY.sendMessage(sender, "commands.translation.extract.success", replace);
-    }
-
-    @Override
-    @Nonnull
-    @ParametersAreNonnullByDefault
-    public List<String> onTab(CommandSender sender, String[] args) {
-        if (args.length == 1) {
-            return List.of("true", "false");
-        } else {
-            return List.of();
-        }
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java b/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java
deleted file mode 100644
index cd025d5..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/GenerateCommand.java
+++ /dev/null
@@ -1,143 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.commands.subcommands.translation;
-
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.NamespacedKey;
-import org.bukkit.command.CommandSender;
-import org.bukkit.plugin.Plugin;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.groups.FlexItemGroup;
-import io.github.thebusybiscuit.slimefun4.core.services.localization.Language;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-
-import net.guizhanss.guizhanlib.minecraft.commands.AbstractCommand;
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.commands.AbstractSubCommand;
-import net.guizhanss.slimefuntranslation.utils.constant.Permissions;
-
-public class GenerateCommand extends AbstractSubCommand {
-    public GenerateCommand(@Nonnull AbstractCommand parent) {
-        super(parent, "generate", (cmd, sender) -> getDescription("translation.generate", sender), "<addon> <language> [itemgroup]");
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    public void onExecute(CommandSender sender, String[] args) {
-        if (!Permissions.COMMAND_TRANSLATION_GENERATE.hasPermission(sender)) {
-            MESSAGE_FACTORY.sendMessage(sender, "no-permission");
-            return;
-        }
-
-        String addonName = args[0];
-        String language = args[1];
-
-        if (!SlimefunTranslation.getInstance().getServer().getPluginManager().isPluginEnabled(addonName)) {
-            MESSAGE_FACTORY.sendMessage(sender, "commands.translation.generate.invalid-addon", addonName);
-            return;
-        }
-
-        Set<String> exportIds = new HashSet<>();
-
-        if (args.length == 3) {
-            // export every item in the item group
-            ItemGroup itemGroup = findItemGroup(addonName.toLowerCase(Locale.ROOT), args[2]);
-            if (itemGroup == null) {
-                MESSAGE_FACTORY.sendMessage(sender, "commands.translation.generate.invalid-itemgroup", args[2]);
-                return;
-            }
-            exportIds.addAll(
-                Slimefun.getRegistry().getAllSlimefunItems().stream()
-                    .filter(item -> item.getItemGroup().equals(itemGroup))
-                    .map(SlimefunItem::getId)
-                    .toList()
-            );
-        } else {
-            // export every item in the addon
-            exportIds.addAll(
-                Slimefun.getRegistry().getAllSlimefunItems().stream()
-                    .filter(item -> item.getItemGroup().getKey().getNamespace().equals(addonName.toLowerCase(Locale.ROOT)))
-                    .map(SlimefunItem::getId)
-                    .toList()
-            );
-        }
-
-        final String fileName = SlimefunTranslation.getTranslationService().exportItemTranslations(language, addonName, exportIds);
-        MESSAGE_FACTORY.sendMessage(sender, "commands.translation.generate.success", fileName, language);
-    }
-
-    @Override
-    @Nonnull
-    @ParametersAreNonnullByDefault
-    public List<String> onTab(CommandSender sender, String[] args) {
-        if (args.length == 1) {
-            return getAddons(args[0]);
-        } else if (args.length == 2) {
-            return getLanguages(args[1]);
-        } else if (args.length == 3) {
-            return getItemGroups(args[2], args[0]);
-        } else {
-            return List.of();
-        }
-    }
-
-    @Nonnull
-    private List<String> getAddons(@Nonnull String filter) {
-        Collection<Plugin> addons = Slimefun.getInstalledAddons();
-
-        List<String> result = addons.stream()
-            .filter(addon -> addon.getName().toLowerCase(Locale.ROOT).startsWith(filter.toLowerCase(Locale.ROOT)))
-            .map(Plugin::getName)
-            .collect(Collectors.toList());
-        result.add(0, "Slimefun");
-        return result;
-    }
-
-    @Nonnull
-    private List<String> getLanguages(@Nonnull String filter) {
-        Set<String> result = new HashSet<>();
-
-        result.addAll(Slimefun.getLocalization().getLanguages().stream().map(Language::getId).toList());
-        result.addAll(SlimefunTranslation.getRegistry().getLanguages());
-
-        return result.stream()
-            .filter(lang -> lang.toLowerCase(Locale.ROOT).startsWith(filter.toLowerCase(Locale.ROOT)))
-            .toList();
-    }
-
-    @Nonnull
-    @ParametersAreNonnullByDefault
-    private List<String> getItemGroups(String filter, String addon) {
-        Collection<ItemGroup> itemGroups = Slimefun.getRegistry().getAllItemGroups();
-
-        return itemGroups.stream()
-            .filter(itemGroup -> !(itemGroup instanceof FlexItemGroup))
-            .map(itemGroup -> itemGroup.getKey().toString())
-            .filter(key -> key.startsWith(addon.toLowerCase(Locale.ROOT) + ":"))
-            .filter(key -> key.toLowerCase(Locale.ROOT).startsWith(filter.toLowerCase(Locale.ROOT)))
-            .map(key -> key.split(":")[1])
-            .toList();
-    }
-
-    @Nullable
-    @ParametersAreNonnullByDefault
-    private ItemGroup findItemGroup(String namespace, String key) {
-        for (ItemGroup itemGroup : Slimefun.getRegistry().getAllItemGroups()) {
-            NamespacedKey itemGroupKey = itemGroup.getKey();
-            if (itemGroupKey.getNamespace().equals(namespace) && itemGroupKey.getKey().equals(key)) {
-                return itemGroup;
-            }
-        }
-        return null;
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java b/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java
deleted file mode 100644
index 5af80ee..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/commands/subcommands/translation/ReloadCommand.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.commands.subcommands.translation;
-
-import java.util.List;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.command.CommandSender;
-
-import net.guizhanss.guizhanlib.minecraft.commands.AbstractCommand;
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.commands.AbstractSubCommand;
-import net.guizhanss.slimefuntranslation.utils.constant.Permissions;
-
-public class ReloadCommand extends AbstractSubCommand {
-    public ReloadCommand(@Nonnull AbstractCommand parent) {
-        super(parent, "reload", (cmd, sender) -> getDescription("translation.reload", sender), "");
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    public void onExecute(CommandSender sender, String[] args) {
-        var translationService = SlimefunTranslation.getTranslationService();
-        if (!Permissions.COMMAND_TRANSLATION_RELOAD.hasPermission(sender)) {
-            MESSAGE_FACTORY.sendMessage(sender, "no-permission");
-            return;
-        }
-
-        translationService.clearTranslations();
-        translationService.callLoadEvent();
-        MESSAGE_FACTORY.sendMessage(sender, "commands.translation.reload.success");
-    }
-
-    @Override
-    @Nonnull
-    @ParametersAreNonnullByDefault
-    public List<String> onTab(CommandSender sender, String[] args) {
-        return List.of();
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/services/CommandService.java b/src/main/java/net/guizhanss/slimefuntranslation/core/services/CommandService.java
deleted file mode 100644
index ff83568..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/services/CommandService.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.services;
-
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.commands.MainCommand;
-
-public final class CommandService {
-    public CommandService(SlimefunTranslation plugin) {
-        new MainCommand(plugin.getCommand("sftranslation")).register();
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/services/IntegrationService.java b/src/main/java/net/guizhanss/slimefuntranslation/core/services/IntegrationService.java
deleted file mode 100644
index 8f8de2b..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/services/IntegrationService.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.services;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.logging.Level;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import me.clip.placeholderapi.PlaceholderAPI;
-
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
-import net.guizhanss.slimefuntranslation.integrations.placeholders.SlimefunLoreExpansion;
-
-import lombok.AccessLevel;
-import lombok.Getter;
-
-@Getter
-public final class IntegrationService {
-
-    @Getter(AccessLevel.NONE)
-    private final SlimefunTranslation plugin;
-
-    private final boolean protocolLibEnabled;
-    private final boolean placeholderAPIEnabled;
-
-    public IntegrationService(SlimefunTranslation plugin) {
-        this.plugin = plugin;
-
-        protocolLibEnabled = isEnabled("ProtocolLib");
-        placeholderAPIEnabled = isEnabled("PlaceholderAPI");
-
-        if (protocolLibEnabled) {
-            SlimefunTranslation.log(Level.INFO, "ProtocolLib found, enabling packet listener...");
-            new PacketListenerService();
-        } else {
-            SlimefunTranslation.log(Level.SEVERE, "ProtocolLib not found, this plugin will not be fully functional...");
-        }
-
-        if (placeholderAPIEnabled) {
-            SlimefunTranslation.log(Level.INFO, "PlaceholderAPI found, enabling placeholders...");
-            new SlimefunLoreExpansion().register();
-        } else {
-            SlimefunTranslation.log(Level.SEVERE, "PlaceholderAPI not found, this plugin will not be fully functional...");
-        }
-    }
-
-    private boolean isEnabled(@Nonnull String pluginName) {
-        return plugin.getServer().getPluginManager().isPluginEnabled(pluginName);
-    }
-
-    @Nonnull
-    @ParametersAreNonnullByDefault
-    public String applyPlaceholders(User user, String str) {
-        if (!placeholderAPIEnabled) {
-            return str;
-        }
-
-        return PlaceholderAPI.setPlaceholders(user.getPlayer(), str);
-    }
-
-    @Nonnull
-    @ParametersAreNonnullByDefault
-    public List<String> applyPlaceholders(User user, List<String> list) {
-        if (!placeholderAPIEnabled) {
-            return list;
-        }
-
-        List<String> result = new ArrayList<>();
-        for (String str : list) {
-            result.add(applyPlaceholders(user, str));
-        }
-        return result;
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/services/ListenerService.java b/src/main/java/net/guizhanss/slimefuntranslation/core/services/ListenerService.java
deleted file mode 100644
index 4a0efec..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/services/ListenerService.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.services;
-
-import javax.annotation.Nonnull;
-
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.implementation.listeners.PlayerJoinListener;
-import net.guizhanss.slimefuntranslation.implementation.listeners.PlayerQuitListener;
-import net.guizhanss.slimefuntranslation.implementation.listeners.SlimefunBlockRightClickListener;
-import net.guizhanss.slimefuntranslation.implementation.listeners.SlimefunItemLoadListener;
-import net.guizhanss.slimefuntranslation.implementation.listeners.SlimefunLanguageChangeListener;
-import net.guizhanss.slimefuntranslation.implementation.listeners.TranslationsLoadListener;
-
-public final class ListenerService {
-    public ListenerService(@Nonnull SlimefunTranslation plugin) {
-        new PlayerJoinListener(plugin);
-        new PlayerQuitListener(plugin);
-        new SlimefunBlockRightClickListener(plugin);
-        new SlimefunItemLoadListener(plugin);
-        new SlimefunLanguageChangeListener(plugin);
-        new TranslationsLoadListener(plugin);
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/core/services/PacketListenerService.java b/src/main/java/net/guizhanss/slimefuntranslation/core/services/PacketListenerService.java
deleted file mode 100644
index 4edaa8b..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/core/services/PacketListenerService.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package net.guizhanss.slimefuntranslation.core.services;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.AListener;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.client.items.SetCreativeSlotListener;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.client.items.WindowClickListener;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.EntityMetadataListener;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.OpenWindowListener;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.items.SetSlotListener;
-import net.guizhanss.slimefuntranslation.implementation.packetlisteners.server.items.WindowItemListener;
-
-public final class PacketListenerService {
-
-    public PacketListenerService() {
-        List<AListener> packetListeners = new ArrayList<>();
-
-        packetListeners.add(new SetCreativeSlotListener());
-        packetListeners.add(new WindowClickListener());
-        packetListeners.add(new SetSlotListener());
-        packetListeners.add(new WindowItemListener());
-        packetListeners.add(new EntityMetadataListener());
-        packetListeners.add(new OpenWindowListener());
-
-        for (var listener : packetListeners) {
-            listener.register();
-        }
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java b/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java
deleted file mode 100644
index 821aa50..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/implementation/listeners/SlimefunBlockRightClickListener.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package net.guizhanss.slimefuntranslation.implementation.listeners;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.event.EventHandler;
-import org.bukkit.event.Listener;
-
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
-
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-import net.guizhanss.slimefuntranslation.core.users.User;
-
-public class SlimefunBlockRightClickListener implements Listener {
-    public SlimefunBlockRightClickListener(@Nonnull SlimefunTranslation plugin) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-    }
-
-    @EventHandler
-    public void onRightClick(@Nonnull PlayerRightClickEvent e) {
-        User user = SlimefunTranslation.getUserService().getUser(e.getPlayer());
-        var sfBlock = e.getSlimefunBlock();
-        user.setRecentClickedBlock(sfBlock.orElse(null));
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/ColorUtils.java b/src/main/java/net/guizhanss/slimefuntranslation/utils/ColorUtils.java
deleted file mode 100644
index 256f834..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/ColorUtils.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package net.guizhanss.slimefuntranslation.utils;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.stream.Collectors;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.ChatColor;
-
-import lombok.experimental.UtilityClass;
-
-@UtilityClass
-public final class ColorUtils {
-    @Nonnull
-    public static String color(@Nonnull String str) {
-        return ChatColor.translateAlternateColorCodes('&', str);
-    }
-
-    @Nonnull
-    public static List<String> color(@Nonnull List<String> str) {
-        return str.stream().map(ColorUtils::color).collect(Collectors.toCollection(ArrayList::new));
-    }
-
-    @Nonnull
-    public static String useAltCode(@Nonnull String str) {
-        return str.replace('§', '&');
-    }
-
-    @Nonnull
-    public static List<String> useAltCode(@Nonnull List<String> str) {
-        return str.stream().map(ColorUtils::useAltCode).collect(Collectors.toCollection(ArrayList::new));
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/GeneralUtils.java b/src/main/java/net/guizhanss/slimefuntranslation/utils/GeneralUtils.java
deleted file mode 100644
index ed85431..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/GeneralUtils.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package net.guizhanss.slimefuntranslation.utils;
-
-import lombok.experimental.UtilityClass;
-
-@UtilityClass
-public final class GeneralUtils {
-    public static boolean isAllNull(Object... objects) {
-        for (var object : objects) {
-            if (object != null) {
-                return false;
-            }
-        }
-        return true;
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Keys.java b/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Keys.java
deleted file mode 100644
index 4d1fbd0..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Keys.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package net.guizhanss.slimefuntranslation.utils.constant;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.NamespacedKey;
-
-import net.guizhanss.slimefuntranslation.SlimefunTranslation;
-
-import lombok.experimental.UtilityClass;
-
-@SuppressWarnings("deprecation")
-@UtilityClass
-public final class Keys {
-    public static final NamespacedKey SEARCH_DISPLAY = create("search_display");
-    // slimefun keys
-    public static final NamespacedKey SLIMEFUN_ITEM = new NamespacedKey("slimefun", "slimefun_item");
-    public static final NamespacedKey SLIMEFUN_ITEM_GROUP = new NamespacedKey("slimefun", "item_group");
-    // zAuctionHouse keys
-    public static final NamespacedKey AUCTION_ITEM = new NamespacedKey("zauctionhousev3", "zauctionhouse-item");
-
-    @Nonnull
-    private static NamespacedKey create(@Nonnull String key) {
-        return new NamespacedKey(SlimefunTranslation.getInstance(), key);
-    }
-}
diff --git a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Patterns.java b/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Patterns.java
deleted file mode 100644
index 07635b0..0000000
--- a/src/main/java/net/guizhanss/slimefuntranslation/utils/constant/Patterns.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package net.guizhanss.slimefuntranslation.utils.constant;
-
-import java.util.regex.Pattern;
-
-import lombok.experimental.UtilityClass;
-
-@UtilityClass
-public final class Patterns {
-    public static final Pattern MINECRAFT_NAMESPACEDKEY = Pattern.compile("minecraft:[a-z0-9/._-]+");
-    public static final Pattern SFT_TAG = Pattern.compile("#sft:[a-z_]+");
-    public static final Pattern SFT_TAG_CONFIG = Pattern.compile("sft:[a-z_]+");
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/addons-config/SlimefunTranslation/config.yml
similarity index 100%
rename from src/main/resources/config.yml
rename to src/main/resources/addons-config/SlimefunTranslation/config.yml
diff --git a/src/main/resources/tags/axe.json b/src/main/resources/addons-config/SlimefunTranslation/tags/axe.json
similarity index 100%
rename from src/main/resources/tags/axe.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/axe.json
diff --git a/src/main/resources/tags/boots.json b/src/main/resources/addons-config/SlimefunTranslation/tags/boots.json
similarity index 100%
rename from src/main/resources/tags/boots.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/boots.json
diff --git a/src/main/resources/tags/bow.json b/src/main/resources/addons-config/SlimefunTranslation/tags/bow.json
similarity index 100%
rename from src/main/resources/tags/bow.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/bow.json
diff --git a/src/main/resources/tags/carpet.json b/src/main/resources/addons-config/SlimefunTranslation/tags/carpet.json
similarity index 100%
rename from src/main/resources/tags/carpet.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/carpet.json
diff --git a/src/main/resources/tags/chest_slot.json b/src/main/resources/addons-config/SlimefunTranslation/tags/chest_slot.json
similarity index 100%
rename from src/main/resources/tags/chest_slot.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/chest_slot.json
diff --git a/src/main/resources/tags/chestplate.json b/src/main/resources/addons-config/SlimefunTranslation/tags/chestplate.json
similarity index 100%
rename from src/main/resources/tags/chestplate.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/chestplate.json
diff --git a/src/main/resources/tags/feet_slot.json b/src/main/resources/addons-config/SlimefunTranslation/tags/feet_slot.json
similarity index 100%
rename from src/main/resources/tags/feet_slot.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/feet_slot.json
diff --git a/src/main/resources/tags/fishing_rod.json b/src/main/resources/addons-config/SlimefunTranslation/tags/fishing_rod.json
similarity index 100%
rename from src/main/resources/tags/fishing_rod.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/fishing_rod.json
diff --git a/src/main/resources/tags/hand_slot.json b/src/main/resources/addons-config/SlimefunTranslation/tags/hand_slot.json
similarity index 100%
rename from src/main/resources/tags/hand_slot.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/hand_slot.json
diff --git a/src/main/resources/tags/head.json b/src/main/resources/addons-config/SlimefunTranslation/tags/head.json
similarity index 100%
rename from src/main/resources/tags/head.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/head.json
diff --git a/src/main/resources/tags/head_slot.json b/src/main/resources/addons-config/SlimefunTranslation/tags/head_slot.json
similarity index 100%
rename from src/main/resources/tags/head_slot.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/head_slot.json
diff --git a/src/main/resources/tags/helmet.json b/src/main/resources/addons-config/SlimefunTranslation/tags/helmet.json
similarity index 100%
rename from src/main/resources/tags/helmet.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/helmet.json
diff --git a/src/main/resources/tags/hoe.json b/src/main/resources/addons-config/SlimefunTranslation/tags/hoe.json
similarity index 100%
rename from src/main/resources/tags/hoe.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/hoe.json
diff --git a/src/main/resources/tags/horse_armor.json b/src/main/resources/addons-config/SlimefunTranslation/tags/horse_armor.json
similarity index 100%
rename from src/main/resources/tags/horse_armor.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/horse_armor.json
diff --git a/src/main/resources/tags/leggings.json b/src/main/resources/addons-config/SlimefunTranslation/tags/leggings.json
similarity index 100%
rename from src/main/resources/tags/leggings.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/leggings.json
diff --git a/src/main/resources/tags/legs_slot.json b/src/main/resources/addons-config/SlimefunTranslation/tags/legs_slot.json
similarity index 100%
rename from src/main/resources/tags/legs_slot.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/legs_slot.json
diff --git a/src/main/resources/tags/off_hand_slot.json b/src/main/resources/addons-config/SlimefunTranslation/tags/off_hand_slot.json
similarity index 100%
rename from src/main/resources/tags/off_hand_slot.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/off_hand_slot.json
diff --git a/src/main/resources/tags/pickaxe.json b/src/main/resources/addons-config/SlimefunTranslation/tags/pickaxe.json
similarity index 100%
rename from src/main/resources/tags/pickaxe.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/pickaxe.json
diff --git a/src/main/resources/tags/shovel.json b/src/main/resources/addons-config/SlimefunTranslation/tags/shovel.json
similarity index 100%
rename from src/main/resources/tags/shovel.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/shovel.json
diff --git a/src/main/resources/tags/sword.json b/src/main/resources/addons-config/SlimefunTranslation/tags/sword.json
similarity index 100%
rename from src/main/resources/tags/sword.json
rename to src/main/resources/addons-config/SlimefunTranslation/tags/sword.json
diff --git a/src/main/resources/translations/en/messages.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/messages.yml
similarity index 100%
rename from src/main/resources/translations/en/messages.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/messages.yml
diff --git a/src/main/resources/translations/en/slimefun/armor.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/armor.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/armor.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/armor.yml
diff --git a/src/main/resources/translations/en/slimefun/basic-machines.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/basic-machines.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/basic-machines.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/basic-machines.yml
diff --git a/src/main/resources/translations/en/slimefun/cargo-management.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/cargo-management.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/cargo-management.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/cargo-management.yml
diff --git a/src/main/resources/translations/en/slimefun/energy-and-electricity.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/energy-and-electricity.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/energy-and-electricity.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/energy-and-electricity.yml
diff --git a/src/main/resources/translations/en/slimefun/food.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/food.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/food.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/food.yml
diff --git a/src/main/resources/translations/en/slimefun/gps.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/gps.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/gps.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/gps.yml
diff --git a/src/main/resources/translations/en/slimefun/guide.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/guide.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/guide.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/guide.yml
diff --git a/src/main/resources/translations/en/slimefun/lore-builder.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/lore-builder.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/lore-builder.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/lore-builder.yml
diff --git a/src/main/resources/translations/en/slimefun/magical-armor.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/magical-armor.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/magical-armor.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/magical-armor.yml
diff --git a/src/main/resources/translations/en/slimefun/magical-gadgets.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/magical-gadgets.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/magical-gadgets.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/magical-gadgets.yml
diff --git a/src/main/resources/translations/en/slimefun/magical-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/magical-items.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/magical-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/magical-items.yml
diff --git a/src/main/resources/translations/en/slimefun/miscellaneous-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/miscellaneous-items.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/miscellaneous-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/miscellaneous-items.yml
diff --git a/src/main/resources/translations/en/slimefun/programmable-androids.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/programmable-androids.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/programmable-androids.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/programmable-androids.yml
diff --git a/src/main/resources/translations/en/slimefun/resources.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/resources.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/resources.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/resources.yml
diff --git a/src/main/resources/translations/en/slimefun/secret-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/secret-items.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/secret-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/secret-items.yml
diff --git a/src/main/resources/translations/en/slimefun/talismans-1.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/talismans-1.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/talismans-1.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/talismans-1.yml
diff --git a/src/main/resources/translations/en/slimefun/talismans-2.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/talismans-2.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/talismans-2.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/talismans-2.yml
diff --git a/src/main/resources/translations/en/slimefun/technical-components.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/technical-components.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/technical-components.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/technical-components.yml
diff --git a/src/main/resources/translations/en/slimefun/technical-gadgets.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/technical-gadgets.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/technical-gadgets.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/technical-gadgets.yml
diff --git a/src/main/resources/translations/en/slimefun/tools.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/tools.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/tools.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/tools.yml
diff --git a/src/main/resources/translations/en/slimefun/ui.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/ui.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/ui.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/ui.yml
diff --git a/src/main/resources/translations/en/slimefun/useful-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/useful-items.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/useful-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/useful-items.yml
diff --git a/src/main/resources/translations/en/slimefun/weapons.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/weapons.yml
similarity index 100%
rename from src/main/resources/translations/en/slimefun/weapons.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/en/slimefun/weapons.yml
diff --git a/src/main/resources/translations/ja/slimefun/armor.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/armor.yml
similarity index 100%
rename from src/main/resources/translations/ja/slimefun/armor.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/armor.yml
diff --git a/src/main/resources/translations/ja/slimefun/food.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/food.yml
similarity index 100%
rename from src/main/resources/translations/ja/slimefun/food.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/food.yml
diff --git a/src/main/resources/translations/ja/slimefun/miscellaneous-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/miscellaneous-items.yml
similarity index 100%
rename from src/main/resources/translations/ja/slimefun/miscellaneous-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/miscellaneous-items.yml
diff --git a/src/main/resources/translations/ja/slimefun/technical-components.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/technical-components.yml
similarity index 100%
rename from src/main/resources/translations/ja/slimefun/technical-components.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/ja/slimefun/technical-components.yml
diff --git a/src/main/resources/translations/vi/messages.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/messages.yml
similarity index 100%
rename from src/main/resources/translations/vi/messages.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/messages.yml
diff --git a/src/main/resources/translations/vi/slimefun/armor.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/armor.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/armor.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/armor.yml
diff --git a/src/main/resources/translations/vi/slimefun/basic-machines.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/basic-machines.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/basic-machines.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/basic-machines.yml
diff --git a/src/main/resources/translations/vi/slimefun/cargo-management.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/cargo-management.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/cargo-management.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/cargo-management.yml
diff --git a/src/main/resources/translations/vi/slimefun/energy-and-electricity.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/energy-and-electricity.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/energy-and-electricity.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/energy-and-electricity.yml
diff --git a/src/main/resources/translations/vi/slimefun/food.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/food.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/food.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/food.yml
diff --git a/src/main/resources/translations/vi/slimefun/gps.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/gps.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/gps.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/gps.yml
diff --git a/src/main/resources/translations/vi/slimefun/guide.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/guide.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/guide.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/guide.yml
diff --git a/src/main/resources/translations/vi/slimefun/lore-builder.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/lore-builder.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/lore-builder.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/lore-builder.yml
diff --git a/src/main/resources/translations/vi/slimefun/magical-armor.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/magical-armor.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/magical-armor.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/magical-armor.yml
diff --git a/src/main/resources/translations/vi/slimefun/magical-gadgets.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/magical-gadgets.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/magical-gadgets.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/magical-gadgets.yml
diff --git a/src/main/resources/translations/vi/slimefun/magical-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/magical-items.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/magical-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/magical-items.yml
diff --git a/src/main/resources/translations/vi/slimefun/miscellaneous-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/miscellaneous-items.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/miscellaneous-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/miscellaneous-items.yml
diff --git a/src/main/resources/translations/vi/slimefun/programmable-androids.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/programmable-androids.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/programmable-androids.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/programmable-androids.yml
diff --git a/src/main/resources/translations/vi/slimefun/resources.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/resources.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/resources.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/resources.yml
diff --git a/src/main/resources/translations/vi/slimefun/secret-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/secret-items.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/secret-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/secret-items.yml
diff --git a/src/main/resources/translations/vi/slimefun/talismans-1.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/talismans-1.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/talismans-1.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/talismans-1.yml
diff --git a/src/main/resources/translations/vi/slimefun/talismans-2.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/talismans-2.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/talismans-2.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/talismans-2.yml
diff --git a/src/main/resources/translations/vi/slimefun/technical-components.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/technical-components.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/technical-components.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/technical-components.yml
diff --git a/src/main/resources/translations/vi/slimefun/technical-gadgets.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/technical-gadgets.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/technical-gadgets.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/technical-gadgets.yml
diff --git a/src/main/resources/translations/vi/slimefun/tools.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/tools.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/tools.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/tools.yml
diff --git a/src/main/resources/translations/vi/slimefun/ui.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/ui.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/ui.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/ui.yml
diff --git a/src/main/resources/translations/vi/slimefun/useful-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/useful-items.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/useful-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/useful-items.yml
diff --git a/src/main/resources/translations/vi/slimefun/weapons.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/weapons.yml
similarity index 100%
rename from src/main/resources/translations/vi/slimefun/weapons.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/vi/slimefun/weapons.yml
diff --git a/src/main/resources/translations/zh-Hans/messages.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/messages.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/messages.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/messages.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/armor.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/armor.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/armor.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/armor.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/basic-machines.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/basic-machines.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/basic-machines.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/basic-machines.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/cargo-management.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/cargo-management.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/cargo-management.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/cargo-management.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/energy-and-electricity.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/energy-and-electricity.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/energy-and-electricity.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/energy-and-electricity.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/food.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/food.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/food.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/food.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/gps.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/gps.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/gps.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/gps.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/guide.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/guide.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/guide.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/guide.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/lore-builder.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/lore-builder.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/lore-builder.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/lore-builder.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/magical-armor.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/magical-armor.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/magical-armor.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/magical-armor.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/magical-gadgets.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/magical-gadgets.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/magical-gadgets.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/magical-gadgets.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/magical-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/magical-items.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/magical-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/magical-items.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/miscellaneous-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/miscellaneous-items.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/miscellaneous-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/miscellaneous-items.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/programmable-androids.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/programmable-androids.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/programmable-androids.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/programmable-androids.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/resources.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/resources.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/resources.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/resources.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/secret-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/secret-items.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/secret-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/secret-items.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/talismans-1.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/talismans-1.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/talismans-1.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/talismans-1.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/talismans-2.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/talismans-2.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/talismans-2.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/talismans-2.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/technical-components.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/technical-components.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/technical-components.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/technical-components.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/technical-gadgets.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/technical-gadgets.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/technical-gadgets.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/technical-gadgets.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/tools.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/tools.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/tools.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/tools.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/ui.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/ui.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/ui.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/ui.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/useful-items.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/useful-items.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/useful-items.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/useful-items.yml
diff --git a/src/main/resources/translations/zh-Hans/slimefun/weapons.yml b/src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/weapons.yml
similarity index 100%
rename from src/main/resources/translations/zh-Hans/slimefun/weapons.yml
rename to src/main/resources/addons-config/SlimefunTranslation/translations/zh-Hans/slimefun/weapons.yml
-- 
2.44.0.windows.1

