From 759e126a0ba46dd90238981e1a3d0970999d79b7 Mon Sep 17 00:00:00 2001
From: ARVIN3108 <70049331+ARVIN3108@users.noreply.github.com>
Date: Sun, 31 Mar 2024 11:23:16 +0700
Subject: [PATCH] SFCalc

---
 README.md                                     | 10 +-
 pom.xml                                       | 86 ++----------------
 .../sfa_loader/addons/sfcalc/CalcCommand.java | 23 +++++
 .../sfa_loader/addons}/sfcalc/Calculator.java | 82 +++++++----------
 .../addons/sfcalc/NeededCommand.java          | 67 ++++++++++++++
 .../sfa_loader/addons}/sfcalc/SFCalc.java     | 62 ++++---------
 .../addons}/sfcalc/StringRegistry.java        | 26 ++----
 .../io/github/seggan/sfcalc/CalcCommand.java  | 91 -------------------
 .../github/seggan/sfcalc/SFCalcMetrics.java   | 54 -----------
 .../{ => addons-config/SFCalc}/config.yml     |  6 +-
 src/main/resources/plugin.yml                 | 13 ---
 11 files changed, 169 insertions(+), 351 deletions(-)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java
 rename src/main/java/{io/github/seggan => id/universenetwork/sfa_loader/addons}/sfcalc/Calculator.java (64%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java
 rename src/main/java/{io/github/seggan => id/universenetwork/sfa_loader/addons}/sfcalc/SFCalc.java (50%)
 rename src/main/java/{io/github/seggan => id/universenetwork/sfa_loader/addons}/sfcalc/StringRegistry.java (79%)
 delete mode 100644 src/main/java/io/github/seggan/sfcalc/CalcCommand.java
 delete mode 100644 src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java
 rename src/main/resources/{ => addons-config/SFCalc}/config.yml (94%)
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/README.md b/README.md
index b738bfd..4825e14 100644
--- a/README.md
+++ b/README.md
@@ -1,18 +1,20 @@
 # SFCalc
 A calculator for the plugin Slimefun. This is based off of john000708's SlimeCalculator.
 
-Find most recent build [here](https://blob.build/project/SFCalc/Dev).
+Find most recent build [here](https://thebusybiscuit.github.io/builds/Seggan/SFCalc/master).
 
 ## Usage
 
 This addon for Slimefun adds a new command: /sfcalc. This command can calculate how much basic slimefun resources you need to make the specified item.
 
-Usage: `/sfcalc [required: item] [optional: amount]`
+Usage: `/sfcalc calc [required: item] [optional: amount]`
 
 Item is the id of the item you want to craft. An item id is like this: "electric_motor", "carbonado", "solar_generator" (basic solar generator), etc. For tiered machines that are not lowest tier, add the tier number after the id. For example: "solar_generator_3" (carbonado solar generator), "lava_generator_2" (advanced lava generator), "carbon_press" (carbon press [tier 1]), etc.
 
 Amount is the number of items you want to craft. It defaults to 1 if you don't specify any amount.
 
-Minecraft version: 1.16+
+Using `/sfcalc needed` instead of `/sfcalc calc` will show the items needed for the calculated item.
 
-Slimefun version: RC-36 or newer
\ No newline at end of file
+Minecraft version: 1.15-1.17
+
+Slimefun version: RC-20 or newer
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index 7ce30c7..9fc1a64 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,12 +4,17 @@
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
 
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>UNOFFICIAL</version>
+    </parent>
+
     <groupId>io.github.seggan.sfcalc</groupId>
     <artifactId>SFCalc</artifactId>
     <version>UNOFFICIAL</version>
 
     <properties>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <author>Seggan</author>
         <sonar.projectKey>Seggan_SFCalc</sonar.projectKey>
         <sonar.organization>seggan</sonar.organization>
@@ -17,63 +22,18 @@
     </properties>
 
     <build>
-        <finalName>${project.name}</finalName>
-        <defaultGoal>clean package -T 2.0C</defaultGoal>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>plugin.yml</include>
-                    <include>config.yml</include>
-                </includes>
-            </resource>
+        <finalName>${project.name} v${project.version}</finalName>
 
-            <resource>
-                <directory>${basedir}</directory>
-                <filtering>false</filtering>
-                <includes>
-                    <include>LICENSE.txt</include>
-                </includes>
-            </resource>
-        </resources>
         <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>3.1</version>
-                <configuration>
-                    <source>17</source>
-                    <target>17</target>
-                </configuration>
-            </plugin>
-
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-shade-plugin</artifactId>
-                <version>3.2.4</version>
-                <dependencies>
-                    <dependency>
-                        <groupId>org.ow2.asm</groupId>
-                        <artifactId>asm</artifactId>
-                        <version>9.1</version>
-                    </dependency>
-                    <dependency>
-                        <groupId>org.ow2.asm</groupId>
-                        <artifactId>asm-commons</artifactId>
-                        <version>9.1</version>
-                    </dependency>
-                </dependencies>
+                <version>3.5.2</version>
                 <configuration>
                     <relocations>
                         <relocation>
                             <pattern>io.github.seggan.errorreporter</pattern>
-                            <shadedPattern>io.github.seggan.sfcalc.errorreporter</shadedPattern>
-                        </relocation>
-                        <relocation>
-                            <pattern>org.bstats</pattern>
-                            <shadedPattern>io.github.seggan.sfcalc.bstats</shadedPattern>
+                            <shadedPattern>id.universenetwork.sfa_loader.libraries.errorreporter</shadedPattern>
                         </relocation>
                     </relocations>
                 </configuration>
@@ -90,11 +50,6 @@
     </build>
 
     <repositories>
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io/</url>
-        </repository>
-
         <repository>
             <id>spigot-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
@@ -109,20 +64,6 @@
             <scope>provided</scope>
         </dependency>
 
-        <dependency>
-            <groupId>org.bstats</groupId>
-            <artifactId>bstats-bukkit</artifactId>
-            <version>3.0.2</version>
-            <scope>compile</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.github.Slimefun</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>RC-36</version>
-            <scope>provided</scope>
-        </dependency>
-
         <dependency>
             <groupId>com.google.code.findbugs</groupId>
             <artifactId>jsr305</artifactId>
@@ -130,18 +71,11 @@
             <scope>provided</scope>
         </dependency>
 
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.20</version>
-            <scope>provided</scope>
-        </dependency>
-
         <dependency>
             <groupId>com.github.seggan</groupId>
             <artifactId>ErrorReporter-Java</artifactId>
             <version>1.1.0</version>
-            <scope>compile</scope>
+            <scope>provided</scope>
         </dependency>
     </dependencies>
 </project>
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java
new file mode 100644
index 0000000..2d2527e
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java
@@ -0,0 +1,23 @@
+package id.universenetwork.sfa_loader.addons.sfcalc;
+
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
+import org.incendo.cloud.annotation.specifier.Range;
+import org.incendo.cloud.annotations.Argument;
+import org.incendo.cloud.annotations.Command;
+import org.incendo.cloud.annotations.CommandDescription;
+import org.incendo.cloud.annotations.Default;
+
+@SuppressWarnings("unused")
+public class CalcCommand extends NeededCommand {
+    public CalcCommand(SFCalc ins) {
+        super(ins);
+    }
+
+    @Command("sfcalc|sfc calc <item> [amount]")
+    @CommandDescription("Calculates the resources needed for a given item")
+    public void cmdCalc(final SpecialCommandSender sender,
+                        final @Argument(value = "item", suggestions = "itemlist") String reqItem,
+                        final @Argument("amount") @Default("1") @Range(min = "1") long amount) {
+        execute(sender, reqItem, amount, false);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/Calculator.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/Calculator.java
similarity index 64%
rename from src/main/java/io/github/seggan/sfcalc/Calculator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/Calculator.java
index 3581cca..b896704 100644
--- a/src/main/java/io/github/seggan/sfcalc/Calculator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/Calculator.java
@@ -1,5 +1,7 @@
-package io.github.seggan.sfcalc;
+package id.universenetwork.sfa_loader.addons.sfcalc;
 
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
@@ -13,8 +15,6 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.util.*;
 
-import static io.github.seggan.sfcalc.StringRegistry.format;
-
 /**
  * The main class for the calculator
  *
@@ -22,12 +22,11 @@ import static io.github.seggan.sfcalc.StringRegistry.format;
  * @author TheBusyBiscuit
  */
 public class Calculator {
-    private final SFCalc plugin;
-
+    private final SFCalc instance;
     private final ThreadLocal<SlimefunItem> top = new ThreadLocal<>();
 
-    public Calculator(SFCalc pl) {
-        this.plugin = pl;
+    public Calculator(SFCalc ins) {
+        this.instance = ins;
     }
 
     /**
@@ -36,22 +35,19 @@ public class Calculator {
      * @param sender the sender to send the calculation to
      * @param item   the Slimefun item to calculate
      * @param amount the amount to calculate for
-     * @param needed whether it should print out how many are needed. Requires {@code sender instanceof Player}
+     * @param needed whether it should print out how many are needed. Requires {@code sender.isPlayer()}
      *               to be {@code true}
      */
-    public void printResults(@Nonnull CommandSender sender, @Nonnull SlimefunItem item, long amount, boolean needed) {
-        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
+    public void printResults(@Nonnull SpecialCommandSender sender, @Nonnull SlimefunItem item, long amount, boolean needed) {
+        Bukkit.getScheduler().runTaskAsynchronously(AbstractAddon.getInstance(), () -> {
             Map<ItemStack, Long> results = calculate(item, amount);
 
-            StringRegistry registry = plugin.getStringRegistry();
+            StringRegistry registry = instance.getStringRegistry();
 
             String header;
             String name = getBasicName(item.getItem());
-            if (amount == 1) {
-                header = format(registry.getHeaderString(), name);
-            } else {
-                header = format(registry.getHeaderAmountString(), name, amount);
-            }
+            if (amount == 1) header = StringRegistry.format(registry.getHeaderString(), name);
+            else header = StringRegistry.format(registry.getHeaderAmountString(), name, amount);
 
             sender.sendMessage(header);
 
@@ -59,8 +55,8 @@ public class Calculator {
             List<Map.Entry<ItemStack, Long>> entries = new ArrayList<>(results.entrySet());
             entries.sort(Comparator.comparingLong(Map.Entry::getValue));
 
-            if (needed && sender instanceof Player) {
-                Map<ItemStack, Long> inv = getInventoryAsItemList((Player) sender);
+            if (needed && sender.isPlayer()) {
+                Map<ItemStack, Long> inv = getInventoryAsItemList(sender.getPlayer());
 
                 for (Map.Entry<ItemStack, Long> entry : entries) {
                     long inInventory = inv.getOrDefault(entry.getKey(), 0L);
@@ -69,12 +65,10 @@ public class Calculator {
                     if (a < 0) a = 0;
                     String parsedAmount;
                     int maxStackSize = entry.getKey().getMaxStackSize();
-                    if (a <= maxStackSize) {
-                        parsedAmount = Long.toString(a);
-                    } else {
-                        parsedAmount = format(registry.getStackString(), a, (long) Math.floor((double) a / maxStackSize), maxStackSize, a % maxStackSize);
-                    }
-                    sender.sendMessage(format(registry.getNeededString(), getBasicName(entry.getKey()), parsedAmount));
+                    if (a <= maxStackSize) parsedAmount = Long.toString(a);
+                    else
+                        parsedAmount = StringRegistry.format(registry.getStackString(), a, (long) Math.floor((double) a / maxStackSize), maxStackSize, a % maxStackSize);
+                    sender.getSender().sendMessage(StringRegistry.format(registry.getNeededString(), getBasicName(entry.getKey()), parsedAmount));
                 }
             } else {
                 for (Map.Entry<ItemStack, Long> entry : entries) {
@@ -82,12 +76,10 @@ public class Calculator {
                     if (originalValues <= 0) continue;
                     String parsedAmount;
                     int maxStackSize = entry.getKey().getMaxStackSize();
-                    if (originalValues <= maxStackSize) {
-                        parsedAmount = Long.toString(originalValues);
-                    } else {
-                        parsedAmount = format(registry.getStackString(), originalValues, (long) Math.floor(originalValues / (float) maxStackSize), maxStackSize, originalValues % maxStackSize);
-                    }
-                    sender.sendMessage(format(registry.getAmountString(), getBasicName(entry.getKey()), parsedAmount));
+                    if (originalValues <= maxStackSize) parsedAmount = Long.toString(originalValues);
+                    else
+                        parsedAmount = StringRegistry.format(registry.getStackString(), originalValues, (long) Math.floor(originalValues / (float) maxStackSize), maxStackSize, originalValues % maxStackSize);
+                    sender.getSender().sendMessage(StringRegistry.format(registry.getAmountString(), getBasicName(entry.getKey()), parsedAmount));
                 }
             }
         });
@@ -99,9 +91,7 @@ public class Calculator {
 
         for (ItemStack item : player.getInventory().getContents()) {
             // if the Item is null or air, it will return null too
-            if (item == null || item.getType().isAir()) {
-                continue;
-            }
+            if (item == null || item.getType().isAir()) continue;
             add(inv, item, item.getAmount());
         }
 
@@ -113,7 +103,7 @@ public class Calculator {
         top.set(parent);
         Map<ItemStack, Long> result = new HashMap<>();
 
-        // uncraft the material first to bypass the blacklist
+        // Uncraft the material first to bypass the blacklist
         int multiplier = parent.getRecipeOutput().getAmount();
         long operations = (amount + multiplier - 1) / multiplier; // ceiling(needed/multiplier) but abusing fast ints
         for (ItemStack item : parent.getRecipe()) {
@@ -121,7 +111,7 @@ public class Calculator {
             add(result, item, item.getAmount() * operations);
         }
 
-        // uncraft submaterials
+        // Uncraft submaterials
         SlimefunItemStack next = getNextItem(result);
         while (next != null) {
             multiplier = next.getItem().getRecipeOutput().getAmount();
@@ -147,20 +137,16 @@ public class Calculator {
      */
     @Nullable
     private SlimefunItemStack getNextItem(Map<ItemStack, Long> map) {
-        for (Map.Entry<ItemStack, Long> entry : map.entrySet()) {
-            if (entry.getKey() instanceof SlimefunItemStack ingredient) {
-                if (
-                        ingredient.getItem() != null &&
-                                !plugin.getBlacklistedRecipes().contains(ingredient.getItem().getRecipeType()) &&
-                                !plugin.getBlacklistedIds().contains(ingredient.getItem().getId()) &&
-                                top.get() != ingredient.getItem()
-                ) {
-                    if (entry.getValue() > 0) {
-                        return ingredient;
-                    }
+        for (Map.Entry<ItemStack, Long> entry : map.entrySet())
+            if (entry.getKey() instanceof SlimefunItemStack) {
+                SlimefunItemStack ingredient = (SlimefunItemStack) entry.getKey();
+                if (ingredient.getItem() != null &&
+                        !instance.getBlacklistedRecipes().contains(ingredient.getItem().getRecipeType()) &&
+                        !instance.getBlacklistedIds().contains(ingredient.getItem().getId()) &&
+                        top.get() != ingredient.getItem()) {
+                    if (entry.getValue() > 0) return ingredient;
                 }
             }
-        }
         return null;
     }
 
@@ -174,4 +160,4 @@ public class Calculator {
     private String getBasicName(ItemStack stack) {
         return ChatColor.stripColor(ItemUtils.getItemName(stack));
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java
new file mode 100644
index 0000000..9436475
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java
@@ -0,0 +1,67 @@
+package id.universenetwork.sfa_loader.addons.sfcalc;
+
+import id.universenetwork.sfa_loader.objects.SpecialCommandSender;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import org.incendo.cloud.annotation.specifier.Range;
+import org.incendo.cloud.annotations.Argument;
+import org.incendo.cloud.annotations.Command;
+import org.incendo.cloud.annotations.CommandDescription;
+import org.incendo.cloud.annotations.Default;
+import org.incendo.cloud.annotations.suggestion.Suggestions;
+import org.incendo.cloud.context.CommandContext;
+
+import java.util.*;
+
+@SuppressWarnings("unused")
+class NeededCommand {
+    private static final Set<String> ids = new HashSet<>();
+    private final SFCalc instance;
+
+    public NeededCommand(SFCalc ins) {
+        this.instance = ins;
+    }
+
+    protected void execute(SpecialCommandSender sender, String reqItem, long amount, boolean needed) {
+        SFCalc.REPORTER.executeOrElseReport(() -> {
+            StringRegistry registry = instance.getStringRegistry();
+
+            if (!sender.isPlayer() && needed) {
+                sender.sendMessage(StringRegistry.format(registry.getNotAPlayerString()));
+                return;
+            }
+
+            SlimefunItem item = SlimefunItem.getById(reqItem.toUpperCase());
+
+            if (item == null) {
+                sender.sendMessage(StringRegistry.format(registry.getNoItemString()));
+                return;
+            }
+
+            instance.getCalc().printResults(sender, item, amount, needed);
+        });
+    }
+
+    @Command("sfcalc|sfc needed <item> [amount]")
+    @CommandDescription("Tells you how much more resources are needed")
+    public void cmdNeeded(final SpecialCommandSender sender,
+                          final @Argument(value = "item", suggestions = "itemlist") String reqItem,
+                          final @Argument("amount") @Default("1") @Range(min = "1") long amount) {
+        execute(sender, reqItem, amount, true);
+    }
+
+    @Suggestions("itemList")
+    public List<String> itemList(CommandContext<SpecialCommandSender> sender, String context) {
+        List<String> tabs = new ArrayList<>();
+
+        SFCalc.REPORTER.executeOrElseReport(() -> {
+            if (ids.isEmpty()) for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems())
+                ids.add(item.getId().toLowerCase(Locale.ROOT));
+
+
+            for (String id : ids) if (id.contains(context.toLowerCase(Locale.ROOT))) tabs.add(id);
+        });
+
+        return tabs;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/SFCalc.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/SFCalc.java
similarity index 50%
rename from src/main/java/io/github/seggan/sfcalc/SFCalc.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/SFCalc.java
index a88739d..b1693ec 100644
--- a/src/main/java/io/github/seggan/sfcalc/SFCalc.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/SFCalc.java
@@ -1,52 +1,43 @@
-package io.github.seggan.sfcalc;
+package id.universenetwork.sfa_loader.addons.sfcalc;
 
+import id.universenetwork.sfa_loader.annotations.AddonLibrary;
+import id.universenetwork.sfa_loader.managers.CommandManager;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
 import io.github.seggan.errorreporter.ErrorReporter;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.BlobBuildUpdater;
 import lombok.Getter;
-import org.bukkit.command.TabExecutor;
-import org.bukkit.event.Listener;
-import org.bukkit.plugin.java.JavaPlugin;
 
-import java.io.File;
 import java.util.HashSet;
 import java.util.Set;
 
 @Getter
-public class SFCalc extends JavaPlugin implements Listener {
-
+@AddonLibrary(
+        groupId = "com{}github{}seggan",
+        artifactId = "ErrorReporter-Java",
+        version = "1.1.0",
+        packageRelocation = "io{}github{}seggan{}errorreporter"
+)
+public class SFCalc extends AddonTemplate {
     public static ErrorReporter REPORTER;
 
-    private static SFCalc instance;
     private final Set<RecipeType> blacklistedRecipes = new HashSet<>();
     private final Set<String> blacklistedIds = new HashSet<>();
-    private Calculator calculator;
+    private Calculator calc;
     private StringRegistry stringRegistry;
 
     @Override
-    public void onEnable() {
-        instance = this;
-
-        new BlobBuildUpdater(this, getFile(), "SFCalc").start();
-
+    public void onLoad() {
         REPORTER = new ErrorReporter("Seggan", "SFCalc", () ->
-                "SFCalc " +
-                        getDescription().getVersion() +
-                        "\nSlimefun " +
-                        Slimefun.getVersion() +
-                        "\nMinecraft " +
-                        Slimefun.getMinecraftVersion().getName()
+                "SFCalc DEV - 37 (git dfc0fc41)\nSlimefun " + Slimefun.getVersion() +
+                        "\nMinecraft " + Slimefun.getMinecraftVersion().getName()
         );
-        REPORTER.preSend(obj -> !getDescription().getVersion().equals("UNOFFICIAL"));
 
         REPORTER.setOn(getConfig().getBoolean("error-reports", true));
 
         REPORTER.executeOrElseReport(() -> {
-            new SFCalcMetrics(this);
-
-            stringRegistry = new StringRegistry(getConfig(), new File(getDataFolder(), "config.yml"));
-            calculator = new Calculator(this);
+            stringRegistry = new StringRegistry(getConfig());
+            calc = new Calculator(this);
 
             blacklistedRecipes.add(RecipeType.ORE_WASHER);
             blacklistedRecipes.add(RecipeType.GEO_MINER);
@@ -61,23 +52,10 @@ public class SFCalc extends JavaPlugin implements Listener {
             blacklistedIds.add("FALLEN_METEOR");
             blacklistedIds.add("RUBBER");
             blacklistedIds.add("VOID_BIT");
-            if (getConfig().getBoolean("options.use-carbon-instead-of-coal", true)) {
+            if (getConfig().getBoolean("options.use-carbon-instead-of-coal", true))
                 blacklistedIds.add("CARBON");
-            }
 
-            TabExecutor calcCommand = new CalcCommand(this);
-            getCommand("sfcalc").setExecutor(calcCommand);
-            getCommand("sfcalc").setTabCompleter(calcCommand);
+            CommandManager.register(new CalcCommand(this));
         });
     }
-
-    @Override
-    public void onDisable() {
-        instance = null;
-    }
-
-    public Calculator getCalc() {
-        return calculator;
-    }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/StringRegistry.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/StringRegistry.java
similarity index 79%
rename from src/main/java/io/github/seggan/sfcalc/StringRegistry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/StringRegistry.java
index e3ea036..bf1fe93 100644
--- a/src/main/java/io/github/seggan/sfcalc/StringRegistry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/StringRegistry.java
@@ -1,20 +1,16 @@
-package io.github.seggan.sfcalc;
+package id.universenetwork.sfa_loader.addons.sfcalc;
 
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AddonConfig;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
 import lombok.Getter;
 import org.apache.commons.lang.Validate;
-import org.bukkit.configuration.file.FileConfiguration;
 
 import javax.annotation.Nonnull;
-import java.io.File;
-import java.io.IOException;
-import java.io.UncheckedIOException;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.regex.Pattern;
 
 @Getter
 public final class StringRegistry {
-
     private final Pattern percentPattern = Pattern.compile("(%s|%d)");
     private final String headerString;
     private final String headerAmountString;
@@ -28,7 +24,7 @@ public final class StringRegistry {
     private final String notAPlayerString;
     private final String invalidNumberString;
 
-    StringRegistry(FileConfiguration config, File file) {
+    StringRegistry(AddonConfig config) {
         headerString = reformat(config, "header-string", 1);
         headerAmountString = reformat(config, "header-amount-string", 2, 1);
         stackString = reformat(config, "stack-string", 1, 2, 3, 4);
@@ -41,11 +37,7 @@ public final class StringRegistry {
         notAPlayerString = config.getString("not-a-player-string");
         invalidNumberString = config.getString("invalid-number-string");
 
-        try {
-            config.save(file);
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
-        }
+        config.save();
     }
 
     @Nonnull
@@ -55,19 +47,18 @@ public final class StringRegistry {
 
         String finalString = formatString;
 
-        for (int i = 0; i < objects.length; i++) {
+        for (int i = 0; i < objects.length; i++)
             finalString = finalString.replace("%" + (i + 1), objects[i].toString());
-        }
 
         return ChatColors.color(finalString);
     }
 
-    private String reformat(FileConfiguration config, String key, int... numbers) {
+    private String reformat(AddonConfig config, String key, int... numbers) {
         String val = config.getString(key);
 
         AtomicInteger i = new AtomicInteger();
         String formatted = this.percentPattern.matcher(val)
-            .replaceAll(matchResult -> "%" + numbers[i.getAndIncrement()]);
+                .replaceAll("%" + numbers[i.getAndIncrement()]);
 
         if (i.get() == numbers.length) {
             config.set(key, formatted);
@@ -76,5 +67,4 @@ public final class StringRegistry {
 
         return val;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/CalcCommand.java b/src/main/java/io/github/seggan/sfcalc/CalcCommand.java
deleted file mode 100644
index fb9107c..0000000
--- a/src/main/java/io/github/seggan/sfcalc/CalcCommand.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package io.github.seggan.sfcalc;
-
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.CommonPatterns;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandSender;
-import org.bukkit.command.TabExecutor;
-
-import javax.annotation.Nonnull;
-import java.util.*;
-
-import static io.github.seggan.sfcalc.StringRegistry.format;
-
-public class CalcCommand implements TabExecutor {
-
-    private static final Set<String> ids = new HashSet<>();
-    private final SFCalc plugin;
-
-    public CalcCommand(SFCalc pl) {
-        this.plugin = pl;
-    }
-
-    @Override
-    public boolean onCommand(@Nonnull CommandSender sender, @Nonnull Command command, @Nonnull String alias, @Nonnull String[] args) {
-        SFCalc.REPORTER.executeOrElseReport(() -> {
-            long amount;
-            String reqItem;
-            SlimefunItem item;
-
-            StringRegistry registry = plugin.getStringRegistry();
-
-            if (args.length > 2 || args.length == 0) {
-                return;
-            }
-
-            reqItem = args[0];
-
-            if (args.length == 1) {
-                amount = 1;
-            } else if (!CommonPatterns.NUMERIC.matcher(args[1]).matches()) {
-                sender.sendMessage(format(registry.getNotANumberString()));
-                return;
-            } else {
-                try {
-                    amount = Long.parseLong(args[1]);
-                    if (amount == 0 || amount > Integer.MAX_VALUE) {
-                        sender.sendMessage(format(registry.getInvalidNumberString()));
-                        return;
-                    }
-                } catch (NumberFormatException e) {
-                    sender.sendMessage(format(registry.getInvalidNumberString()));
-                    return;
-                }
-            }
-
-            item = SlimefunItem.getById(reqItem.toUpperCase(Locale.ROOT));
-
-            if (item == null) {
-                sender.sendMessage(format(registry.getNoItemString()));
-                return;
-            }
-
-            SFCalcMetrics.addItemSearched(item.getItemName());
-
-            plugin.getCalc().printResults(sender, item, amount, false);
-        });
-        return true;
-    }
-
-    @Override
-    public List<String> onTabComplete(@Nonnull CommandSender sender, @Nonnull Command command, @Nonnull String alias, @Nonnull String[] args) {
-        List<String> tabs = new ArrayList<>();
-        SFCalc.REPORTER.executeOrElseReport(() -> {
-            if (ids.isEmpty()) {
-                for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                    ids.add(item.getId().toLowerCase(Locale.ROOT));
-                }
-            }
-
-            if (args.length == 1) {
-                for (String id : ids) {
-                    if (id.contains(args[0].toLowerCase(Locale.ROOT))) {
-                        tabs.add(id);
-                    }
-                }
-            }
-        });
-        return tabs;
-    }
-}
diff --git a/src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java b/src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java
deleted file mode 100644
index a138aa0..0000000
--- a/src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package io.github.seggan.sfcalc;
-
-import io.github.thebusybiscuit.slimefun4.utils.ChatUtils;
-import org.bstats.bukkit.Metrics;
-import org.bstats.charts.AdvancedPie;
-import org.bstats.charts.SingleLineChart;
-
-import java.util.*;
-
-public class SFCalcMetrics extends Metrics {
-
-    private boolean sent = false;
-
-    private static final List<String> itemsSearched = new ArrayList<>();
-
-    public SFCalcMetrics(SFCalc plugin) {
-        super(plugin, 8812);
-
-        addCustomChart(new AdvancedPie("items_searched", () -> {
-            Map<String, Integer> result = new HashMap<>();
-            Set<String> itemSet = new HashSet<>(itemsSearched);
-
-            for (String item : itemSet) {
-                result.put(item, Collections.frequency(itemsSearched, item));
-            }
-
-            if (sent) {
-                sent = false;
-                itemsSearched.clear();
-            } else {
-                sent = true;
-            }
-
-            return result;
-        }));
-
-        addCustomChart(new SingleLineChart("searches", () -> {
-            int searches = itemsSearched.size();
-
-            if (sent) {
-                sent = false;
-                itemsSearched.clear();
-            } else {
-                sent = true;
-            }
-
-            return searches;
-        }));
-    }
-
-    public static void addItemSearched(String s) {
-        itemsSearched.add(ChatUtils.removeColorCodes(s));
-    }
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/addons-config/SFCalc/config.yml
similarity index 94%
rename from src/main/resources/config.yml
rename to src/main/resources/addons-config/SFCalc/config.yml
index 8ef45c8..545cc2b 100644
--- a/src/main/resources/config.yml
+++ b/src/main/resources/addons-config/SFCalc/config.yml
@@ -1,5 +1,3 @@
-# Enable auto updates to get the latest fixes
-auto-updates: true
 # Auto error reporting. Recommended to be true. No data other than error and
 # SFCalc/Slimefun/Minecraft version is collected
 error-reports: true
@@ -52,6 +50,4 @@ invalid-number-string: "&cInvalid number!"
 
 options:
   # Use carbon as a base material instead of coal in calculations
-  use-carbon-instead-of-coal: true
-
-
+  use-carbon-instead-of-coal: true
\ No newline at end of file
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index 48349f4..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,13 +0,0 @@
-name: SFCalc
-main: io.github.seggan.sfcalc.SFCalc
-version: ${version}
-author: Seggan
-depend: [Slimefun]
-api-version: 1.15
-
-commands:
-  sfcalc:
-    description: Base SFCalc command
-    usage: "Usage: /sfcalc calc <item> [amount]"
-    aliases:
-      - sfc
\ No newline at end of file
-- 
2.44.0.windows.1

