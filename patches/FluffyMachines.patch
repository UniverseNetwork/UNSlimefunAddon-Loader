From ab32a7985a1d633c68457e471751e8dce047c830 Mon Sep 17 00:00:00 2001
From: ARVIN3108 <70049331+ARVIN3108@users.noreply.github.com>
Date: Mon, 15 Apr 2024 06:10:11 +0700
Subject: [PATCH] FluffyMachines

---
 pom.xml                                       | 109 +--------
 .../fluffymachines/FluffyItemSetup.java       | 184 ++++++---------
 .../addons/fluffymachines/FluffyMachines.java |  89 ++++++++
 .../addons}/fluffymachines/items/Barrel.java  | 179 +++++----------
 .../items/EnderChestExtractionNode.java       |  62 ++----
 .../items/EnderChestInsertionNode.java        |  29 +--
 .../fluffymachines/items/FireproofRune.java   |  55 ++---
 .../fluffymachines/items/HelicopterHat.java   |  11 +-
 .../fluffymachines/items/MiniBarrel.java      |  17 +-
 .../items/tools/ACBUpgradeCard.java           |  31 ++-
 .../items/tools/AlternateBreakEvent.java      |   5 +-
 .../items/tools/CargoManipulator.java         |  72 ++----
 .../fluffymachines/items/tools/Dolly.java     |  92 +++-----
 .../items/tools/FluffyWrench.java             |  63 +++---
 .../fluffymachines/items/tools/Paxel.java     |  65 ++----
 .../items/tools/PortableCharger.java          |  65 ++----
 .../fluffymachines/items/tools/Scythe.java    |  34 ++-
 .../items/tools/UpgradedExplosivePickaxe.java |  14 +-
 .../items/tools/UpgradedExplosiveShovel.java  |  22 +-
 .../items/tools/UpgradedExplosiveTool.java    |  92 +++-----
 .../items/tools/UpgradedLumberAxe.java        |  52 ++---
 .../items/tools/WarpPadConfigurator.java      |  62 +++---
 .../items/tools/WateringCan.java              | 109 +++------
 .../listeners/KeyedCrafterListener.java       |  37 +--
 .../machines/AdvancedAutoDisenchanter.java    | 104 +++------
 .../machines/AdvancedChargingBench.java       |  28 +--
 .../machines/AlternateElevatorPlate.java      |  81 +++----
 .../machines/AutoAncientAltar.java            | 152 ++++---------
 .../machines/AutoArmorForge.java              |  14 ++
 .../machines/AutoCraftingTable.java           | 172 +++++---------
 .../machines/AutoEnhancedCraftingTable.java   |  10 +-
 .../machines/AutoMagicWorkbench.java          |  34 +--
 .../fluffymachines/machines/AutoTableSaw.java |  82 +++----
 .../machines/BackpackLoader.java              |  84 +++----
 .../machines/BackpackUnloader.java            |  55 ++---
 .../machines/ElectricDustFabricator.java      |  41 ++--
 .../machines/ElectricDustRecycler.java        |  24 +-
 .../fluffymachines/machines/SmartFactory.java | 113 +++-------
 .../fluffymachines/machines/WarpPad.java      |  21 +-
 .../machines/WaterSprinkler.java              |  80 +++----
 .../multiblocks/CrankGenerator.java           |  36 +--
 .../multiblocks/ExpDispenser.java             |  17 +-
 .../fluffymachines/multiblocks/Foundry.java   |  44 ++--
 .../multiblocks/components/GeneratorCore.java |   9 +-
 .../components/SuperheatedFurnace.java        | 203 ++++++-----------
 .../fluffymachines/objects/AutoCrafter.java   |  90 +++-----
 .../objects/DoubleHologramOwner.java          |  16 +-
 .../objects/NonHopperableBlock.java           |  13 +-
 .../fluffymachines/utils/CancelPlace.java     |   4 +
 .../fluffymachines/utils/Constants.java       |  21 +-
 .../fluffymachines/utils/EventUtils.java}     |  59 ++---
 .../fluffymachines/utils/FluffyItems.java     |  29 +--
 .../fluffymachines/utils/McMMOEvents.java     |  10 +-
 .../addons}/fluffymachines/utils/Utils.java   |  81 ++-----
 .../fluffymachines/FluffyMachines.java        | 210 ------------------
 .../machines/AutoArmorForge.java              |  15 --
 .../fluffymachines/utils/CancelPlace.java     |   4 -
 src/main/resources/config.yml                 |   3 -
 src/main/resources/plugin.yml                 |  31 ---
 59 files changed, 1184 insertions(+), 2356 deletions(-)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/FluffyItemSetup.java (81%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/Barrel.java (84%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/EnderChestExtractionNode.java (76%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/EnderChestInsertionNode.java (87%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/FireproofRune.java (78%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/HelicopterHat.java (60%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/MiniBarrel.java (90%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/ACBUpgradeCard.java (81%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/AlternateBreakEvent.java (77%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/CargoManipulator.java (84%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/Dolly.java (80%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/FluffyWrench.java (74%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/Paxel.java (73%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/PortableCharger.java (79%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/Scythe.java (75%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedExplosivePickaxe.java (78%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedExplosiveShovel.java (73%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedExplosiveTool.java (68%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedLumberAxe.java (78%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/WarpPadConfigurator.java (71%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/WateringCan.java (76%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/listeners/KeyedCrafterListener.java (83%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AdvancedAutoDisenchanter.java (87%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AdvancedChargingBench.java (87%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AlternateElevatorPlate.java (73%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoAncientAltar.java (79%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoArmorForge.java
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoCraftingTable.java (77%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoEnhancedCraftingTable.java (55%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoMagicWorkbench.java (51%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoTableSaw.java (83%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/BackpackLoader.java (81%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/BackpackUnloader.java (85%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/ElectricDustFabricator.java (79%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/ElectricDustRecycler.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/SmartFactory.java (84%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/WarpPad.java (85%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/WaterSprinkler.java (70%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/CrankGenerator.java (57%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/ExpDispenser.java (86%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/Foundry.java (69%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/components/GeneratorCore.java (82%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/components/SuperheatedFurnace.java (75%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/objects/AutoCrafter.java (86%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/objects/DoubleHologramOwner.java (93%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/objects/NonHopperableBlock.java (78%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/Constants.java (59%)
 rename src/main/java/{io/ncbpfluffybear/fluffymachines/utils/Events.java => id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java} (86%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/FluffyItems.java (94%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/McMMOEvents.java (83%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/Utils.java (71%)
 delete mode 100644 src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java
 delete mode 100644 src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoArmorForge.java
 delete mode 100644 src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java
 delete mode 100644 src/main/resources/config.yml
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/pom.xml b/pom.xml
index 66a2148..d4ddf37 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,34 +1,24 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
     <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>UNOFFICIAL</version>
+    </parent>
+
     <groupId>io.ncbpfluffybear</groupId>
     <artifactId>FluffyMachines</artifactId>
-    <version>1.0.0</version>
-
-    <properties>
-        <maven.compiler.source>16</maven.compiler.source>
-        <maven.compiler.target>16</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <version>1.2.0</version>
 
     <repositories>
-        <repository>
-            <id>paper-repo</id>
-            <url>https://repo.destroystokyo.com/repository/maven-public/</url>
-        </repository>
-
         <repository>
             <id>spigot-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
         </repository>
 
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io</url>
-        </repository>
-
         <repository>
             <id>CodeMC</id>
             <url>https://repo.codemc.org/repository/maven-public</url>
@@ -37,63 +27,6 @@
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <defaultGoal>clean package</defaultGoal>
-        <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>*</include>
-                </includes>
-            </resource>
-        </resources>
-
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>3.9.0</version>
-            </plugin>
-
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-shade-plugin</artifactId>
-                <version>3.5.1</version>
-                <configuration>
-                    <relocations>
-                        <relocation>
-                            <pattern>org.bstats</pattern>
-                            <shadedPattern>io.ncbpfluffybear.shaded.bstats</shadedPattern>
-                        </relocation>
-                        <relocation>
-                            <pattern>com.github.Slimefun-Addon-Community.extrautils</pattern>
-                            <shadedPattern>io.ncbpfluffybear.shaded.extrautils</shadedPattern>
-                        </relocation>
-                    </relocations>
-
-                    <!-- Exclude manifest files -->
-                    <filters>
-                        <filter>
-                            <artifact>*:*</artifact>
-                            <excludes>
-                                <exclude>META-INF/*.MF</exclude>
-                            </excludes>
-                        </filter>
-                    </filters>
-
-                </configuration>
-                <executions>
-                    <execution>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>shade</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
-        </plugins>
     </build>
 
     <dependencies>
@@ -104,13 +37,7 @@
             <scope>provided</scope>
         </dependency>
 
-        <dependency>
-            <groupId>io.github.TheBusyBiscuit</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>RC-37</version>
-            <scope>provided</scope>
-        </dependency>
-
+        <!--suppress VulnerableLibrariesLocal -->
         <dependency>
             <groupId>com.gmail.nossr50.mcMMO</groupId>
             <artifactId>mcMMO</artifactId>
@@ -138,24 +65,12 @@
             <version>3.0.2</version>
             <scope>provided</scope>
         </dependency>
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.20</version>
-            <scope>provided</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.bstats</groupId>
-            <artifactId>bstats-bukkit</artifactId>
-            <version>2.2.1</version>
-            <scope>compile</scope>
-        </dependency>
 
         <dependency>
             <groupId>com.github.Slimefun-Addon-Community</groupId>
             <artifactId>extrautils</artifactId>
-            <version>73e76ac06c</version>
+            <version>73e76ac</version>
+            <scope>provided</scope>
         </dependency>
     </dependencies>
-</project>
+</project>
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyItemSetup.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyItemSetup.java
similarity index 81%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/FluffyItemSetup.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyItemSetup.java
index 42146e0..548ea8b 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyItemSetup.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyItemSetup.java
@@ -1,5 +1,16 @@
-package io.ncbpfluffybear.fluffymachines;
-
+package id.universenetwork.sfa_loader.addons.fluffymachines;
+
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.CrankGenerator;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.ExpDispenser;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.Foundry;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.GeneratorCore;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.SuperheatedFurnace;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.SlimefunAddonInstance;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -8,123 +19,75 @@ import io.github.thebusybiscuit.slimefun4.api.items.groups.SubItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.ncbpfluffybear.fluffymachines.items.Barrel;
-import io.ncbpfluffybear.fluffymachines.items.EnderChestExtractionNode;
-import io.ncbpfluffybear.fluffymachines.items.EnderChestInsertionNode;
-import io.ncbpfluffybear.fluffymachines.items.FireproofRune;
-import io.ncbpfluffybear.fluffymachines.items.HelicopterHat;
-import io.ncbpfluffybear.fluffymachines.items.MiniBarrel;
-import io.ncbpfluffybear.fluffymachines.items.tools.ACBUpgradeCard;
-import io.ncbpfluffybear.fluffymachines.items.tools.CargoManipulator;
-import io.ncbpfluffybear.fluffymachines.items.tools.Dolly;
-import io.ncbpfluffybear.fluffymachines.items.tools.FluffyWrench;
-import io.ncbpfluffybear.fluffymachines.items.tools.Paxel;
-import io.ncbpfluffybear.fluffymachines.items.tools.PortableCharger;
-import io.ncbpfluffybear.fluffymachines.items.tools.Scythe;
-import io.ncbpfluffybear.fluffymachines.items.tools.UpgradedExplosivePickaxe;
-import io.ncbpfluffybear.fluffymachines.items.tools.UpgradedExplosiveShovel;
-import io.ncbpfluffybear.fluffymachines.items.tools.UpgradedLumberAxe;
-import io.ncbpfluffybear.fluffymachines.items.tools.WarpPadConfigurator;
-import io.ncbpfluffybear.fluffymachines.items.tools.WateringCan;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedAutoDisenchanter;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedChargingBench;
-import io.ncbpfluffybear.fluffymachines.machines.AlternateElevatorPlate;
-import io.ncbpfluffybear.fluffymachines.machines.AutoAncientAltar;
-import io.ncbpfluffybear.fluffymachines.machines.AutoArmorForge;
-import io.ncbpfluffybear.fluffymachines.machines.AutoCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.AutoEnhancedCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.AutoMagicWorkbench;
-import io.ncbpfluffybear.fluffymachines.machines.AutoTableSaw;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackLoader;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackUnloader;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustFabricator;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustRecycler;
-import io.ncbpfluffybear.fluffymachines.machines.SmartFactory;
-import io.ncbpfluffybear.fluffymachines.machines.WarpPad;
-import io.ncbpfluffybear.fluffymachines.machines.WaterSprinkler;
-import io.ncbpfluffybear.fluffymachines.multiblocks.CrankGenerator;
-import io.ncbpfluffybear.fluffymachines.multiblocks.ExpDispenser;
-import io.ncbpfluffybear.fluffymachines.multiblocks.Foundry;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.GeneratorCore;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.SuperheatedFurnace;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import javax.annotation.Nonnull;
 import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 
 public final class FluffyItemSetup {
-
     private static final SlimefunItemStack advancedCircuitBoard = SlimefunItems.ADVANCED_CIRCUIT_BOARD;
     private static final ItemStack orangeGlass = new ItemStack(Material.ORANGE_STAINED_GLASS);
     private static final ItemStack brownGlass = new ItemStack(Material.BROWN_STAINED_GLASS);
 
     // ItemGroups
     private static final NestedItemGroup fluffymachines = new NestedItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "fluffymachines"),
+            AbstractAddon.createKey("fluffymachines"),
             new CustomItemStack(Material.SMOKER, "&6Fluffy Machines")
     );
 
     private static final ItemGroup generators = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "generators"), fluffymachines,
+            AbstractAddon.createKey("generators"), fluffymachines,
             new CustomItemStack(Material.BLAST_FURNACE, "&aGenerators"), 1
     );
 
     private static final ItemGroup machines = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "machines"), fluffymachines,
+            AbstractAddon.createKey("machines"), fluffymachines,
             new CustomItemStack(Material.SMOKER, "&9Machines"), 2
     );
 
     private static final ItemGroup tools = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "tools"), fluffymachines,
+            AbstractAddon.createKey("tools"), fluffymachines,
             new CustomItemStack(Material.IRON_PICKAXE, "&bTools"), 3
     );
 
     private static final ItemGroup multiblocks = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "multiblocks"), fluffymachines,
+            AbstractAddon.createKey("multiblocks"), fluffymachines,
             new CustomItemStack(Material.BRICKS, "&cMultiblocks"), 4
     );
 
     private static final ItemGroup fluffybarrels = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "barrels"), fluffymachines,
+            AbstractAddon.createKey("barrels"), fluffymachines,
             new CustomItemStack(Material.BARREL, "&6Fluffy Barrels"), 5
     );
 
     private static final ItemGroup portableChargers = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "portable_chargers"), fluffymachines,
+            AbstractAddon.createKey("portable_chargers"), fluffymachines,
             new CustomItemStack(FluffyItems.CARBONADO_PORTABLE_CHARGER, "&ePortable Chargers"), 6
     );
 
     private static final ItemGroup wrenches = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "wrenches"), fluffymachines,
+            AbstractAddon.createKey("wrenches"), fluffymachines,
             new CustomItemStack(FluffyItems.CARBONADO_FLUFFY_WRENCH, "&7Wrenches"), 7
     );
 
     private static final ItemGroup cargo = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "cargo"), fluffymachines,
+            AbstractAddon.createKey("cargo"), fluffymachines,
             new CustomItemStack(Material.CHEST, "&3Cargo"), 8
     );
 
     private static final ItemGroup misc = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "misc"), fluffymachines,
+            AbstractAddon.createKey("misc"), fluffymachines,
             new CustomItemStack(Material.HOPPER, "&8Misc"), 9
     );
 
-    private FluffyItemSetup() {
-    }
-
-    public static void setupBarrels(@Nonnull FluffyMachines plugin) {
-
+    public static void setupBarrels() {
         new MiniBarrel(fluffybarrels, FluffyItems.MINI_FLUFFY_BARREL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.OAK_SLAB), new ItemStack(Material.BARREL), new ItemStack(Material.OAK_SLAB),
                 new ItemStack(Material.OAK_SLAB), new ItemStack(Material.BARREL), new ItemStack(Material.OAK_SLAB),
                 SlimefunItems.STEEL_PLATE, SlimefunItems.STEEL_PLATE, SlimefunItems.STEEL_PLATE
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         ItemStack previousBarrel = new ItemStack(Material.BARREL);
 
         for (Barrel.BarrelType barrelType : Barrel.BarrelType.values()) {
-
             SlimefunItemStack barrelStack = new SlimefunItemStack(barrelType.getKey(),
                     barrelType.getType(),
                     barrelType.getDisplayName(),
@@ -138,15 +101,13 @@ public final class FluffyItemSetup {
                     barrelType.getBorder(), previousBarrel, barrelType.getBorder(),
                     barrelType.getBorder(), previousBarrel, barrelType.getBorder(),
                     barrelType.getBorder(), barrelType.getReinforcement(), barrelType.getBorder()
-            }, barrelType.getDefaultSize()).register(plugin);
+            }, barrelType.getDefaultSize()).register(SlimefunAddonInstance.getSFAInstance());
 
             previousBarrel = barrelStack;
-
         }
     }
 
-    public static void setup(@Nonnull FluffyMachines plugin) {
-
+    public static void setup() {
         // Chargers
         new PortableCharger(portableChargers, FluffyItems.SMALL_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -154,7 +115,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.SMALL_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.BRICK), SlimefunItems.STEEL_PLATE, new ItemStack(Material.BRICK)},
                 PortableCharger.Type.SMALL.chargeCapacity, PortableCharger.Type.SMALL.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.MEDIUM_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -162,7 +123,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.MEDIUM_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.STEEL_PLATE, new ItemStack(Material.IRON_INGOT)},
                 PortableCharger.Type.MEDIUM.chargeCapacity, PortableCharger.Type.MEDIUM.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.BIG_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -170,7 +131,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.BIG_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.GOLD_INGOT), SlimefunItems.STEEL_PLATE, new ItemStack(Material.GOLD_INGOT)},
                 PortableCharger.Type.BIG.chargeCapacity, PortableCharger.Type.BIG.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.LARGE_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -178,7 +139,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.LARGE_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.NETHER_BRICK), SlimefunItems.STEEL_PLATE, new ItemStack(Material.NETHER_BRICK)},
                 PortableCharger.Type.LARGE.chargeCapacity, PortableCharger.Type.LARGE.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.CARBONADO_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -187,16 +148,16 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.NETHERITE_INGOT), SlimefunItems.STEEL_PLATE,
                 new ItemStack(Material.NETHERITE_INGOT)},
                 PortableCharger.Type.CARBONADO.chargeCapacity, PortableCharger.Type.CARBONADO.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         // Multiblocks
-        new CrankGenerator(generators, FluffyItems.CRANK_GENERATOR).register(plugin);
-        new Foundry(multiblocks, FluffyItems.FOUNDRY).register(plugin);
+        new CrankGenerator(generators, FluffyItems.CRANK_GENERATOR).register(SlimefunAddonInstance.getSFAInstance());
+        new Foundry(multiblocks, FluffyItems.FOUNDRY).register(SlimefunAddonInstance.getSFAInstance());
         new ExpDispenser(multiblocks, FluffyItems.EXP_DISPENSER, new ItemStack[]{
                 null, null, null,
                 null, new ItemStack(Material.GRINDSTONE), null,
                 null, new ItemStack(Material.DISPENSER), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         // Tools
         new WateringCan(tools, FluffyItems.WATERING_CAN,
@@ -204,62 +165,62 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.IRON_INGOT), null, new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.BUCKET), new ItemStack(Material.IRON_INGOT),
                 null, new ItemStack(Material.IRON_INGOT), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Scythe(tools, FluffyItems.SCYTHE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 null, new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT),
                 null, new ItemStack(Material.IRON_HOE), null,
                 null, new ItemStack(Material.STICK), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new FluffyWrench(wrenches, FluffyItems.FLUFFY_WRENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.COPPER_INGOT, null, SlimefunItems.COPPER_INGOT,
                 SlimefunItems.COPPER_INGOT, SlimefunItems.COPPER_INGOT, SlimefunItems.COPPER_INGOT,
                 null, SlimefunItems.COPPER_INGOT, null
-        }, FluffyWrench.Wrench.DEFAULT).register(plugin);
+        }, FluffyWrench.Wrench.DEFAULT).register(SlimefunAddonInstance.getSFAInstance());
 
         new FluffyWrench(wrenches, FluffyItems.REINFORCED_FLUFFY_WRENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.REINFORCED_ALLOY_INGOT, null, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, FluffyItems.FLUFFY_WRENCH, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 null, SlimefunItems.SYNTHETIC_DIAMOND, null
-        }, FluffyWrench.Wrench.REINFORCED).register(plugin);
+        }, FluffyWrench.Wrench.REINFORCED).register(SlimefunAddonInstance.getSFAInstance());
 
         new FluffyWrench(wrenches, FluffyItems.CARBONADO_FLUFFY_WRENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CARBONADO, null, SlimefunItems.CARBONADO,
                 SlimefunItems.CARBONADO, FluffyItems.REINFORCED_FLUFFY_WRENCH, SlimefunItems.CARBONADO,
                 null, SlimefunItems.CARBONADO_EDGED_CAPACITOR, null
-        }, FluffyWrench.Wrench.CARBONADO).register(plugin);
+        }, FluffyWrench.Wrench.CARBONADO).register(SlimefunAddonInstance.getSFAInstance());
 
         new UpgradedLumberAxe(tools, FluffyItems.UPGRADED_LUMBER_AXE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 null, new ItemStack(Material.DIAMOND), new ItemStack(Material.DIAMOND),
                 null, SlimefunItems.LUMBER_AXE, null,
                 null, new ItemStack(Material.OBSIDIAN), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new UpgradedExplosivePickaxe(tools, FluffyItems.UPGRADED_EXPLOSIVE_PICKAXE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD,
                 new ItemStack(Material.TNT), SlimefunItems.EXPLOSIVE_PICKAXE, new ItemStack(Material.TNT),
                 null, new ItemStack(Material.OBSIDIAN), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new UpgradedExplosiveShovel(tools, FluffyItems.UPGRADED_EXPLOSIVE_SHOVEL,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD,
                 new ItemStack(Material.TNT), SlimefunItems.EXPLOSIVE_SHOVEL, new ItemStack(Material.TNT),
                 null, new ItemStack(Material.OBSIDIAN), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Paxel(tools, FluffyItems.PAXEL,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, new ItemStack(Material.DIAMOND_PICKAXE), SlimefunItems.SYNTHETIC_EMERALD,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, new ItemStack(Material.DIAMOND_AXE), SlimefunItems.REINFORCED_ALLOY_INGOT,
                 SlimefunItems.SYNTHETIC_DIAMOND, new ItemStack(Material.DIAMOND_SHOVEL), SlimefunItems.SYNTHETIC_DIAMOND,
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         // Machines
         new WaterSprinkler(machines, FluffyItems.WATER_SPRINKER,
@@ -267,28 +228,28 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.BUCKET), new ItemStack(Material.DISPENSER), new ItemStack(Material.BUCKET),
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.SMALL_CAPACITOR, new ItemStack(Material.IRON_INGOT)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoCraftingTable(machines, FluffyItems.AUTO_CRAFTING_TABLE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.CRAFTING_TABLE), SlimefunItems.BASIC_CIRCUIT_BOARD, new ItemStack(Material.CRAFTING_TABLE),
                 SlimefunItems.CARGO_MOTOR, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.CARGO_MOTOR,
                 new ItemStack(Material.CRAFTING_TABLE), SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.CRAFTING_TABLE)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoAncientAltar(machines, FluffyItems.AUTO_ANCIENT_ALTAR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ANCIENT_PEDESTAL, SlimefunItems.MEDIUM_CAPACITOR, SlimefunItems.ANCIENT_PEDESTAL,
                 SlimefunItems.ANCIENT_PEDESTAL, SlimefunItems.ANCIENT_ALTAR, SlimefunItems.ANCIENT_PEDESTAL,
                 SlimefunItems.ANCIENT_PEDESTAL, SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.ANCIENT_PEDESTAL
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoEnhancedCraftingTable(machines, FluffyItems.AUTO_ENHANCED_CRAFTING_TABLE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.CRAFTING_TABLE), advancedCircuitBoard, new ItemStack(Material.CRAFTING_TABLE),
                 SlimefunItems.CARGO_MOTOR, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.CARGO_MOTOR,
                 new ItemStack(Material.CRAFTING_TABLE), SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.CRAFTING_TABLE)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoTableSaw(machines, FluffyItems.AUTO_TABLE_SAW,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -296,7 +257,7 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.SMOOTH_STONE_SLAB), new ItemStack(Material.STONECUTTER),
                 new ItemStack(Material.SMOOTH_STONE_SLAB),
                 SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.IRON_BLOCK), SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoMagicWorkbench(machines, FluffyItems.AUTO_MAGIC_WORKBENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -304,14 +265,14 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.BOOKSHELF), new ItemStack(Material.CRAFTING_TABLE),
                 new ItemStack(Material.DISPENSER),
                 new ItemStack(Material.BOOKSHELF), FluffyItems.AUTO_CRAFTING_TABLE, new ItemStack(Material.BOOKSHELF)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoArmorForge(machines, FluffyItems.AUTO_ARMOR_FORGE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.ANVIL), new ItemStack(Material.ANVIL), new ItemStack(Material.ANVIL),
                 advancedCircuitBoard, new ItemStack(Material.DISPENSER), advancedCircuitBoard,
                 new ItemStack(Material.ANVIL), FluffyItems.AUTO_CRAFTING_TABLE, new ItemStack(Material.ANVIL)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AdvancedAutoDisenchanter(machines, FluffyItems.ADVANCED_AUTO_DISENCHANTER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -319,28 +280,28 @@ public final class FluffyItemSetup {
                 SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.AUTO_DISENCHANTER, SlimefunItems.BLISTERING_INGOT_3,
                 SlimefunItems.WITHER_PROOF_OBSIDIAN, SlimefunItems.WITHER_PROOF_OBSIDIAN,
                 SlimefunItems.WITHER_PROOF_OBSIDIAN
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new BackpackLoader(machines, FluffyItems.BACKPACK_LOADER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 orangeGlass, orangeGlass, orangeGlass,
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.HOPPER), new ItemStack(Material.IRON_INGOT),
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.BIG_CAPACITOR, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new BackpackUnloader(machines, FluffyItems.BACKPACK_UNLOADER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 brownGlass, brownGlass, brownGlass,
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.DISPENSER), new ItemStack(Material.IRON_INGOT),
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.BIG_CAPACITOR, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new GeneratorCore(generators, FluffyItems.GENERATOR_CORE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.ELECTRO_MAGNET, new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), advancedCircuitBoard, new ItemStack(Material.IRON_INGOT)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SuperheatedFurnace(multiblocks, FluffyItems.SUPERHEATED_FURNACE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -348,7 +309,7 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.LAVA_BUCKET), new ItemStack(Material.BLAST_FURNACE),
                 new ItemStack(Material.LAVA_BUCKET),
                 new ItemStack(Material.OBSIDIAN), new ItemStack(Material.OBSIDIAN), new ItemStack(Material.OBSIDIAN)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         // Misc
         new HelicopterHat(misc, FluffyItems.HELICOPTER_HAT,
@@ -356,34 +317,34 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT),
                 advancedCircuitBoard, new ItemStack(Material.LEATHER_HELMET), advancedCircuitBoard,
                 SlimefunItems.COMPRESSED_CARBON, SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.COMPRESSED_CARBON
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new FireproofRune(misc, FluffyItems.FIREPROOF_RUNE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, new ItemStack(Material.NETHERITE_INGOT), SlimefunItems.SYNTHETIC_EMERALD,
                 new ItemStack(Material.OBSIDIAN), SlimefunItems.FIRE_RUNE, new ItemStack(Material.OBSIDIAN),
                 SlimefunItems.SYNTHETIC_EMERALD, new ItemStack(Material.OBSIDIAN), SlimefunItems.SYNTHETIC_EMERALD
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new EnderChestInsertionNode(cargo, FluffyItems.ENDER_CHEST_INSERTION_NODE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2,
                 new ItemStack(Material.DISPENSER), new ItemStack(Material.ENDER_PEARL), new ItemStack(Material.HOPPER),
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new EnderChestExtractionNode(cargo, FluffyItems.ENDER_CHEST_EXTRACTION_NODE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2,
                 new ItemStack(Material.HOPPER), new ItemStack(Material.ENDER_PEARL), new ItemStack(Material.DISPENSER),
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Dolly(misc, FluffyItems.DOLLY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.LEATHER), new ItemStack(Material.LEATHER), new ItemStack(Material.LEATHER),
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.MINECART), new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SlimefunItem(misc, FluffyItems.ANCIENT_BOOK,
                 RecipeType.ANCIENT_ALTAR, new ItemStack[]{
@@ -391,21 +352,21 @@ public final class FluffyItemSetup {
                 SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, SlimefunItems.ENCHANTMENT_RUNE,
                 SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE,
                 new ItemStack(Material.BOOK), SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, new ItemStack(Material.BOOK)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new WarpPad(misc, FluffyItems.WARP_PAD,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE),
                 new ItemStack(Material.ENDER_EYE), SlimefunItems.GPS_TELEPORTER_PYLON, new ItemStack(Material.ENDER_EYE),
                 new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new WarpPadConfigurator(misc, FluffyItems.WARP_PAD_CONFIGURATOR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 null, new ItemStack(Material.ENDER_EYE), null,
                 null, SlimefunItems.MAGNESIUM_INGOT, null,
                 null, SlimefunItems.MAGNESIUM_INGOT, null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new ElectricDustFabricator(machines, FluffyItems.ELECTRIC_DUST_FABRICATOR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -413,7 +374,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.ELECTRIC_ORE_GRINDER_2,
                 SlimefunItems.ELECTRIC_GOLD_PAN_3, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.ELECTRIC_GOLD_PAN_3,
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.ELECTRIC_DUST_WASHER_3, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new ElectricDustRecycler(machines, FluffyItems.ELECTRIC_DUST_RECYCLER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -421,7 +382,7 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.LAVA_BUCKET), SlimefunItems.ELECTRIFIED_CRUCIBLE_3,
                 new ItemStack(Material.LAVA_BUCKET),
                 SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.PISTON), SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AlternateElevatorPlate(misc, FluffyItems.ALTERNATE_ELEVATOR_PLATE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -430,35 +391,34 @@ public final class FluffyItemSetup {
                 SlimefunItems.ALUMINUM_BRONZE_INGOT, SlimefunItems.ALUMINUM_BRONZE_INGOT,
                 SlimefunItems.ALUMINUM_BRONZE_INGOT},
                 new SlimefunItemStack(FluffyItems.ALTERNATE_ELEVATOR_PLATE, 2)
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new AdvancedChargingBench(machines, FluffyItems.ADVANCED_CHARGING_BENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CORINTHIAN_BRONZE_INGOT, advancedCircuitBoard, SlimefunItems.CORINTHIAN_BRONZE_INGOT,
                 advancedCircuitBoard, SlimefunItems.CHARGING_BENCH, advancedCircuitBoard,
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.SMALL_CAPACITOR, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new ACBUpgradeCard(machines, FluffyItems.ACB_UPGRADE_CARD,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CORINTHIAN_BRONZE_INGOT, advancedCircuitBoard, SlimefunItems.CORINTHIAN_BRONZE_INGOT,
                 advancedCircuitBoard, SlimefunItems.ELECTRIC_MOTOR, advancedCircuitBoard,
                 SlimefunItems.GOLD_24K, SlimefunItems.SMALL_CAPACITOR, SlimefunItems.GOLD_24K
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new CargoManipulator(cargo, FluffyItems.CARGO_MANIPULATOR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CARGO_MOTOR, new ItemStack(Material.ENDER_EYE), SlimefunItems.ELECTRIC_MOTOR,
                 new ItemStack(Material.ENDER_EYE), new ItemStack(Material.COMPASS), new ItemStack(Material.ENDER_EYE),
                 SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.ENDER_EYE), SlimefunItems.CARGO_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SmartFactory(machines, FluffyItems.SMART_FACTORY,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CARGO_MOTOR, SlimefunItems.ELECTRIC_SMELTERY_2, SlimefunItems.CARGO_MOTOR,
                 SlimefunItems.ENHANCED_AUTO_CRAFTER, SlimefunItems.CARBON_PRESS_3, SlimefunItems.VANILLA_AUTO_CRAFTER,
                 SlimefunItems.CRAFTING_MOTOR, SlimefunItems.ELECTRIC_INGOT_FACTORY_3, SlimefunItems.CRAFTING_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java
new file mode 100644
index 0000000..b7316b2
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java
@@ -0,0 +1,89 @@
+package id.universenetwork.sfa_loader.addons.fluffymachines;
+
+import id.universenetwork.sfa_loader.addons.fluffymachines.listeners.KeyedCrafterListener;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.EventUtils;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.McMMOEvents;
+import id.universenetwork.sfa_loader.annotations.AddonLibrary;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
+import lombok.SneakyThrows;
+import org.bukkit.Bukkit;
+import org.bukkit.inventory.*;
+
+import java.util.*;
+
+@AddonLibrary(
+        groupId = "com{}github{}Slimefun-Addon-Community",
+        artifactId = "extrautils",
+        version = "73e76ac"
+)
+public class FluffyMachines extends AddonTemplate {
+    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapedVanillaRecipes =
+            new HashMap<>();
+    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapelessVanillaRecipes =
+            new HashMap<>();
+
+    @SneakyThrows
+    @Override
+    public void onLoad() {
+        // Register ACT Recipes
+        Iterator<Recipe> recipeIterator = Bukkit.recipeIterator();
+        while (recipeIterator.hasNext()) {
+            Recipe r = recipeIterator.next();
+
+            if (r instanceof ShapedRecipe) {
+                ShapedRecipe sr = (ShapedRecipe) r;
+                List<RecipeChoice> rc = new ArrayList<>();
+                ItemStack key = new ItemStack(sr.getResult().getType(), 1);
+
+                // Convert the recipe to a list
+                for (Map.Entry<Character, RecipeChoice> choice : sr.getChoiceMap().entrySet())
+                    if (choice.getValue() != null) rc.add(choice.getValue());
+
+                if (!shapedVanillaRecipes.containsKey(key)) shapedVanillaRecipes.put(key,
+                        new ArrayList<>(Collections.singletonList(new Pair<>(sr.getResult(), rc))));
+                else shapedVanillaRecipes.get(key).add(new Pair<>(sr.getResult(), rc));
+
+            } else if (r instanceof ShapelessRecipe) {
+                ShapelessRecipe slr = (ShapelessRecipe) r;
+                ItemStack key = new ItemStack(slr.getResult().getType(), 1);
+
+                // Key has a list of recipe options
+                if (!shapelessVanillaRecipes.containsKey(key)) {
+                    shapelessVanillaRecipes.put(key,
+                            new ArrayList<>(Collections.singletonList(new Pair<>(slr.getResult(), slr.getChoiceList()))));
+                } else shapelessVanillaRecipes.get(key).add(new Pair<>(slr.getResult(), slr.getChoiceList()));
+            }
+        }
+
+        // Register McMMO Events
+        if (Bukkit.getPluginManager().isPluginEnabled("McMMO")) {
+            LogUtils.info("McMMO found!");
+            Event.registerListeners(new McMMOEvents());
+        }
+
+        // Registering Items
+        FluffyItemSetup.setup();
+        FluffyItemSetup.setupBarrels();
+
+        // Register Events Class
+        Event.registerListeners(new EventUtils(), new KeyedCrafterListener());
+    }
+
+    private void saveAllPlayers() {
+        Iterator<PlayerProfile> iterator = PlayerProfile.iterator();
+        int players = 0;
+
+        while (iterator.hasNext()) {
+            PlayerProfile profile = iterator.next();
+
+            profile.save();
+            players++;
+        }
+
+        if (players > 0) LogUtils.info("Auto-saved all player data for " + players + " player(s)!");
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/Barrel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/Barrel.java
similarity index 84%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/Barrel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/Barrel.java
index 290f598..d1abe90 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/Barrel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/Barrel.java
@@ -1,10 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.DoubleHologramOwner;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.NonHopperableBlock;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.*;
 import io.github.thebusybiscuit.slimefun4.api.items.settings.IntRangeSetting;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
@@ -12,14 +11,6 @@ import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.objects.DoubleHologramOwner;
-import io.ncbpfluffybear.fluffymachines.objects.NonHopperableBlock;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.text.DecimalFormat;
-import java.text.DecimalFormatSymbols;
-import java.util.List;
-import java.util.Locale;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
@@ -40,14 +31,18 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.PlayerInventory;
 import org.bukkit.util.Vector;
 
+import javax.annotation.Nonnull;
+import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
+import java.util.List;
+import java.util.Locale;
+
 /**
  * A Remake of Barrels by John000708
  *
  * @author NCBPFluffyBear
  */
-
 public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
-
     private final int[] inputBorder = {9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
     private final int[] outputBorder = {14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
     private final int[] plainBorder = {0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 36, 37, 38, 39, 40, 41, 42, 43, 44};
@@ -77,16 +72,15 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
     protected final ItemSetting<Integer> barrelCapacity;
 
-    public Barrel(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe,
+    public Barrel(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe,
                   int MAX_STORAGE) {
-        super(category, item, recipeType, recipe);
+        super(itemGroup, item, recipeType, recipe);
 
         this.barrelCapacity = new IntRangeSetting(this, "capacity", 0, MAX_STORAGE, Integer.MAX_VALUE);
 
         addItemSetting(barrelCapacity);
 
         new BlockMenuPreset(getId(), getItemName()) {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -114,13 +108,9 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return INPUT_SLOTS;
-                } else if (flow == ItemTransportFlow.WITHDRAW) {
-                    return OUTPUT_SLOTS;
-                } else {
-                    return new int[0];
-                }
+                if (flow == ItemTransportFlow.INSERT) return INPUT_SLOTS;
+                else if (flow == ItemTransportFlow.WITHDRAW) return OUTPUT_SLOTS;
+                else return new int[0];
             }
         };
 
@@ -140,7 +130,6 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
                 int stored = getStored(b);
 
                 if (inv != null) {
-
                     int itemCount = 0;
 
                     if (breakOnlyWhenEmpty.getValue() && stored != 0) {
@@ -149,11 +138,7 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
                         return;
                     }
 
-                    for (Entity en : p.getNearbyEntities(5, 5, 5)) {
-                        if (en instanceof Item) {
-                            itemCount++;
-                        }
-                    }
+                    for (Entity en : p.getNearbyEntities(5, 5, 5)) if (en instanceof Item) itemCount++;
 
                     if (itemCount > 5) {
                         Utils.send(p, "&cPlease remove nearby items before breaking this barrel!");
@@ -180,15 +165,13 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
                                     "Dropping " + OVERFLOW_AMOUNT + " items instead!");
                             int toRemove = OVERFLOW_AMOUNT;
                             while (toRemove >= stackSize) {
-
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(unKeyed, stackSize));
 
                                 toRemove = toRemove - stackSize;
                             }
 
-                            if (toRemove > 0) {
+                            if (toRemove > 0)
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(unKeyed, toRemove));
-                            }
 
                             setStored(b, stored - OVERFLOW_AMOUNT);
                             updateMenu(b, inv, true, capacity);
@@ -198,26 +181,21 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
                             // Everything greater than 1 stack
                             while (stored >= stackSize) {
-
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(unKeyed, stackSize));
 
                                 stored = stored - stackSize;
                             }
 
                             // Drop remaining, if there is any
-                            if (stored > 0) {
+                            if (stored > 0)
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(unKeyed, stored));
-                            }
 
                             // In case they use an explosive pick
                             setStored(b, 0);
                             updateMenu(b, inv, true, capacity);
                             removeHologram(b);
                         }
-                    } else {
-                        removeHologram(b);
-                    }
-
+                    } else removeHologram(b);
                 }
             }
         };
@@ -234,21 +212,15 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
         // Initialize an empty barrel
         if (BlockStorage.getLocationInfo(b.getLocation(), "stored") == null) {
-
             menu.replaceExistingItem(STATUS_SLOT, new CustomItemStack(
                     Material.LIME_STAINED_GLASS_PANE, "&6Items Stored: &e0" + " / " + capacity, "&70%"));
             menu.replaceExistingItem(DISPLAY_SLOT, new CustomItemStack(Material.BARRIER, "&cEmpty"));
 
             setStored(b, 0);
 
-            if (showHologram.getValue()) {
-                updateHologram(b, null, "&cEmpty");
-            }
+            if (showHologram.getValue()) updateHologram(b, null, "&cEmpty");
 
-            // Change hologram settings
-        } else if (!showHologram.getValue()) {
-            removeHologram(b);
-        }
+        } else if (!showHologram.getValue()) removeHologram(b); // Change hologram settings
 
         // Every time setup
         menu.addMenuClickHandler(STATUS_SLOT, ChestMenuUtils.getEmptyClickHandler());
@@ -256,11 +228,8 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
         // Toggle hologram (Dynamic button)
         String holo = BlockStorage.getLocationInfo(b.getLocation(), "holo");
-        if (holo == null || holo.equals("true")) {
-            menu.replaceExistingItem(HOLOGRAM_TOGGLE_SLOT, HOLOGRAM_ON_ITEM);
-        } else {
-            menu.replaceExistingItem(HOLOGRAM_TOGGLE_SLOT, HOLOGRAM_OFF_ITEM);
-        }
+        if (holo == null || holo.equals("true")) menu.replaceExistingItem(HOLOGRAM_TOGGLE_SLOT, HOLOGRAM_ON_ITEM);
+        else menu.replaceExistingItem(HOLOGRAM_TOGGLE_SLOT, HOLOGRAM_OFF_ITEM);
         menu.addMenuClickHandler(HOLOGRAM_TOGGLE_SLOT, (pl, slot, item, action) -> {
             toggleHolo(b, capacity);
             return false;
@@ -268,11 +237,8 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
         // Toggle trash (Dynamic button)
         String trash = BlockStorage.getLocationInfo(b.getLocation(), "trash");
-        if (trash == null || trash.equals("false")) {
-            menu.replaceExistingItem(TRASH_TOGGLE_SLOT, TRASH_OFF_ITEM);
-        } else {
-            menu.replaceExistingItem(TRASH_TOGGLE_SLOT, TRASH_ON_ITEM);
-        }
+        if (trash == null || trash.equals("false")) menu.replaceExistingItem(TRASH_TOGGLE_SLOT, TRASH_OFF_ITEM);
+        else menu.replaceExistingItem(TRASH_TOGGLE_SLOT, TRASH_ON_ITEM);
         menu.addMenuClickHandler(TRASH_TOGGLE_SLOT, (pl, slot, item, action) -> {
             toggleTrash(b);
             return false;
@@ -304,7 +270,6 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
     @Override
     public void preRegister() {
         addItemHandler(new BlockTicker() {
-
             @Override
             public void tick(Block b, SlimefunItem sf, Config data) {
                 Barrel.this.tick(b);
@@ -321,36 +286,27 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
         BlockMenu inv = BlockStorage.getInventory(b);
         int capacity = getCapacity(b);
 
-        for (int slot : INPUT_SLOTS) {
-            acceptInput(inv, b, slot, capacity);
-        }
+        for (int slot : INPUT_SLOTS) acceptInput(inv, b, slot, capacity);
 
-        for (int ignored : OUTPUT_SLOTS) {
-            pushOutput(inv, b, capacity);
-        }
+        for (int ignored : OUTPUT_SLOTS) pushOutput(inv, b, capacity);
     }
 
     void acceptInput(BlockMenu inv, Block b, int slot, int capacity) {
-        if (inv.getItemInSlot(slot) == null) {
-            return;
-        }
+        if (inv.getItemInSlot(slot) == null) return;
 
         int stored = getStored(b);
         ItemStack item = inv.getItemInSlot(slot);
 
-        if (stored == 0) {
-            registerItem(b, inv, slot, item, capacity, stored);
-        } else if (stored > 0 && inv.getItemInSlot(DISPLAY_SLOT) != null
+        if (stored == 0) registerItem(b, inv, slot, item, capacity, stored);
+        else if (stored > 0 && inv.getItemInSlot(DISPLAY_SLOT) != null
                 && matchMeta(Utils.unKeyItem(inv.getItemInSlot(DISPLAY_SLOT)), item)) {
 
             if (stored < capacity) {
-
                 // Can fit entire itemstack
-                if (stored + item.getAmount() <= capacity) {
-                    storeItem(b, inv, slot, item, capacity, stored);
+                if (stored + item.getAmount() <= capacity) storeItem(b, inv, slot, item, capacity, stored);
 
                     // Split itemstack
-                } else {
+                else {
                     int amount = capacity - stored;
                     inv.consumeItem(slot, amount);
 
@@ -360,10 +316,7 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
             } else {
                 String useTrash = BlockStorage.getLocationInfo(b.getLocation(), "trash");
 
-                if (useTrash != null && useTrash.equals("true")) {
-                    inv.replaceExistingItem(slot, null);
-                }
-
+                if (useTrash != null && useTrash.equals("true")) inv.replaceExistingItem(slot, null);
             }
         }
     }
@@ -371,7 +324,6 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
     void pushOutput(BlockMenu inv, Block b, int capacity) {
         ItemStack displayItem = inv.getItemInSlot(DISPLAY_SLOT);
         if (displayItem != null && displayItem.getType() != Material.BARRIER) {
-
             int stored = getStored(b);
 
             // Output stack
@@ -388,8 +340,7 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
                     updateMenu(b, inv, false, capacity);
                 }
 
-            } else if (stored != 0) {   // Output remaining
-
+            } else if (stored != 0) { // Output remaining
                 ItemStack clone = new CustomItemStack(Utils.unKeyItem(displayItem), stored);
 
                 if (inv.fits(clone, OUTPUT_SLOTS)) {
@@ -407,9 +358,8 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
         inv.replaceExistingItem(DISPLAY_SLOT, new CustomItemStack(Utils.keyItem(item), 1));
 
         // Fit all
-        if (amount <= capacity) {
-            storeItem(b, inv, slot, item, capacity, stored);
-        } else {
+        if (amount <= capacity) storeItem(b, inv, slot, item, capacity, stored);
+        else {
             amount = capacity;
             inv.consumeItem(slot, amount);
 
@@ -454,27 +404,21 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
                 doubleRoundAndFade((double) stored / (double) inv.getItemInSlot(DISPLAY_SLOT).getMaxStackSize());
 
         // This helps a bit with lag, but may have visual impacts
-        if (inv.hasViewer() || force) {
-            inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(
-                    Material.LIME_STAINED_GLASS_PANE, "&6Items Stored: &e" + stored + " / " + capacity,
-                    "&b" + storedStacks + " Stacks &8| &7" + storedPercent + "&7%"));
-        }
+        if (inv.hasViewer() || force) inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(
+                Material.LIME_STAINED_GLASS_PANE, "&6Items Stored: &e" + stored + " / " + capacity,
+                "&b" + storedStacks + " Stacks &8| &7" + storedPercent + "&7%"));
 
-        if (inv.getItemInSlot(DISPLAY_SLOT) != null && inv.getItemInSlot(DISPLAY_SLOT).getItemMeta().hasDisplayName()) {
+        if (inv.getItemInSlot(DISPLAY_SLOT) != null && inv.getItemInSlot(DISPLAY_SLOT).getItemMeta().hasDisplayName())
             itemName = inv.getItemInSlot(DISPLAY_SLOT).getItemMeta().getDisplayName();
-        } else {
-            itemName = WordUtils.capitalizeFully(inv.getItemInSlot(DISPLAY_SLOT).getType().name().replace("_", " "));
-        }
+        else itemName = WordUtils.capitalizeFully(inv.getItemInSlot(DISPLAY_SLOT).getType().name().replace("_", " "));
 
-        if (showHologram.getValue() && (hasHolo == null || hasHolo.equals("true"))) {
+        if (showHologram.getValue() && (hasHolo == null || hasHolo.equals("true")))
             updateHologram(b, itemName, " &9x" + stored + " &7(" + storedPercent + "&7%)");
-        }
 
         if (stored == 0) {
             inv.replaceExistingItem(DISPLAY_SLOT, new CustomItemStack(Material.BARRIER, "&cEmpty"));
-            if (showHologram.getValue() && (hasHolo == null || hasHolo.equals("true"))) {
+            if (showHologram.getValue() && (hasHolo == null || hasHolo.equals("true")))
                 updateHologram(b, null, "&cEmpty");
-            }
         }
     }
 
@@ -499,11 +443,8 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
      */
     private void toggleTrash(Block b) {
         String toggle = BlockStorage.getLocationInfo(b.getLocation(), "trash");
-        if (toggle == null || toggle.equals("false")) {
-            putBlockData(b, TRASH_TOGGLE_SLOT, "trash", TRASH_ON_ITEM, true);
-        } else {
-            putBlockData(b, TRASH_TOGGLE_SLOT, "trash", TRASH_OFF_ITEM, false);
-        }
+        if (toggle == null || toggle.equals("false")) putBlockData(b, TRASH_TOGGLE_SLOT, "trash", TRASH_ON_ITEM, true);
+        else putBlockData(b, TRASH_TOGGLE_SLOT, "trash", TRASH_OFF_ITEM, false);
     }
 
     /**
@@ -523,9 +464,7 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
         for (int i = 0; i < inv.getContents().length; i++) {
             ItemStack item = inv.getItem(i);
-            if (item == null) {
-                continue;
-            }
+            if (item == null) continue;
             int amount = item.getAmount();
             if (matchMeta(item, storedItem) && stored + amount <= capacity) {
                 inv.setItem(i, null);
@@ -552,13 +491,12 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
                 updateMenu(b, menu, false, capacity);
                 return;
             } else {
-                for (int slot : OUTPUT_SLOTS) { // Extract from slot
+                for (int slot : OUTPUT_SLOTS) // Extract from slot
                     if (menu.getItemInSlot(slot) != null) {
                         Utils.giveOrDropItem(p, new CustomItemStack(menu.getItemInSlot(slot), 1));
                         menu.consumeItem(slot);
                         return;
                     }
-                }
             }
             Utils.send(p, "&cThis barrel is empty!");
             return;
@@ -575,7 +513,6 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
         int outI = 0;
 
         for (int i = 0; i < contents.length; i++) {
-
             if (contents[i] == null) {
                 if (stored >= maxStackSize) {
                     inv.setItem(i, new CustomItemStack(storedItem, maxStackSize));
@@ -584,15 +521,11 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
                     inv.setItem(i, new CustomItemStack(storedItem, stored));
                     stored = 0;
                 } else {
-                    if (outI > 1) {
-                        break;
-                    }
+                    if (outI > 1) break;
 
                     ItemStack item = menu.getItemInSlot(OUTPUT_SLOTS[outI]);
 
-                    if (item == null) {
-                        continue;
-                    }
+                    if (item == null) continue;
 
                     inv.setItem(i, item.clone());
                     menu.replaceExistingItem(OUTPUT_SLOTS[outI], null);
@@ -612,9 +545,7 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
         if (formattedString.indexOf('.') != -1) {
             return formattedString.substring(0, formattedString.indexOf('.')) + ChatColor.DARK_GRAY
                     + formattedString.substring(formattedString.indexOf('.')) + ChatColor.GRAY;
-        } else {
-            return formattedString;
-        }
+        } else return formattedString;
     }
 
     public int getStored(Block b) {
@@ -639,9 +570,7 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
 
     public static int getDisplayCapacity(Barrel.BarrelType barrel) {
         int capacity = Slimefun.getItemCfg().getInt(barrel.getKey() + ".capacity");
-        if (capacity == 0) {
-            capacity = barrel.getDefaultSize();
-        }
+        if (capacity == 0) capacity = barrel.getDefaultSize();
 
         return capacity;
     }
@@ -653,7 +582,6 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
     }
 
     public enum BarrelType {
-
         SMALL(17280000, "&eSmall Fluffy Barrel", Material.BEEHIVE, SlimefunItems.REINFORCED_PLATE, new ItemStack(Material.OAK_LOG)),
         MEDIUM(34560000, "&6Medium Fluffy Barrel", Material.BARREL, SlimefunItems.REINFORCED_PLATE, new ItemStack(Material.SMOOTH_STONE)),
         BIG(69120000, "&bBig Fluffy Barrel", Material.SMOKER, SlimefunItems.REINFORCED_PLATE, new ItemStack(Material.BRICKS)),
@@ -699,5 +627,4 @@ public class Barrel extends NonHopperableBlock implements DoubleHologramOwner {
             return border;
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestExtractionNode.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestExtractionNode.java
similarity index 76%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestExtractionNode.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestExtractionNode.java
index 9e55659..0c9858a 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestExtractionNode.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestExtractionNode.java
@@ -1,26 +1,21 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans.Talisman;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Tag;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.block.BlockState;
-import org.bukkit.block.Container;
-import org.bukkit.block.EnderChest;
-import org.bukkit.block.ShulkerBox;
+import org.bukkit.block.*;
 import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.inventory.Inventory;
@@ -37,11 +32,10 @@ import java.util.UUID;
  * @author NCBPFluffyBear
  */
 public class EnderChestExtractionNode extends SlimefunItem {
-
     private static final Material material = Material.ENDER_CHEST;
 
-    public EnderChestExtractionNode(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public EnderChestExtractionNode(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onPlace());
         addItemHandler(onInteract());
@@ -64,23 +58,15 @@ public class EnderChestExtractionNode extends SlimefunItem {
         ItemStack transferItemStack;
         BlockFace face;
 
-        if (b.getRelative(BlockFace.NORTH).getType() == material) {
-            face = BlockFace.SOUTH;
+        if (b.getRelative(BlockFace.NORTH).getType() == material) face = BlockFace.SOUTH;
 
-        } else if (b.getRelative(BlockFace.SOUTH).getType() == material) {
-            face = BlockFace.NORTH;
+        else if (b.getRelative(BlockFace.SOUTH).getType() == material) face = BlockFace.NORTH;
 
+        else if (b.getRelative(BlockFace.EAST).getType() == material) face = BlockFace.WEST;
 
-        } else if (b.getRelative(BlockFace.EAST).getType() == material) {
-            face = BlockFace.WEST;
+        else if (b.getRelative(BlockFace.WEST).getType() == material) face = BlockFace.EAST;
 
-
-        } else if (b.getRelative(BlockFace.WEST).getType() == material) {
-            face = BlockFace.EAST;
-
-        } else {
-            return;
-        }
+        else return;
 
         BlockState state = PaperLib.getBlockState(b.getRelative(face), false).getState();
 
@@ -89,7 +75,6 @@ public class EnderChestExtractionNode extends SlimefunItem {
 
             // Ender chest null check necessary because Bukkit yes.
             if (p != null) {
-
                 boolean enderValid = false;
                 boolean containerValid = false;
                 int enderIndex = -1;
@@ -102,21 +87,15 @@ public class EnderChestExtractionNode extends SlimefunItem {
                     ItemStack enderItem = enderInv.getItem(i);
 
                     // Ignore null items
-                    if (enderItem == null) {
-                        continue;
-                    }
+                    if (enderItem == null) continue;
 
                     // Prevent putting shulkers in shulkers
-                    if (state instanceof ShulkerBox && !Tag.SHULKER_BOXES.isTagged(enderItem.getType())) {
-                        continue;
-                    }
+                    if (state instanceof ShulkerBox && !Tag.SHULKER_BOXES.isTagged(enderItem.getType())) continue;
 
                     SlimefunItem sfEnderItem = SlimefunItem.getByItem(enderItem);
 
                     // Ignore Talismen
-                    if (sfEnderItem instanceof Talisman) {
-                        continue;
-                    }
+                    if (sfEnderItem instanceof Talisman) continue;
 
                     enderIndex = i;
                     enderValid = true;
@@ -126,7 +105,6 @@ public class EnderChestExtractionNode extends SlimefunItem {
                 Inventory containerInv = ((InventoryHolder) state).getInventory();
 
                 for (int i = 0; i < containerInv.getSize(); i++) {
-
                     if (containerInv.getItem(i) == null) {
                         containerIndex = i;
                         containerValid = true;
@@ -155,7 +133,7 @@ public class EnderChestExtractionNode extends SlimefunItem {
                     BlockStorage.addBlockInfo(b, "owner", p.getUniqueId().toString());
                     BlockStorage.addBlockInfo(b, "playername", p.getDisplayName());
                     Utils.send(p, "&aEnder Chest Extraction Node registered to " + p.getDisplayName()
-                        + " &7(UUID: " + p.getUniqueId() + ")");
+                            + " &7(UUID: " + p.getUniqueId() + ")");
                 }
             }
         };
@@ -166,8 +144,8 @@ public class EnderChestExtractionNode extends SlimefunItem {
             Player p = e.getPlayer();
             Block b = e.getClickedBlock().get();
             Utils.send(p, "&eThis Ender Chest Extraction Node belongs to " +
-                BlockStorage.getLocationInfo(b.getLocation(), "playername")
-                + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
+                    BlockStorage.getLocationInfo(b.getLocation(), "playername")
+                    + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
         };
     }
 }
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestInsertionNode.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestInsertionNode.java
similarity index 87%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestInsertionNode.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestInsertionNode.java
index b8c2d50..e6380c5 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestInsertionNode.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestInsertionNode.java
@@ -1,23 +1,19 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.block.BlockState;
-import org.bukkit.block.Container;
-import org.bukkit.block.EnderChest;
+import org.bukkit.block.*;
 import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.inventory.Inventory;
@@ -34,12 +30,11 @@ import java.util.UUID;
  * @author NCBPFluffyBear
  */
 public class EnderChestInsertionNode extends SlimefunItem {
-
     private static final Material material = Material.ENDER_CHEST;
 
-    public EnderChestInsertionNode(ItemGroup category, SlimefunItemStack item, RecipeType recipeType,
+    public EnderChestInsertionNode(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType,
                                    ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onPlace());
         addItemHandler(onInteract());
@@ -136,7 +131,7 @@ public class EnderChestInsertionNode extends SlimefunItem {
                     BlockStorage.addBlockInfo(b, "owner", p.getUniqueId().toString());
                     BlockStorage.addBlockInfo(b, "playername", p.getDisplayName());
                     Utils.send(p, "&aEnder Chest Insertion Node registered to " + p.getDisplayName()
-                        + " &7(UUID: " + p.getUniqueId() + ")");
+                            + " &7(UUID: " + p.getUniqueId() + ")");
                 }
             }
         };
@@ -147,8 +142,8 @@ public class EnderChestInsertionNode extends SlimefunItem {
             Player p = e.getPlayer();
             Block b = e.getClickedBlock().get();
             Utils.send(p, "&eThis Ender Chest Insertion Node belongs to " +
-                BlockStorage.getLocationInfo(b.getLocation(), "playername")
-                + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
+                    BlockStorage.getLocationInfo(b.getLocation(), "playername")
+                    + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
         };
     }
 }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/FireproofRune.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/FireproofRune.java
similarity index 78%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/FireproofRune.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/FireproofRune.java
index 7ebc158..3d69c7b 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/FireproofRune.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/FireproofRune.java
@@ -1,17 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemDropHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import org.bukkit.ChatColor;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Sound;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemDropHandler;
+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
+import org.bukkit.*;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
@@ -39,16 +35,13 @@ import java.util.Optional;
  * @author Walshy
  * @author TheBusyBiscuit
  */
-
 public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
-
     private static final double RANGE = 1.5;
-    private static final NamespacedKey FIREPROOF_KEY = new NamespacedKey(FluffyMachines.getInstance(), "fireproof");
+    private static final NamespacedKey FIREPROOF_KEY = AbstractAddon.createKey("fireproof");
     private static final String FIREPROOF_LORE = ChatColor.RED + "Fireproof";
 
-
-    public FireproofRune(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
-        super(category, item, type, recipe);
+    public FireproofRune(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
+        super(itemGroup, item, type, recipe);
     }
 
     @Nonnull
@@ -57,11 +50,9 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
         return (e, p, item) -> {
             if (isItem(item.getItemStack())) {
 
-                if (!this.canUse(p, true)) {
-                    return true;
-                }
+                if (!this.canUse(p, true)) return true;
 
-                Utils.runSync(() -> activate(p, item), 20L);
+                AbstractAddon.getScheduler().run(20, () -> activate(p, item));
 
                 return true;
             }
@@ -70,9 +61,7 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
     }
 
     private void activate(Player p, Item rune) {
-        if (!rune.isValid()) {
-            return;
-        }
+        if (!rune.isValid()) return;
 
         Location l = rune.getLocation();
         Collection<Entity> entities = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);
@@ -86,7 +75,7 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
                 // This lightning is just an effect, it deals no damage.
                 l.getWorld().strikeLightningEffect(l);
 
-                Utils.runSync(() -> {
+                AbstractAddon.getScheduler().run(10, () -> {
                     // Being sure entities are still valid and not picked up or whatsoever.
                     if (rune.isValid() && item.isValid() && itemStack.getAmount() == 1) {
 
@@ -100,13 +89,9 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
                         l.getWorld().dropItemNaturally(l, itemStack);
 
                         Utils.send(p, "&aYour item is now fireproof");
-                    } else {
-                        Utils.send(p, "&cYour item could not be made fireproof");
-                    }
-                }, 10L);
-            } else {
-                Utils.send(p, "&cYour item could not be made fireproof");
-            }
+                    } else Utils.send(p, "&cYour item could not be made fireproof");
+                });
+            } else Utils.send(p, "&cYour item could not be made fireproof");
         }
     }
 
@@ -139,9 +124,7 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
         if (item != null && item.getType() != Material.AIR) {
             ItemMeta meta = item.hasItemMeta() ? item.getItemMeta() : null;
             return hasFireproofFlag(meta);
-        } else {
-            return false;
-        }
+        } else return false;
     }
 
     private static boolean hasFireproofFlag(@Nullable ItemMeta meta) {
@@ -151,4 +134,4 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
         }
         return false;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/HelicopterHat.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/HelicopterHat.java
similarity index 60%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/HelicopterHat.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/HelicopterHat.java
index 5ff800e..e36f3c4 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/HelicopterHat.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/HelicopterHat.java
@@ -1,14 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import org.bukkit.inventory.ItemStack;
 
 public class HelicopterHat extends SlimefunItem {
-
-    public HelicopterHat(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public HelicopterHat(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/MiniBarrel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/MiniBarrel.java
similarity index 90%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/MiniBarrel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/MiniBarrel.java
index 5ceea3f..961e01b 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/MiniBarrel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/MiniBarrel.java
@@ -1,5 +1,6 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -8,8 +9,6 @@ import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChatUtils;
 import io.github.thebusybiscuit.slimefun4.utils.NumberUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.Material;
@@ -17,11 +16,13 @@ import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.inventory.ItemStack;
 
+import javax.annotation.Nonnull;
+
 public class MiniBarrel extends Barrel {
     private static final int MAX_STORAGE = 172800;
 
-    public MiniBarrel(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe, MAX_STORAGE);
+    public MiniBarrel(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe, MAX_STORAGE);
         addItemHandler(onPlace());
     }
 
@@ -82,10 +83,8 @@ public class MiniBarrel extends Barrel {
 
     public static int getDisplayCapacity() {
         int capacity = Slimefun.getItemCfg().getInt("MINI_FLUFFY_BARREL.capacity");
-        if (capacity == 0) {
-            capacity = MAX_STORAGE;
-        }
+        if (capacity == 0) capacity = MAX_STORAGE;
 
         return capacity;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/ACBUpgradeCard.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/ACBUpgradeCard.java
similarity index 81%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/ACBUpgradeCard.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/ACBUpgradeCard.java
index abee657..f803ddd 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/ACBUpgradeCard.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/ACBUpgradeCard.java
@@ -1,15 +1,15 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.EquipmentSlot;
@@ -19,9 +19,8 @@ import javax.annotation.Nonnull;
 import java.util.Optional;
 
 public class ACBUpgradeCard extends SimpleSlimefunItem<ItemHandler> {
-
-    public ACBUpgradeCard(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public ACBUpgradeCard(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Nonnull
@@ -29,16 +28,12 @@ public class ACBUpgradeCard extends SimpleSlimefunItem<ItemHandler> {
     public ItemHandler getItemHandler() {
         return (ItemUseHandler) e -> {
             // Prevent offhand right clicks
-            if (e.getHand() != EquipmentSlot.HAND) {
-                return;
-            }
+            if (e.getHand() != EquipmentSlot.HAND) return;
 
             // Block exists
             Optional<Block> optB = e.getClickedBlock();
 
-            if (!optB.isPresent()) {
-                return;
-            }
+            if (!optB.isPresent()) return;
 
             // Prevent menu opening and interactions
             e.cancel();
@@ -69,4 +64,4 @@ public class ACBUpgradeCard extends SimpleSlimefunItem<ItemHandler> {
             Utils.send(e.getPlayer(), "&aThis Advanced Charging Bench has been upgraded! &eTier: " + tier);
         };
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/AlternateBreakEvent.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/AlternateBreakEvent.java
similarity index 77%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/AlternateBreakEvent.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/AlternateBreakEvent.java
index 0f1c7f2..a265eea 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/AlternateBreakEvent.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/AlternateBreakEvent.java
@@ -1,12 +1,11 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockBreakEvent;
 
 public class AlternateBreakEvent extends BlockBreakEvent {
-
     public AlternateBreakEvent(Block b, Player p) {
         super(b, p);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/CargoManipulator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/CargoManipulator.java
similarity index 84%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/CargoManipulator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/CargoManipulator.java
index 8c97956..0931a83 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/CargoManipulator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/CargoManipulator.java
@@ -1,7 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -14,16 +16,12 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import org.bukkit.Bukkit;
 import org.bukkit.Color;
 import org.bukkit.Particle;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
-import org.bukkit.event.Event;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.block.Action;
@@ -41,31 +39,27 @@ import java.util.Map;
  * @author NCBPFluffyBear
  */
 public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> implements Listener {
-
     private static final int[] CARGO_SLOTS = {19, 20, 21, 28, 29, 30, 37, 38, 39};
     private final Map<Player, Pair<JsonObject, ItemStack[]>> storedFilters = new HashMap<>();
 
-    public CargoManipulator(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public CargoManipulator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Event.registerListeners(this);
     }
 
     @Nonnull
     @Override
     public ItemUseHandler getItemHandler() {
-        return e -> e.setUseBlock(Event.Result.DENY); // Prevent opening inventories
+        return e -> e.setUseBlock(org.bukkit.event.Event.Result.DENY); // Prevent opening inventories
     }
 
     @EventHandler
     private void onCargoManipulatorUse(PlayerInteractEvent e) {
-
         ItemStack manipulator = e.getItem();
 
         // Check item is cargo manipulator
-        if (manipulator == null || !this.isItem(manipulator)) {
-            return;
-        }
+        if (manipulator == null || !this.isItem(manipulator)) return;
 
         e.setCancelled(true);
 
@@ -79,23 +73,15 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
                 nodeType != SlimefunItems.CARGO_OUTPUT_NODE &&
                         nodeType != SlimefunItems.CARGO_OUTPUT_NODE_2 &&
                         nodeType != SlimefunItems.CARGO_INPUT_NODE
-        )) {
-            return;
-        }
+        )) return;
 
-        if (!Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b.getLocation(), Interaction.INTERACT_BLOCK)) {
+        if (!Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b.getLocation(), Interaction.INTERACT_BLOCK))
             return;
-        }
 
         if (act == Action.RIGHT_CLICK_BLOCK) {
-            if (p.isSneaking()) {
-                clearNode(b, p, getCargoNodeType(b));
-            } else {
-                copyNode(b, p, getCargoNodeType(b));
-            }
-        } else {
-            pasteNode(b, p, getCargoNodeType(b));
-        }
+            if (p.isSneaking()) clearNode(b, p, getCargoNodeType(b));
+            else copyNode(b, p, getCargoNodeType(b));
+        } else pasteNode(b, p, getCargoNodeType(b));
     }
 
     /**
@@ -112,11 +98,8 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
             BlockMenu parentInventory = BlockStorage.getInventory(parent);
             for (int i = 0; i < 9; i++) { // Iterate through all slots in cargo filter
                 ItemStack menuItem = parentInventory.getItemInSlot(CARGO_SLOTS[i]);
-                if (menuItem != null) {
-                    filterItems[i] = new CustomItemStack(menuItem, 1);
-                } else {
-                    filterItems[i] = null;
-                }
+                if (menuItem != null) filterItems[i] = new CustomItemStack(menuItem, 1);
+                else filterItems[i] = null;
             }
         }
 
@@ -160,19 +143,15 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
             Inventory playerInventory = p.getInventory();
 
             for (int i = 0; i < 9; i++) {
-
                 // Check if item already exists in slot
-                if (SlimefunUtils.isItemSimilar(filterItems[i], nodeMenu.getItemInSlot(CARGO_SLOTS[i]), true, false)) {
+                if (SlimefunUtils.isItemSimilar(filterItems[i], nodeMenu.getItemInSlot(CARGO_SLOTS[i]), true, false))
                     continue;
-                }
 
                 // Drop item in filter slot
                 clearFilterSlot(nodeMenu, CARGO_SLOTS[i], p);
 
                 // No need to insert new items in
-                if (filterItems[i] == null) {
-                    continue;
-                }
+                if (filterItems[i] == null) continue;
 
                 // Check if item not in inventory
                 if (!SlimefunUtils.containsSimilarItem(playerInventory, filterItems[i], true)) {
@@ -182,7 +161,7 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
                 }
 
                 // Consume item in player inventory
-                for (ItemStack playerItem : playerInventory) {
+                for (ItemStack playerItem : playerInventory)
                     if (SlimefunUtils.isItemSimilar(playerItem, filterItems[i], false, false)) {
                         playerItem.setAmount(playerItem.getAmount() - 1);
 
@@ -190,7 +169,6 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
                         nodeMenu.replaceExistingItem(CARGO_SLOTS[i], new CustomItemStack(playerItem, 1));
                         break;
                     }
-                }
             }
         }
 
@@ -237,9 +215,7 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
     private void clearNodeFilter(Block node, Player p) {
         // Empty filter contents
         BlockMenu nodeMenu = BlockStorage.getInventory(node);
-        for (int i = 0; i < 9; i++) {
-            clearFilterSlot(nodeMenu, CARGO_SLOTS[i], p);
-        }
+        for (int i = 0; i < 9; i++) clearFilterSlot(nodeMenu, CARGO_SLOTS[i], p);
     }
 
     private void clearFilterSlot(BlockMenu nodeMenu, int slot, Player p) {
@@ -254,15 +230,11 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
      * Get the SlimefunItemStack of the cargo node
      */
     private SlimefunItemStack getCargoNodeType(Block b) {
-        if (b == null) {
-            return null;
-        }
+        if (b == null) return null;
 
         String blockId = BlockStorage.checkID(b);
 
-        if (blockId == null) {
-            return null;
-        }
+        if (blockId == null) return null;
 
         return (SlimefunItemStack) SlimefunItem.getById(blockId).getItem();
     }
@@ -271,4 +243,4 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
         Particle.DustOptions dustOption = new Particle.DustOptions(color, 1);
         b.getLocation().getWorld().spawnParticle(Particle.REDSTONE, b.getLocation().add(0.5, 0.5, 0.5), 1, dustOption);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Dolly.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Dolly.java
similarity index 80%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Dolly.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Dolly.java
index 5f45ecc..a8909d0 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Dolly.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Dolly.java
@@ -1,5 +1,7 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerBackpack;
@@ -9,7 +11,6 @@ import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
@@ -32,7 +33,6 @@ import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
-
     private static final ItemStack LOCK_ITEM = Utils.buildNonInteractable(
             Material.DIRT, "&4&lDolly empty", "&cHow did you get in here?"
     );
@@ -40,8 +40,8 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
     private static final int DELAY = 500; // 500ms
     private final Map<Player, Long> timeouts;
 
-    public Dolly(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public Dolly(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
         this.timeouts = new HashMap<>();
     }
 
@@ -62,20 +62,15 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
 
             ItemStack dolly = e.getItem();
 
-            if (!e.getClickedBlock().isPresent()) {
-                return;
-            }
+            if (!e.getClickedBlock().isPresent()) return;
 
             Block b = e.getClickedBlock().get();
 
             // Block usage on Slimefun Blocks
-            if (BlockStorage.hasBlockInfo(b)) {
-                return;
-            }
+            if (BlockStorage.hasBlockInfo(b)) return;
 
             if (b.getType() == Material.CHEST && Slimefun.getProtectionManager().hasPermission(
-                    e.getPlayer(), b.getLocation(), Interaction.BREAK_BLOCK)
-            ) {
+                    e.getPlayer(), b.getLocation(), Interaction.BREAK_BLOCK)) {
 
                 // Create dolly if not already one
                 buildDolly(dolly, p);
@@ -83,14 +78,9 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
                 // Pick up the chest
                 pickupChest(dolly, b, p);
 
-
-            } else if (Slimefun.getProtectionManager().hasPermission(
-                    e.getPlayer(), b.getLocation(), Interaction.PLACE_BLOCK)
-            ) {
-
-                // Place new chest
-                placeChest(dolly, b.getRelative(e.getClickedFace()), p);
-            }
+            } else // Place new chest
+                if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b.getLocation(), Interaction.PLACE_BLOCK))
+                    placeChest(dolly, b.getRelative(e.getClickedFace()), p);
 
         };
     }
@@ -98,15 +88,12 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
     private void buildDolly(ItemStack dolly, Player p) {
         // Build backpack if new
         ItemMeta dollyMeta = dolly.getItemMeta();
-        for (String line : dollyMeta.getLore()) {
-            if (line.contains("ID: <ID>")) {
-                PlayerProfile.get(p, profile -> {
-                    int backpackId = profile.createBackpack(54).getId();
-                    Slimefun.getBackpackListener().setBackpackId(p, dolly, 3, backpackId);
-                    PlayerProfile.getBackpack(dolly, backpack -> backpack.getInventory().setItem(0, LOCK_ITEM));
-                });
-            }
-        }
+        for (String line : dollyMeta.getLore())
+            if (line.contains("ID: <ID>")) PlayerProfile.get(p, profile -> {
+                int backpackId = profile.createBackpack(54).getId();
+                Slimefun.getBackpackListener().setBackpackId(p, dolly, 3, backpackId);
+                PlayerProfile.getBackpack(dolly, backpack -> backpack.getInventory().setItem(0, LOCK_ITEM));
+            });
     }
 
     private void pickupChest(ItemStack dolly, Block chest, Player p) {
@@ -115,10 +102,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
         AtomicBoolean isDoubleChest = new AtomicBoolean(false);
 
         PlayerProfile.getBackpack(dolly, backpack -> {
-
-            if (backpack == null) {
-                return;
-            }
+            if (backpack == null) return;
 
             // Dolly full/empty status determined by lock item in first slot
             // Make sure the dolly is empty
@@ -128,18 +112,14 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
             }
 
             // Update old dollies to be able to store double chests
-            if (backpack.getSize() < 54) {
-                backpack.setSize(54);
-            }
+            if (backpack.getSize() < 54) backpack.setSize(54);
 
             backpack.getInventory().setStorageContents(chestInventory.getContents());
 
             // Add marker for single chests
-            if (chestInventory.getSize() == 54) { // Double chest (Avoid instanceof because of weird chest class setup)
-                isDoubleChest.set(true);
-            } else {
-                backpack.getInventory().setItem(27, LOCK_ITEM);
-            }
+            // Double chest (Avoid instanceof because of weird chest class setup)
+            if (chestInventory.getSize() == 54) isDoubleChest.set(true);
+            else backpack.getInventory().setItem(27, LOCK_ITEM);
 
             // Clear chest
             chestInventory.clear();
@@ -151,17 +131,13 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
         // Deals with async problems
         if (validOperation.get()) {
             if (isDoubleChest.get()) {
-
                 DoubleChest doubleChest = (DoubleChest) ((org.bukkit.block.Chest) chest.getState()).getInventory().getHolder();
 
                 // Set other side of chest to air
-                if (((org.bukkit.block.Chest) doubleChest.getLeftSide()).getLocation().equals(chest.getLocation())
-                ) {
+                if (((org.bukkit.block.Chest) doubleChest.getLeftSide()).getLocation().equals(chest.getLocation()))
                     ((org.bukkit.block.Chest) doubleChest.getRightSide()).getLocation().getBlock().setType(Material.AIR);
-                } else {
+                else
                     ((org.bukkit.block.Chest) doubleChest.getLeftSide()).getLocation().getBlock().setType(Material.AIR);
-                }
-
             }
 
             chest.setType(Material.AIR);
@@ -172,10 +148,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
 
     private void placeChest(ItemStack dolly, Block chestBlock, Player p) {
         PlayerProfile.getBackpack(dolly, backpack -> {
-
-            if (backpack == null) {
-                return;
-            }
+            if (backpack == null) return;
 
             // Update backpack size to fit doublechests
             if (backpack.getSize() == 27) {
@@ -196,7 +169,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
                 return;
             }
 
-            Utils.runSync(new BukkitRunnable() {
+            AbstractAddon.getScheduler().run(new BukkitRunnable() {
                 @Override
                 public void run() {
                     createChest(chestBlock, p, singleChest);
@@ -204,9 +177,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
                     backpack.getInventory().setItem(0, LOCK_ITEM);
 
                     // Shrink contents size if single chest
-                    if (singleChest) {
-                        bpContents[0] = Arrays.copyOf(bpContents[0], 27);
-                    }
+                    if (singleChest) bpContents[0] = Arrays.copyOf(bpContents[0], 27);
 
                     ((InventoryHolder) chestBlock.getState()).getInventory().setStorageContents(bpContents[0]);
                     dolly.setType(Material.MINECART);
@@ -217,12 +188,10 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
     }
 
     private boolean canChestFit(Block singleChestBlock, Player p, boolean singleChest) {
-
         boolean fits = singleChestBlock.getType() == Material.AIR;
 
-        if (!singleChest) {
+        if (!singleChest)
             fits = fits && getRightBlock(singleChestBlock, p.getFacing().getOppositeFace()).getType() == Material.AIR;
-        }
 
         return fits;
     }
@@ -260,7 +229,6 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
 
     @Nonnull
     private Block getRightBlock(Block b, BlockFace face) {
-
         BlockFace rightFace;
 
         switch (face) {
@@ -281,7 +249,6 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
         }
 
         return b.getRelative(rightFace);
-
     }
 
     private boolean isLockItem(@Nullable ItemStack lockItem) {
@@ -289,5 +256,4 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
                 || lockItem.getItemMeta().hasCustomModelData() // Remnants of when I didn't know what PDC was
                 && lockItem.getItemMeta().getCustomModelData() == 6969); // Leave in to maintain compatibility
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/FluffyWrench.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/FluffyWrench.java
similarity index 74%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/FluffyWrench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/FluffyWrench.java
index 30c1403..6d49a19 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/FluffyWrench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/FluffyWrench.java
@@ -1,27 +1,25 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.cargo.CargoNet;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.implementation.items.cargo.TrashCan;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
-import org.bukkit.event.Event;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.block.BlockBreakEvent;
@@ -46,17 +44,17 @@ public class FluffyWrench extends SimpleSlimefunItem<ItemUseHandler> implements
     private final HashMap<UUID, Long> cooldowns = new HashMap<>();
     private static final int WRENCH_DELAY = 250; // Not an itemsetting, too low causes dupes and no reason to increase
 
-    public FluffyWrench(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, Wrench type) {
-        super(category, item, recipeType, recipe);
+    public FluffyWrench(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, Wrench type) {
+        super(itemGroup, item, recipeType, recipe);
         this.type = type;
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Event.registerListeners(this);
     }
 
     @Nonnull
     @Override
     public ItemUseHandler getItemHandler() {
-        return e -> e.setUseBlock(Event.Result.DENY);
+        return e -> e.setUseBlock(org.bukkit.event.Event.Result.DENY);
     }
 
     @EventHandler
@@ -66,40 +64,32 @@ public class FluffyWrench extends SimpleSlimefunItem<ItemUseHandler> implements
 
         Long cooldown = cooldowns.get(p.getUniqueId());
         if (isItem(wrenchItem) && cooldown != null
-        ) {
-            if ((System.currentTimeMillis() - cooldown) < WRENCH_DELAY) {
-                return;
-            }
-        }
+        ) if ((System.currentTimeMillis() - cooldown) < WRENCH_DELAY) return;
         cooldowns.put(p.getUniqueId(), System.currentTimeMillis());
 
         Block block = e.getClickedBlock();
-        // Check if player has wrench and is left clicking block
+        // Check if player has wrench and is left-clicking block
         // Can't use offhand because a player can offhand the wrench to escape the event
         if (isItem(e.getItem()) && !isItem(p.getInventory().getItemInOffHand())
-            && e.getAction().toString().endsWith("_BLOCK")
-            && Slimefun.getProtectionManager().hasPermission(e.getPlayer(),
-            block.getLocation(), Interaction.BREAK_BLOCK)
+                && e.getAction().toString().endsWith("_BLOCK")
+                && Slimefun.getProtectionManager().hasPermission(e.getPlayer(),
+                block.getLocation(), Interaction.BREAK_BLOCK)
         ) {
             e.setCancelled(true);
             SlimefunItem slimefunBlock = BlockStorage.check(block);
 
             // Check if slimefunBlock is not a machine or a cargo component
             if (slimefunBlock == null
-                || (!(slimefunBlock instanceof EnergyNetComponent)
-                && !slimefunBlock.getId().startsWith("CARGO_NODE")
-                && !slimefunBlock.getId().equals(SlimefunItems.CARGO_MANAGER.getItemId())
-                && !(slimefunBlock instanceof TrashCan))
-            ) {
-                return;
-            }
+                    || (!(slimefunBlock instanceof EnergyNetComponent)
+                    && !slimefunBlock.getId().startsWith("CARGO_NODE")
+                    && !slimefunBlock.getId().equals(SlimefunItems.CARGO_MANAGER.getItemId())
+                    && !(slimefunBlock instanceof TrashCan))
+            ) return;
 
             if (!type.isElectric) {
                 damageItem(p, wrenchItem);
                 breakBlock(block, p);
-            } else if (removeItemCharge(wrenchItem, 1)) {
-                breakBlock(block, p);
-            }
+            } else if (removeItemCharge(wrenchItem, 1)) breakBlock(block, p);
         }
     }
 
@@ -119,11 +109,8 @@ public class FluffyWrench extends SimpleSlimefunItem<ItemUseHandler> implements
 
     @Override
     public float getMaxItemCharge(ItemStack item) {
-        if (!type.isElectric) {
-            return 0;
-        } else {
-            return type.getMaxCharge();
-        }
+        if (!type.isElectric) return 0;
+        else return type.getMaxCharge();
     }
 
     public enum Wrench {
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Paxel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Paxel.java
similarity index 73%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Paxel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Paxel.java
index d0c5334..8af7d32 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Paxel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Paxel.java
@@ -1,19 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Tag;
 import org.bukkit.block.Block;
@@ -24,8 +18,13 @@ import org.bukkit.event.block.BlockDamageEvent;
 import org.bukkit.event.entity.EntityDamageByEntityEvent;
 import org.bukkit.inventory.ItemStack;
 
-public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
+public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
     public final Set<Material> axeBlocks = Stream.of(
             Tag.LOGS.getValues(),
             Tag.PLANKS.getValues(),
@@ -48,10 +47,10 @@ public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
                     Material.BROWN_MUSHROOM_BLOCK, Material.RED_MUSHROOM_BLOCK, Material.BAMBOO, Material.VINE, Material.LECTERN))
     ).flatMap(Set::stream).collect(Collectors.toSet());
 
-    public Paxel(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public Paxel(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Event.registerListeners(this);
     }
 
     @EventHandler(ignoreCancelled = true)
@@ -69,54 +68,36 @@ public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
             if (item.getType() == Material.NETHERITE_PICKAXE
                     || item.getType() == Material.NETHERITE_AXE
                     || item.getType() == Material.NETHERITE_SHOVEL
-            ) {
-                netherite = true;
-            }
+            ) netherite = true;
 
             if (SlimefunTag.EXPLOSIVE_SHOVEL_BLOCKS.isTagged(blockType)) {
-                if (netherite) {
-                    item.setType(Material.NETHERITE_SHOVEL);
-                } else {
-                    item.setType(Material.DIAMOND_SHOVEL);
-                }
+                if (netherite) item.setType(Material.NETHERITE_SHOVEL);
+                else item.setType(Material.DIAMOND_SHOVEL);
             } else if (axeBlocks.contains(blockType)) {
-                if (netherite) {
-                    item.setType(Material.NETHERITE_AXE);
-                } else {
-                    item.setType(Material.DIAMOND_AXE);
-                }
+                if (netherite) item.setType(Material.NETHERITE_AXE);
+                else item.setType(Material.DIAMOND_AXE);
             } else {
-                if (netherite) {
-                    item.setType(Material.NETHERITE_PICKAXE);
-                } else {
-                    item.setType(Material.DIAMOND_PICKAXE);
-                }
+                if (netherite) item.setType(Material.NETHERITE_PICKAXE);
+                else item.setType(Material.DIAMOND_PICKAXE);
             }
         }
     }
 
     @EventHandler(ignoreCancelled = true)
     private void onEntityHit(EntityDamageByEntityEvent e) {
-        if (!(e.getDamager() instanceof Player)) {
-            return;
-        }
+        if (!(e.getDamager() instanceof Player)) return;
 
         Player p = (Player) e.getDamager();
         ItemStack item = p.getInventory().getItemInMainHand();
         SlimefunItem sfItem = SlimefunItem.getByItem(item);
 
         if (sfItem instanceof Paxel) {
-
             boolean netherite = item.getType() == Material.NETHERITE_PICKAXE
                     || item.getType() == Material.NETHERITE_AXE
                     || item.getType() == Material.NETHERITE_SHOVEL;
 
-            if (netherite) {
-                item.setType(Material.NETHERITE_AXE);
-            } else {
-                item.setType(Material.DIAMOND_AXE);
-            }
+            if (netherite) item.setType(Material.NETHERITE_AXE);
+            else item.setType(Material.DIAMOND_AXE);
         }
-
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/PortableCharger.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/PortableCharger.java
similarity index 79%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/PortableCharger.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/PortableCharger.java
index 4fec639..caeb23e 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/PortableCharger.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/PortableCharger.java
@@ -1,19 +1,20 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.GameMode;
@@ -25,7 +26,6 @@ import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitRunnable;
 
 import javax.annotation.Nonnull;
@@ -40,23 +40,21 @@ import java.util.List;
  * @author NCBPFluffyBear
  */
 public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implements Listener, Rechargeable {
-
     private final int[] BORDER = {5, 6, 7, 14, 16, 23, 24, 25};
     private final int POWER_SLOT = 11;
     private final int CHARGE_SLOT = 15;
     private final int INV_SIZE = 27;
     private final float CHARGE_CAPACITY;
     private final float CHARGE_SPEED;
-    private final Plugin plugin = FluffyMachines.getInstance();
 
-    public PortableCharger(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe,
+    public PortableCharger(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe,
                            int chargeCapacity, int chargeSpeed) {
-        super(category, item, recipeType, recipe);
+        super(itemGroup, item, recipeType, recipe);
 
         this.CHARGE_CAPACITY = chargeCapacity;
         this.CHARGE_SPEED = chargeSpeed;
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Event.registerListeners(this);
     }
 
     @Nonnull
@@ -86,14 +84,13 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
 
             inventory.setItem(POWER_SLOT, powerItem);
             updateSlot(inventory, POWER_SLOT, "&6&lPower Remaining",
-                "&e" + charger.getItemCharge(chargerItem) + "J");
+                    "&e" + charger.getItemCharge(chargerItem) + "J");
             inventory.clear(CHARGE_SLOT);
             p.openInventory(inventory);
 
             // Task that triggers every second
             new BukkitRunnable() {
                 public void run() {
-
                     ItemStack deviceItem = inventory.getItem(CHARGE_SLOT);
                     SlimefunItem sfItem = SlimefunItem.getByItem(deviceItem);
 
@@ -103,10 +100,9 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
                     }
 
                     if (sfItem instanceof Rechargeable) {
-
                         Rechargeable device = (Rechargeable) sfItem;
                         float neededCharge = device.getMaxItemCharge(deviceItem)
-                            - device.getItemCharge(deviceItem);
+                                - device.getItemCharge(deviceItem);
                         float availableCharge = charger.getItemCharge(chargerItem);
 
                         // Three different scenarios
@@ -115,24 +111,19 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
 
                         } else if (neededCharge > 0 && availableCharge > 0) {
 
-                            if (neededCharge >= CHARGE_SPEED && availableCharge >= CHARGE_SPEED) {
+                            if (neededCharge >= CHARGE_SPEED && availableCharge >= CHARGE_SPEED)
                                 transferCharge(charger, chargerItem, device, deviceItem, CHARGE_SPEED);
 
-                            } else {
-                                transferCharge(charger, chargerItem, device, deviceItem, Math.min(neededCharge,
+                            else transferCharge(charger, chargerItem, device, deviceItem, Math.min(neededCharge,
                                     availableCharge));
-                            }
 
-                        } else if (neededCharge == 0) {
-                            Utils.send(p, "&cThis item is already full!");
+                        } else if (neededCharge == 0) Utils.send(p, "&cThis item is already full!");
 
-                        } else {
-                            Utils.send(p, "&cYour charger does not have enough power!");
-                        }
+                        else Utils.send(p, "&cYour charger does not have enough power!");
 
                         // The name of the powerItem NEEDS to be "Portable Charger" to cancel event
                         updateSlot(inventory, POWER_SLOT, "&6&lPower Remaining",
-                            "&e" + charger.getItemCharge(chargerItem) + "J");
+                                "&e" + charger.getItemCharge(chargerItem) + "J");
                     }
 
                     // Check if GUI is no longer open
@@ -148,7 +139,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
                         }
                     }
                 }
-            }.runTaskTimer(plugin, 0, 20);
+            }.runTaskTimer(AbstractAddon.getInstance(), 0, 20);
         };
     }
 
@@ -157,26 +148,20 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
         SlimefunItem sfItem1 = SlimefunItem.getByItem(e.getCurrentItem());
         SlimefunItem sfItem2 = SlimefunItem.getByItem(e.getCursor());
         if ((sfItem1 instanceof PortableCharger || sfItem2 instanceof PortableCharger)
-            && e.getWhoClicked().getOpenInventory().getTitle().contains("Portable Charger")) {
+                && e.getWhoClicked().getOpenInventory().getTitle().contains("Portable Charger"))
             e.setCancelled(true);
-        }
     }
 
     public void updateSlot(Inventory inventory, int slot, String name, String... lore) {
         ItemStack item = inventory.getItem(slot);
         ItemMeta slotMeta = item.getItemMeta();
-        if (name != null) {
-            slotMeta.setDisplayName(ChatColors.color(name));
-        } else {
-            slotMeta.setDisplayName(" ");
-        }
+        if (name != null) slotMeta.setDisplayName(ChatColors.color(name));
+        else slotMeta.setDisplayName(" ");
 
         if (lore.length > 0) {
             List<String> lines = new ArrayList<>();
 
-            for (String line : lore) {
-                lines.add(ChatColor.translateAlternateColorCodes('&', line));
-            }
+            for (String line : lore) lines.add(ChatColor.translateAlternateColorCodes('&', line));
             slotMeta.setLore(lines);
         }
         item.setItemMeta(slotMeta);
@@ -184,7 +169,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
     }
 
     public void transferCharge(Rechargeable charger, ItemStack chargerItem, Rechargeable device, ItemStack deviceItem
-        , float charge) {
+            , float charge) {
         charger.removeItemCharge(chargerItem, charge);
         device.addItemCharge(deviceItem, charge);
     }
@@ -202,7 +187,6 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
     @Getter
     @AllArgsConstructor(access = AccessLevel.PRIVATE)
     public enum Type {
-
         SMALL(128, 8),
         MEDIUM(512, 32),
         BIG(1024, 64),
@@ -211,6 +195,5 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
 
         public final int chargeCapacity;
         public final int chargeSpeed;
-
     }
 }
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Scythe.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Scythe.java
similarity index 75%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Scythe.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Scythe.java
index c70eb6d..24494a8 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Scythe.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Scythe.java
@@ -1,13 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ToolUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.blocks.Vein;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Bukkit;
@@ -23,11 +23,10 @@ import javax.annotation.Nonnull;
 import java.util.List;
 
 public class Scythe extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable {
-
     private static final int MAX_BROKEN = 5;
 
-    public Scythe(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public Scythe(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
@@ -45,32 +44,25 @@ public class Scythe extends SimpleSlimefunItem<ItemUseHandler> implements NotPla
 
     public ToolUseHandler onBlockBreak() {
         return (e, tool, fortune, drops) -> {
-
-            if (e instanceof AlternateBreakEvent) {
-                return;
-            }
+            if (e instanceof AlternateBreakEvent) return;
 
             if (e.getBlock().getBlockData() instanceof Ageable
-                && ((Ageable) e.getBlock().getBlockData()).getAge()
-                == ((Ageable) e.getBlock().getBlockData()).getMaximumAge()) {
+                    && ((Ageable) e.getBlock().getBlockData()).getAge()
+                    == ((Ageable) e.getBlock().getBlockData()).getMaximumAge()) {
                 List<Block> crops = Vein.find(e.getBlock(), MAX_BROKEN, b -> Tag.CROPS.isTagged(b.getType()));
 
                 crops.remove(e.getBlock());
 
                 boolean creative = e.getPlayer().getGameMode() == GameMode.CREATIVE;
 
-                for (Block b : crops) {
+                for (Block b : crops)
                     if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b, Interaction.BREAK_BLOCK)) {
                         AlternateBreakEvent breakEvent = new AlternateBreakEvent(b, e.getPlayer());
                         Bukkit.getPluginManager().callEvent(breakEvent);
-                        if (creative) {
-                            b.setType(Material.AIR);
-                        } else {
-                            b.breakNaturally(tool);
-                        }
+                        if (creative) b.setType(Material.AIR);
+                        else b.breakNaturally(tool);
                     }
-                }
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosivePickaxe.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
similarity index 78%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
index 90392fe..d4272b4 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
@@ -1,9 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
-import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosiveShovel;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosiveShovel;
 import org.bukkit.block.Block;
 import org.bukkit.inventory.ItemStack;
 
@@ -16,10 +16,8 @@ import org.bukkit.inventory.ItemStack;
  * @see UpgradedExplosiveTool
  */
 public class UpgradedExplosivePickaxe extends UpgradedExplosiveTool {
-
-    public UpgradedExplosivePickaxe(ItemGroup category, SlimefunItemStack item,
+    public UpgradedExplosivePickaxe(ItemGroup itemGroup, SlimefunItemStack item,
                                     RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+        super(itemGroup, item, recipeType, recipe);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveShovel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveShovel.java
similarity index 73%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveShovel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveShovel.java
index 3b65207..31adb14 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveShovel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveShovel.java
@@ -1,12 +1,12 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosivePickaxe;
-import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosivePickaxe;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
@@ -14,23 +14,21 @@ import org.bukkit.inventory.ItemStack;
 /**
  * The {@link UpgradedExplosiveShovel} works similar to the
  * {@link io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosivePickaxe}.
- * However it can only break blocks that a shovel can break.
+ * However, it can only break blocks that a shovel can break.
  *
  * @author Linox, NCBPFluffyBear
  * @see ExplosivePickaxe
  * @see UpgradedExplosiveTool
  */
 public class UpgradedExplosiveShovel extends UpgradedExplosiveTool {
-
-    public UpgradedExplosiveShovel(ItemGroup category, SlimefunItemStack item, RecipeType recipeType,
+    public UpgradedExplosiveShovel(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType,
                                    ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
     protected boolean canBreak(Player p, Block b) {
         return SlimefunTag.EXPLOSIVE_SHOVEL_BLOCKS.isTagged(b.getType())
-            && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.BREAK_BLOCK);
+                && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.BREAK_BLOCK);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveTool.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveTool.java
similarity index 68%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveTool.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveTool.java
index 1dd34dc..8f16343 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveTool.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveTool.java
@@ -1,17 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
 import io.github.thebusybiscuit.slimefun4.api.events.ExplosiveToolBreakBlocksEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ToolUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosiveTool;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Bukkit;
 import org.bukkit.Effect;
 import org.bukkit.Material;
@@ -35,14 +35,13 @@ import java.util.List;
  * @see UpgradedExplosiveShovel
  */
 class UpgradedExplosiveTool extends ExplosiveTool {
-
     private final ItemSetting<Boolean> damageOnUse;
     private final ItemSetting<Boolean> callExplosionEvent;
     private final ItemSetting<Boolean> breakFromCenter = new ItemSetting<>(this, "break-from-center", false);
     private final ItemSetting<Boolean> triggerOtherPlugins = new ItemSetting<>(this, "trigger-other-plugins", true);
 
-    public UpgradedExplosiveTool(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public UpgradedExplosiveTool(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemSetting(breakFromCenter, triggerOtherPlugins);
 
@@ -54,10 +53,7 @@ class UpgradedExplosiveTool extends ExplosiveTool {
     @Override
     public ToolUseHandler getItemHandler() {
         return (e, tool, fortune, drops) -> {
-
-            if (e instanceof AlternateBreakEvent) {
-                return;
-            }
+            if (e instanceof AlternateBreakEvent) return;
 
             Player p = e.getPlayer();
             Block b = e.getBlock();
@@ -66,11 +62,8 @@ class UpgradedExplosiveTool extends ExplosiveTool {
             b.getWorld().playSound(b.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 0.2F, 1F);
 
             BlockFace face = p.getFacing();
-            if (p.getLocation().getPitch() > 67.5) {
-                face = BlockFace.DOWN;
-            } else if (p.getLocation().getPitch() < -67.5) {
-                face = BlockFace.UP;
-            }
+            if (p.getLocation().getPitch() > 67.5) face = BlockFace.DOWN;
+            else if (p.getLocation().getPitch() < -67.5) face = BlockFace.UP;
             List<Block> blocks = findBlocks(b, face);
             breakBlocks(p, tool, b, blocks, drops);
         };
@@ -83,29 +76,14 @@ class UpgradedExplosiveTool extends ExplosiveTool {
             BlockExplodeEvent blockExplodeEvent = new BlockExplodeEvent(b, blocks, 0);
             Bukkit.getServer().getPluginManager().callEvent(blockExplodeEvent);
 
-            if (!blockExplodeEvent.isCancelled()) {
-                for (Block block : blockExplodeEvent.blockList()) {
-                    if (canBreak(p, block)) {
-                        blocksToDestroy.add(block);
-                    }
-                }
-            }
-        } else {
-            for (Block block : blocks) {
-                if (canBreak(p, block)) {
-                    blocksToDestroy.add(block);
-                }
-            }
-        }
+            if (!blockExplodeEvent.isCancelled())
+                for (Block block : blockExplodeEvent.blockList()) if (canBreak(p, block)) blocksToDestroy.add(block);
+        } else for (Block block : blocks) if (canBreak(p, block)) blocksToDestroy.add(block);
 
         ExplosiveToolBreakBlocksEvent event = new ExplosiveToolBreakBlocksEvent(p, b, blocksToDestroy, item, this);
         Bukkit.getServer().getPluginManager().callEvent(event);
 
-        if (!event.isCancelled()) {
-            for (Block block : blocksToDestroy) {
-                breakBlock(p, item, block, drops);
-            }
-        }
+        if (!event.isCancelled()) for (Block block : blocksToDestroy) breakBlock(p, item, block, drops);
     }
 
     private List<Block> findBlocks(Block b, BlockFace face) {
@@ -113,27 +91,19 @@ class UpgradedExplosiveTool extends ExplosiveTool {
         Block center = b;
 
         // Shift center block
-        if (!breakFromCenter.getValue()) {
-            center = b.getRelative(face, 2);
-        }
-        for (int x = -2; x <= 2; x++) {
-            for (int y = -2; y <= 2; y++) {
+        if (!breakFromCenter.getValue()) center = b.getRelative(face, 2);
+        for (int x = -2; x <= 2; x++)
+            for (int y = -2; y <= 2; y++)
                 for (int z = -2; z <= 2; z++) {
 
                     Block relative = center.getRelative(x, y, z);
 
                     // Skip the hit block
-                    if (relative.getLocation().equals(b.getLocation())) {
-                        continue;
-                    }
+                    if (relative.getLocation().equals(b.getLocation())) continue;
 
                     // Small check to reduce lag
-                    if (relative.getType() != Material.AIR) {
-                        blocks.add(relative);
-                    }
+                    if (relative.getType() != Material.AIR) blocks.add(relative);
                 }
-            }
-        }
         return blocks;
     }
 
@@ -143,17 +113,11 @@ class UpgradedExplosiveTool extends ExplosiveTool {
     }
 
     protected boolean canBreak(@Nonnull Player p, @Nonnull Block b) {
-        if (b.isEmpty() || b.isLiquid()) {
-            return false;
-        } else if (SlimefunTag.UNBREAKABLE_MATERIALS.isTagged(b.getType())) {
-            return false;
-        } else if (!b.getWorld().getWorldBorder().isInside(b.getLocation())) {
-            return false;
-        } else if (Slimefun.getIntegrations().isCustomBlock(b)) {
-            return false;
-        } else {
-            return Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.BREAK_BLOCK);
-        }
+        if (b.isEmpty() || b.isLiquid()) return false;
+        else if (SlimefunTag.UNBREAKABLE_MATERIALS.isTagged(b.getType())) return false;
+        else if (!b.getWorld().getWorldBorder().isInside(b.getLocation())) return false;
+        else if (Slimefun.getIntegrations().isCustomBlock(b)) return false;
+        else return Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.BREAK_BLOCK);
     }
 
     private void breakBlock(Player p, ItemStack item, Block b, List<ItemStack> drops) {
@@ -164,9 +128,7 @@ class UpgradedExplosiveTool extends ExplosiveTool {
         SlimefunItem sfItem = BlockStorage.check(b);
 
         // Don't break SF blocks
-        if (sfItem != null) {
-            return;
-        }
+        if (sfItem != null) return;
 
         if (triggerOtherPlugins.getValue()) {
             AlternateBreakEvent breakEvent = new AlternateBreakEvent(b, p);
@@ -177,4 +139,4 @@ class UpgradedExplosiveTool extends ExplosiveTool {
 
         damageItem(p, item);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedLumberAxe.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedLumberAxe.java
similarity index 78%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedLumberAxe.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedLumberAxe.java
index 2b93d40..726e56f 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedLumberAxe.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedLumberAxe.java
@@ -1,18 +1,18 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ToolUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Axis;
-import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Sound;
 import org.bukkit.Tag;
@@ -26,15 +26,14 @@ import java.util.List;
 import java.util.function.Predicate;
 
 public class UpgradedLumberAxe extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable {
-
     private static final int MAX_BROKEN = 200;
     private static final int MAX_STRIPPED = 200;
     private static final int RANGE = 2;
 
     private final ItemSetting<Boolean> triggerOtherPlugins = new ItemSetting<>(this, "trigger-other-plugins", true);
 
-    public UpgradedLumberAxe(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public UpgradedLumberAxe(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
@@ -50,27 +49,21 @@ public class UpgradedLumberAxe extends SimpleSlimefunItem<ItemUseHandler> implem
             if (Tag.LOGS.getValues().contains(e.getBlock().getType())) {
 
                 // Prevent use on Slimefun blocks
-                if (BlockStorage.checkID(e.getBlock()) != null) {
-                    return;
-                }
+                if (BlockStorage.checkID(e.getBlock()) != null) return;
 
-                if (e instanceof AlternateBreakEvent) {
-                    return;
-                }
+                if (e instanceof AlternateBreakEvent) return;
 
                 List<Block> logs = find(e.getBlock(), MAX_BROKEN, b -> Tag.LOGS.isTagged(b.getType()));
 
                 logs.remove(e.getBlock());
 
-                for (Block b : logs) {
+                for (Block b : logs)
                     if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b,
-                        Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null) {
-                        if (triggerOtherPlugins.getValue()) {
-                            Bukkit.getPluginManager().callEvent(new AlternateBreakEvent(b, e.getPlayer()));
-                        }
+                            Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null) {
+                        if (triggerOtherPlugins.getValue())
+                            Event.call(new AlternateBreakEvent(b, e.getPlayer()));
                         b.breakNaturally(tool);
                     }
-                }
             }
         };
     }
@@ -87,12 +80,10 @@ public class UpgradedLumberAxe extends SimpleSlimefunItem<ItemUseHandler> implem
 
                     logs.remove(block);
 
-                    for (Block b : logs) {
+                    for (Block b : logs)
                         if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b,
-                            Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null) {
+                                Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null)
                             stripLog(b);
-                        }
-                    }
                 }
             }
         };
@@ -119,20 +110,15 @@ public class UpgradedLumberAxe extends SimpleSlimefunItem<ItemUseHandler> implem
     }
 
     private static void expand(Block anchor, List<Block> list, int limit, Predicate<Block> predicate) {
-
         if (list.size() < limit) {
             list.add(anchor);
-            for (int x = -RANGE; x <= RANGE; x++) {
-                for (int z = -RANGE; z <= RANGE; z++) {
+            for (int x = -RANGE; x <= RANGE; x++)
+                for (int z = -RANGE; z <= RANGE; z++)
                     for (int y = -RANGE; y <= RANGE; y++) {
                         Block next = anchor.getRelative(x, y, z);
-                        if (!list.contains(next) && predicate.test(next)) {
-                            expand(next, list, limit, predicate);
-                        }
+                        if (!list.contains(next) && predicate.test(next)) expand(next, list, limit, predicate);
                     }
-                }
-            }
 
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WarpPadConfigurator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WarpPadConfigurator.java
similarity index 71%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WarpPadConfigurator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WarpPadConfigurator.java
index 3ffd6c2..30ae52b 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WarpPadConfigurator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WarpPadConfigurator.java
@@ -1,5 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.common.Event;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -9,11 +13,7 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.HologramOwner;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.NamespacedKey;
 import org.bukkit.block.Block;
@@ -31,38 +31,33 @@ import org.bukkit.persistence.PersistentDataType;
 import java.util.List;
 
 public class WarpPadConfigurator extends SlimefunItem implements HologramOwner, Listener {
-
-    private final NamespacedKey xCoord = new NamespacedKey(FluffyMachines.getInstance(), "xCoordinate");
-    private final NamespacedKey yCoord = new NamespacedKey(FluffyMachines.getInstance(), "yCoordinate");
-    private final NamespacedKey zCoord = new NamespacedKey(FluffyMachines.getInstance(), "zCoordinate");
-    private final NamespacedKey world = new NamespacedKey(FluffyMachines.getInstance(), "world");
+    private final NamespacedKey xCoord = AbstractAddon.createKey("xCoordinate");
+    private final NamespacedKey yCoord = AbstractAddon.createKey("yCoordinate");
+    private final NamespacedKey zCoord = AbstractAddon.createKey("zCoordinate");
+    private final NamespacedKey world = AbstractAddon.createKey("world");
 
     private static final int LORE_COORDINATE_INDEX = 4;
     private final ItemSetting<Integer> MAX_DISTANCE = new ItemSetting<>(this, "max-distance", 100);
 
-    public WarpPadConfigurator(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public WarpPadConfigurator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Event.registerListeners(this);
 
         addItemSetting(MAX_DISTANCE);
-
     }
 
     @EventHandler
     private void onInteract(PlayerInteractEvent e) {
-
-        if (e.getClickedBlock() == null || e.getHand() != EquipmentSlot.HAND) {
-            return;
-        }
+        if (e.getClickedBlock() == null || e.getHand() != EquipmentSlot.HAND) return;
 
         Block b = e.getClickedBlock();
         Player p = e.getPlayer();
 
         if (BlockStorage.hasBlockInfo(b) && BlockStorage.check(b) == FluffyItems.WARP_PAD.getItem()
-            && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.PLACE_BLOCK)) {
+                && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.PLACE_BLOCK)) {
             if (SlimefunUtils.isItemSimilar(p.getInventory().getItemInMainHand(), FluffyItems.WARP_PAD_CONFIGURATOR,
-                false)) {
+                    false)) {
 
                 ItemStack item = p.getInventory().getItemInMainHand();
                 ItemMeta meta = item.getItemMeta();
@@ -70,7 +65,6 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
                 PersistentDataContainer pdc = meta.getPersistentDataContainer();
 
                 if (e.getAction() == Action.RIGHT_CLICK_BLOCK) {
-
                     // Destination
                     if (p.isSneaking()) {
                         pdc.set(world, PersistentDataType.STRING, b.getWorld().getName());
@@ -79,7 +73,7 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
                         pdc.set(yCoord, PersistentDataType.INTEGER, b.getY());
                         pdc.set(zCoord, PersistentDataType.INTEGER, b.getZ());
                         lore.set(LORE_COORDINATE_INDEX, ChatColor.translateAlternateColorCodes(
-                            '&', "&eLinked Coordinates: &7" + b.getX() + ", " + b.getY() + ", " + b.getZ()));
+                                '&', "&eLinked Coordinates: &7" + b.getX() + ", " + b.getY() + ", " + b.getZ()));
 
                         meta.setLore(lore);
                         item.setItemMeta(meta);
@@ -88,18 +82,18 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
                         BlockStorage.addBlockInfo(b, "type", "destination");
                         Utils.send(p, "&3This pad has been marked as a &aDestination &3and bound to your configurator");
 
-                    // Origin
+                        // Origin
                     } else if (pdc.has(world, PersistentDataType.STRING) && b.getWorld().getName().equals(
-                        pdc.get(world, PersistentDataType.STRING))) {
+                            pdc.get(world, PersistentDataType.STRING))) {
                         int x = pdc.getOrDefault(xCoord, PersistentDataType.INTEGER, 0);
                         int y = pdc.getOrDefault(yCoord, PersistentDataType.INTEGER, 0);
                         int z = pdc.getOrDefault(zCoord, PersistentDataType.INTEGER, 0);
 
                         if (Math.abs(x - b.getX()) > MAX_DISTANCE.getValue()
-                            || Math.abs(z - b.getZ()) > MAX_DISTANCE.getValue()) {
+                                || Math.abs(z - b.getZ()) > MAX_DISTANCE.getValue()) {
 
                             Utils.send(p, "&cYou can not link blocks more than "
-                                + MAX_DISTANCE.getValue() + " blocks apart!");
+                                    + MAX_DISTANCE.getValue() + " blocks apart!");
 
                             return;
                         }
@@ -107,19 +101,13 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
                         registerOrigin(b, x, y, z);
 
                         Utils.send(p, "&3This pad has been marked as an &aOrigin &3and your configurator's settings " +
-                            "have been pasted onto this pad");
-
-                    } else {
+                                "have been pasted onto this pad");
 
+                    } else
                         Utils.send(p, "&cSneak and right click on a Warp Pad to set the destination, then right click" +
-                            " " + "another Warp Pad tp set the origin!");
-                    }
-
+                                " " + "another Warp Pad tp set the origin!");
                 }
-
-            } else {
-                Utils.send(p, "&cConfigure this Warp Pad using a Warp Pad Configurator");
-            }
+            } else Utils.send(p, "&cConfigure this Warp Pad using a Warp Pad Configurator");
         }
     }
 
@@ -132,4 +120,4 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
 
         updateHologram(b, "&a&lOrigin");
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WateringCan.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WateringCan.java
similarity index 76%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WateringCan.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WateringCan.java
index 08786a0..5b98056 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WateringCan.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WateringCan.java
@@ -1,31 +1,22 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.CancelPlace;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.items.settings.DoubleRangeSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.settings.IntRangeSetting;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import io.ncbpfluffybear.fluffymachines.utils.CancelPlace;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import org.bukkit.Bukkit;
-import org.bukkit.Effect;
-import org.bukkit.FluidCollisionMode;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Particle;
-import org.bukkit.Sound;
-import org.bukkit.Tag;
-import org.bukkit.TreeType;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.Ageable;
@@ -43,19 +34,18 @@ import java.util.List;
 import java.util.concurrent.ThreadLocalRandom;
 
 public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements CancelPlace {
-
     public final ItemSetting<Integer> maxUses = new IntRangeSetting(this, "max-uses", 0, 10, Integer.MAX_VALUE);
-    public final ItemSetting<Double> sugarCaneSuccessChance = new DoubleRangeSetting(this, "sugar-cane-success-chance", 0, 0.3 ,1);
+    public final ItemSetting<Double> sugarCaneSuccessChance = new DoubleRangeSetting(this, "sugar-cane-success-chance", 0, 0.3, 1);
     public final ItemSetting<Double> cropSuccessChance = new DoubleRangeSetting(this, "crop-success-chance", 0, 0.3, 1);
     public final ItemSetting<Double> treeSuccessChance = new DoubleRangeSetting(this, "tree-success-chance", 0, 0.3, 1);
     public final ItemSetting<Double> exoticGardenSuccessChance = new DoubleRangeSetting(this, "exotic-garden-success-chance", 0, 0.3, 1);
 
     private static final int USE_INDEX = 7;
     private static final int MAX_SUGAR_GROW_HEIGHT = 5;
-    private static final NamespacedKey usageKey = new NamespacedKey(FluffyMachines.getInstance(), "watering_can_usage");
+    private static final NamespacedKey usageKey = AbstractAddon.createKey("watering_can_usage");
 
-    public WateringCan(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public WateringCan(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemSetting(maxUses);
         addItemSetting(sugarCaneSuccessChance);
@@ -70,64 +60,49 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
         return e -> {
             Player p = e.getPlayer();
 
-            if (!isItem(p.getInventory().getItemInMainHand()))
-                return;
+            if (!isItem(p.getInventory().getItemInMainHand())) return;
 
             e.cancel();
 
             RayTraceResult rayResult = p.rayTraceBlocks(5d, FluidCollisionMode.SOURCE_ONLY);
 
             if (rayResult != null) {
-
                 Block b = rayResult.getHitBlock();
                 Location blockLocation = b.getLocation();
 
                 if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), blockLocation,
-                    Interaction.BREAK_BLOCK)) {
-
+                        Interaction.BREAK_BLOCK)) {
                     ItemStack item = e.getItem();
                     BlockData blockData = b.getBlockData();
 
                     // Fill if it hits water
-                    if (b.getType() == Material.WATER) {
-                        updateUses(this, p, item, 2);
+                    if (b.getType() == Material.WATER) updateUses(this, p, item, 2);
 
                         // Sugar Cane
-                    } else if (b.getType() == Material.SUGAR_CANE) {
-
+                    else if (b.getType() == Material.SUGAR_CANE) {
                         int distance = 2;
                         Block above = b.getRelative(BlockFace.UP);
 
                         while (above.getType() == Material.SUGAR_CANE) {
-
                             // Failsafe
-                            if (distance >= MAX_SUGAR_GROW_HEIGHT) {
-                                //Utils.send(p, "&cThis sugar cane is too tall!");
-                                return;
-                            }
+                            if (distance >= MAX_SUGAR_GROW_HEIGHT) return;
 
                             above = b.getRelative(BlockFace.UP, distance);
                             distance++;
                         }
 
                         if (above.getType() == Material.AIR) {
-
-                            if (!updateUses(this, p, item, 1))
-                                return;
+                            if (!updateUses(this, p, item, 1)) return;
                             blockLocation.getWorld().spawnParticle(Particle.WATER_SPLASH, blockLocation, 0);
                             double random = ThreadLocalRandom.current().nextDouble();
                             if (random < sugarCaneSuccessChance.getValue()) {
                                 above.setType(Material.SUGAR_CANE);
                                 blockLocation.getWorld().playEffect(blockLocation, Effect.VILLAGER_PLANT_GROW, 0);
                             }
-
-                        } else {
-                            //Utils.send(p, "&cThe sugar cane is obstructed!");
                         }
 
                         // Crops
                     } else if (blockData instanceof Ageable) {
-
                         Ageable crop = (Ageable) blockData;
                         int currentAge = crop.getAge();
                         int maxAge = crop.getMaximumAge();
@@ -141,20 +116,13 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
                                     blockLocation.getWorld().playEffect(blockLocation, Effect.VILLAGER_PLANT_GROW, 0);
                                 }
                             }
-
-                        } else {
-                            //Utils.send(p, "&cThis crop is already ready for harvest!");
-                            return;
-                        }
+                        } else return;
 
                         b.setBlockData(blockData);
 
                         // Trees
                     } else if (Tag.SAPLINGS.isTagged(b.getType())) {
-
-                        if (!updateUses(this, p, item, 1)) {
-                            return;
-                        }
+                        if (!updateUses(this, p, item, 1)) return;
 
                         blockLocation.getWorld().spawnParticle(Particle.WATER_SPLASH, blockLocation, 0);
                         double random = ThreadLocalRandom.current().nextDouble();
@@ -167,27 +135,19 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
                             }
                             if (random < exoticGardenSuccessChance.getValue()) {
                                 Bukkit.getPluginManager().callEvent(new StructureGrowEvent(
-                                    b.getLocation(), getTreeFromSapling(saplingMaterial), false, p, Collections.singletonList(b.getState())
+                                        b.getLocation(), getTreeFromSapling(saplingMaterial), false, p, Collections.singletonList(b.getState())
                                 ));
                                 blockLocation.getWorld().playEffect(blockLocation, Effect.VILLAGER_PLANT_GROW, 0);
-
                             }
-
                         } else {
-
                             if (Constants.SERVER_VERSION < 1163) {
                                 if (random < treeSuccessChance.getValue()) {
-
                                     b.setType(Material.AIR);
                                     if (!blockLocation.getWorld().generateTree(blockLocation,
-                                        getTreeFromSapling(saplingMaterial))) {
-                                        b.setType(saplingMaterial);
-                                    }
+                                            getTreeFromSapling(saplingMaterial))) b.setType(saplingMaterial);
                                     blockLocation.getWorld().playEffect(blockLocation, Effect.VILLAGER_PLANT_GROW, 0);
                                 }
-                            } else {
-                                b.applyBoneMeal(p.getFacing());
-                            }
+                            } else b.applyBoneMeal(p.getFacing());
                         }
                     }
                 }
@@ -196,13 +156,11 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
     }
 
     public static boolean updateUses(WateringCan can, Player p, ItemStack item, int updateType) {
-
         ItemMeta meta = item.getItemMeta();
         List<String> lore = meta.getLore();
         int usesLeft = meta.getPersistentDataContainer().getOrDefault(usageKey, PersistentDataType.INTEGER, 0);
 
         if (updateType == 1) {
-
             if (usesLeft == 0) {
                 Utils.send(p, "&cYou need to refill your Watering Can!");
                 return false;
@@ -222,9 +180,7 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
             }
             usesLeft = 0;
             p.playSound(p.getLocation(), Sound.ITEM_BUCKET_EMPTY, 0.5F, 1F);
-        } else {
-            p.sendMessage("Error");
-        }
+        } else p.sendMessage("Error");
 
         lore.set(USE_INDEX, ChatColors.color("&aUses Left: &e" + usesLeft));
         meta.setLore(lore);
@@ -238,12 +194,10 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
     private static TreeType getTreeFromSapling(Material m) {
         TreeType treeType = TreeType.TREE;
         String parseSapling = m.toString()
-            .replace("_SAPLING", "");
+                .replace("_SAPLING", "");
 
         if (!parseSapling.equals("OAK")) {
-            if (parseSapling.equals("JUNGLE")) {
-                parseSapling = "SMALL_JUNGLE";
-            }
+            if (parseSapling.equals("JUNGLE")) parseSapling = "SMALL_JUNGLE";
             return TreeType.valueOf(parseSapling);
         }
         return treeType;
@@ -252,5 +206,4 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
     public ItemSetting<Integer> getUses() {
         return this.maxUses;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/listeners/KeyedCrafterListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/listeners/KeyedCrafterListener.java
similarity index 83%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/listeners/KeyedCrafterListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/listeners/KeyedCrafterListener.java
index a381a0c..fda622f 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/listeners/KeyedCrafterListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/listeners/KeyedCrafterListener.java
@@ -1,15 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.listeners;
+package id.universenetwork.sfa_loader.addons.fluffymachines.listeners;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.AutoCraftingTable;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.SmartFactory;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.ncbpfluffybear.fluffymachines.machines.AutoCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.SmartFactory;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.Optional;
-import javax.annotation.Nullable;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.apache.commons.lang.WordUtils;
 import org.bukkit.Material;
@@ -21,11 +19,10 @@ import org.bukkit.event.Listener;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 
-public class KeyedCrafterListener implements Listener {
-
-    public KeyedCrafterListener() {
-    }
+import javax.annotation.Nullable;
+import java.util.Optional;
 
+public class KeyedCrafterListener implements Listener {
     @EventHandler
     private void onSmartFactoryInteract(PlayerRightClickEvent e) {
         Optional<Block> clickedBlock = e.getClickedBlock();
@@ -33,9 +30,7 @@ public class KeyedCrafterListener implements Listener {
         if (e.getHand() == EquipmentSlot.HAND && e.useBlock() != Event.Result.DENY && clickedBlock.isPresent() && e.getPlayer().isSneaking()) {
             Optional<SlimefunItem> slimefunBlock = e.getSlimefunBlock();
 
-            if (!slimefunBlock.isPresent()) {
-                return;
-            }
+            if (!slimefunBlock.isPresent()) return;
 
             SlimefunItem sfBlock = slimefunBlock.get();
             ItemStack item = e.getItem();
@@ -45,10 +40,7 @@ public class KeyedCrafterListener implements Listener {
 
             // Handle SmartFactory recipe setting
             if (sfBlock instanceof SmartFactory) {
-
-                if (isCargoNode(key)) {
-                    return;
-                }
+                if (isCargoNode(key)) return;
                 e.cancel();
 
                 if (key == null) {
@@ -63,15 +55,10 @@ public class KeyedCrafterListener implements Listener {
                             SmartFactory.getDisplayItem(key, ((RecipeDisplayItem) sfBlock).getDisplayRecipes())
                     );
                     Utils.send(p, "&aTarget recipe set to " + key.getItemName());
-                } else {
-                    Utils.send(p, "&cThis item is not supported!");
-                }
+                } else Utils.send(p, "&cThis item is not supported!");
 
             } else if (sfBlock instanceof AutoCraftingTable) {
-
-                if (isCargoNode(key)) {
-                    return;
-                }
+                if (isCargoNode(key)) return;
                 e.cancel();
 
                 if (item.getType() == Material.AIR) {
@@ -94,4 +81,4 @@ public class KeyedCrafterListener implements Listener {
         return recipe != null && (recipe.getItem() == SlimefunItems.CARGO_INPUT_NODE
                 || recipe.getItem() == SlimefunItems.CARGO_OUTPUT_NODE || recipe.getItem() == SlimefunItems.CARGO_OUTPUT_NODE_2);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedAutoDisenchanter.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedAutoDisenchanter.java
similarity index 87%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedAutoDisenchanter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedAutoDisenchanter.java
index 3d5efb5..6cd7073 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedAutoDisenchanter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedAutoDisenchanter.java
@@ -1,5 +1,7 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -15,13 +17,6 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
@@ -41,8 +36,13 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
 import org.bukkit.inventory.meta.ItemMeta;
 
-public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetComponent {
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
+public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetComponent {
     private static final int[] BACKGROUND = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 21, 22, 23, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53};
     private static final int[] INPUT_BORDER = {9, 10, 11, 18, 20, 27, 28, 29};
     private static final int[] OUTPUT_BORDER = {21, 22, 23, 30, 32, 39, 41, 48, 49, 50};
@@ -67,14 +67,13 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
 
     private static final ItemStack PROGRESS_ITEM = new CustomItemStack(Material.EXPERIENCE_BOTTLE, "&aProgress");
 
-    public AdvancedAutoDisenchanter(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public AdvancedAutoDisenchanter(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onBreak());
         addItemSetting(useLevelLimit, levelLimit);
 
         new BlockMenuPreset(getId(), "&cAdvanced Auto Disenchanter") {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -97,7 +96,6 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
 
                 // Set selection to none, we can reset this every instance (server boot)
                 setSelectedIndex(b, -2);
-
             }
 
             @Override
@@ -115,16 +113,10 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
                 if (flow == ItemTransportFlow.INSERT) {
-                    if (item.getType() == Material.BOOK) {
-                        return new int[]{BOOK_SLOT};
-                    } else {
-                        return new int[]{ITEM_SLOT};
-                    }
-                } else if (flow == ItemTransportFlow.WITHDRAW) {
-                    return OUTPUT_SLOTS;
-                } else {
-                    return new int[0];
-                }
+                    if (item.getType() == Material.BOOK) return new int[]{BOOK_SLOT};
+                    else return new int[]{ITEM_SLOT};
+                } else if (flow == ItemTransportFlow.WITHDRAW) return OUTPUT_SLOTS;
+                else return new int[0];
             }
         };
     }
@@ -148,7 +140,6 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
     @Override
     public void preRegister() {
         addItemHandler(new BlockTicker() {
-
             @Override
             public void tick(Block b, SlimefunItem sf, Config data) {
                 AdvancedAutoDisenchanter.this.tick(b);
@@ -162,7 +153,6 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
     }
 
     protected void tick(Block b) {
-
         // Check if power is sufficient
         if (getCharge(b.getLocation()) < ENERGY_CONSUMPTION) {
             return;
@@ -174,16 +164,10 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
         int selectedEnchant = getSelectedIndex(b.getLocation()); // Picked enchant to remove
 
         // No disenchant selected
-        if (selectedEnchant < 0) {
-            return;
-        }
+        if (selectedEnchant < 0) return;
 
         // make sure both outputs are empty
-        for (int slot : OUTPUT_SLOTS) {
-            if (inv.getItemInSlot(slot) != null) {
-                return;
-            }
-        }
+        for (int slot : OUTPUT_SLOTS) if (inv.getItemInSlot(slot) != null) return;
 
         ItemStack input = inv.getItemInSlot(ITEM_SLOT);
 
@@ -191,16 +175,12 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
         SlimefunItem sfItem = SlimefunItem.getByItem(input);
         if (input == null || input.getEnchantments().isEmpty()
                 || sfItem != null && !sfItem.isDisenchantable()
-        ) {
-            return;
-        }
+        ) return;
 
         // Check for ancient book
         if (!SlimefunUtils.isItemSimilar(inv.getItemInSlot(BOOK_SLOT),
                 FluffyItems.ANCIENT_BOOK.getItem().getItem(), false, false)
-        ) {
-            return;
-        }
+        ) return;
 
         // Check if we are ready to send the output
         if (currentProgress < PROCESS_TIME_TICKS) {
@@ -220,9 +200,7 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
         // Get disenchant using index
         Enchantment outputEnchant = disenchants.keySet().toArray(new Enchantment[0])[selectedEnchant];
 
-        if (outputEnchant == null) {
-            return;
-        }
+        if (outputEnchant == null) return;
 
         // Build enchant book
         ItemStack enchantedBook = new ItemStack(Material.ENCHANTED_BOOK);
@@ -248,7 +226,6 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
     }
 
     private void cycleEnchants(BlockMenu inv, Block b) {
-
         int currentSelection = getSelectedIndex(b.getLocation());
         Map<Enchantment, Integer> itemEnchants = getValidDisenchants(inv.getItemInSlot(ITEM_SLOT));
 
@@ -275,9 +252,7 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
 
         // -2 to -1: Set to none
         currentSelection++; // Get next enchant
-        if (currentSelection > itemEnchants.size() - 1) {
-            currentSelection = -1; // Reset to None
-        }
+        if (currentSelection > itemEnchants.size() - 1) currentSelection = -1; // Reset to None
         buildAndSetSelectionItem(itemEnchants, inv, currentSelection);
         setSelectedIndex(b, currentSelection);
     }
@@ -285,17 +260,14 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
     private void constructMenu(BlockMenuPreset preset) {
         ChestMenuUtils.drawBackground(preset, BACKGROUND);
 
-        for (int i : INPUT_BORDER) {
+        for (int i : INPUT_BORDER)
             preset.addItem(i, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int i : BOOK_BORDER) {
+        for (int i : BOOK_BORDER)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.YELLOW_STAINED_GLASS_PANE), " "), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int i : OUTPUT_BORDER) {
+        for (int i : OUTPUT_BORDER)
             preset.addItem(i, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         preset.addItem(PROGRESS_SLOT, PROGRESS_ITEM, ChestMenuUtils.getEmptyClickHandler());
     }
@@ -306,19 +278,14 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
         lore.add(Utils.color("&e> Click to cycle through enchants <"));
         lore.add("");
 
-        if (selectionIndex == -1) {
-            lore.add(Utils.color("&a- None"));
-        } else {
-            lore.add(Utils.color("&c- None"));
-        }
+        if (selectionIndex == -1) lore.add(Utils.color("&a- None"));
+        else lore.add(Utils.color("&c- None"));
 
         Enchantment[] disenchantKeys = disenchants.keySet().toArray(new Enchantment[0]); // Get indexed disenchants
 
         for (int i = 0; i < disenchantKeys.length; i++) {
             ChatColor textColor = ChatColor.RED;
-            if (i == selectionIndex) {
-                textColor = ChatColor.GREEN;
-            }
+            if (i == selectionIndex) textColor = ChatColor.GREEN;
 
             lore.add(textColor + WordUtils.capitalizeFully("- " + disenchantKeys[i].getKey()
                     .getKey().replace('_', ' ')) + " "
@@ -335,26 +302,19 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
      * Assumes that the returned enchant map is in the same order every time
      */
     private Map<Enchantment, Integer> getValidDisenchants(ItemStack item) {
-
         // Check invalid item
-        if (item == null) {
-            return new HashMap<>();
-        }
+        if (item == null) return new HashMap<>();
 
         // Check non disenchantable slimefun item
         SlimefunItem sfItem = SlimefunItem.getByItem(item);
-        if (sfItem != null && !sfItem.isDisenchantable()) {
-            return new HashMap<>();
-        }
+        if (sfItem != null && !sfItem.isDisenchantable()) return new HashMap<>();
 
         Map<Enchantment, Integer> disenchants = item.getEnchantments();
         Map<Enchantment, Integer> filteredDisenchants = new HashMap<>(item.getEnchantments());
         // Remove enchants that exceed allowed level
-        for (Map.Entry<Enchantment, Integer> disenchantEntry : disenchants.entrySet()) {
-            if (useLevelLimit.getValue() && disenchantEntry.getValue() > levelLimit.getValue()) {
+        for (Map.Entry<Enchantment, Integer> disenchantEntry : disenchants.entrySet())
+            if (useLevelLimit.getValue() && disenchantEntry.getValue() > levelLimit.getValue())
                 filteredDisenchants.remove(disenchantEntry.getKey());
-            }
-        }
 
         return filteredDisenchants;
     }
@@ -392,4 +352,4 @@ public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetC
     public int getCapacity() {
         return CAPACITY;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedChargingBench.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedChargingBench.java
similarity index 87%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedChargingBench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedChargingBench.java
index 2c3a661..af02109 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedChargingBench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedChargingBench.java
@@ -1,13 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
-import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
-import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockPlaceEvent;
@@ -22,8 +22,8 @@ public class AdvancedChargingBench extends AContainer {
     public static final int CHARGE = 5;
     private int tier = 0;
 
-    public AdvancedChargingBench(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public AdvancedChargingBench(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
         addItemHandler(onPlace());
     }
 
@@ -39,9 +39,7 @@ public class AdvancedChargingBench extends AContainer {
 
     @Override
     protected void tick(Block b) {
-        if (getCharge(b.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(b.getLocation()) < getEnergyConsumption()) return;
 
         BlockMenu inv = BlockStorage.getInventory(b);
         tier = Integer.parseInt(BlockStorage.getLocationInfo(b.getLocation(), "tier"));
@@ -49,9 +47,7 @@ public class AdvancedChargingBench extends AContainer {
         for (int slot : getInputSlots()) {
             ItemStack item = inv.getItemInSlot(slot);
 
-            if (charge(b, inv, slot, item, tier)) {
-                return;
-            }
+            if (charge(b, inv, slot, item, tier)) return;
         }
     }
 
@@ -61,9 +57,9 @@ public class AdvancedChargingBench extends AContainer {
         if (sfItem instanceof Rechargeable) {
             float charge = CHARGE + CHARGE * tier;
 
-            if (((Rechargeable) sfItem).addItemCharge(item, charge)) {
+            if (((Rechargeable) sfItem).addItemCharge(item, charge))
                 removeCharge(b.getLocation(), getEnergyConsumption());
-            } else if (inv.fits(item, getOutputSlots())) {
+            else if (inv.fits(item, getOutputSlots())) {
                 inv.pushItem(item, getOutputSlots());
                 inv.replaceExistingItem(slot, null);
             }
@@ -102,4 +98,4 @@ public class AdvancedChargingBench extends AContainer {
     public String getMachineIdentifier() {
         return "ADVANCED_CHARGING_BENCH";
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AlternateElevatorPlate.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AlternateElevatorPlate.java
similarity index 73%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AlternateElevatorPlate.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AlternateElevatorPlate.java
index 893072d..1a362ea 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AlternateElevatorPlate.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AlternateElevatorPlate.java
@@ -1,20 +1,20 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 import io.github.thebusybiscuit.slimefun4.utils.ChatUtils;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -25,11 +25,7 @@ import org.bukkit.inventory.ItemStack;
 
 import javax.annotation.Nonnull;
 import javax.annotation.ParametersAreNonnullByDefault;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 
 /**
  * Alternative elevators that use a Chest GUI instead of
@@ -40,14 +36,13 @@ import java.util.UUID;
  * @author TheBusyBiscuit
  */
 public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler> {
-
     private static final String DATA_KEY = "floor";
     private final Set<UUID> users = new HashSet<>();
     private static final int MAX_CHEST_INDEX = 53;
 
-    public AlternateElevatorPlate(ItemGroup category, SlimefunItemStack item, RecipeType recipeType,
+    public AlternateElevatorPlate(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType,
                                   ItemStack[] recipe, ItemStack recipeOutput) {
-        super(category, item, recipeType, recipe, recipeOutput);
+        super(itemGroup, item, recipeType, recipe, recipeOutput);
 
         addItemHandler(onPlace());
     }
@@ -75,9 +70,8 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
         return e -> {
             Block b = e.getClickedBlock().get();
 
-            if (BlockStorage.getLocationInfo(b.getLocation(), "owner").equals(e.getPlayer().getUniqueId().toString())) {
+            if (BlockStorage.getLocationInfo(b.getLocation(), "owner").equals(e.getPlayer().getUniqueId().toString()))
                 openEditor(e.getPlayer(), b);
-            }
         };
     }
 
@@ -93,9 +87,7 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
 
             Block block = b.getWorld().getBlockAt(b.getX(), y, b.getZ());
 
-            if (block.getType() == getItem().getType() && BlockStorage.check(block, getId())) {
-                floors.add(block);
-            }
+            if (block.getType() == getItem().getType() && BlockStorage.check(block, getId())) floors.add(block);
         }
 
         return floors;
@@ -103,27 +95,19 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
 
     @ParametersAreNonnullByDefault
     public void openInterface(Player p, Block b) {
-        if (users.remove(p.getUniqueId())) {
-            return;
-        }
+        if (users.remove(p.getUniqueId())) return;
 
         List<Block> floors = getFloors(b);
 
-        if (floors.size() < 2) {
-            Slimefun.getLocalization().sendMessage(p, "machines.ELEVATOR.no-destinations", true);
-        } else {
-            openFloorSelector(b, floors, p);
-        }
+        if (floors.size() < 2) Slimefun.getLocalization().sendMessage(p, "machines.ELEVATOR.no-destinations", true);
+        else openFloorSelector(b, floors, p);
     }
 
     @ParametersAreNonnullByDefault
     private void openFloorSelector(Block b, List<Block> floors, Player p) {
         ChestMenu elevatorMenu = new ChestMenu("Elevator");
         for (int i = 0; i < floors.size(); i++) {
-
-            if (i > MAX_CHEST_INDEX) {
-                break;
-            }
+            if (i > MAX_CHEST_INDEX) break;
 
             Block destination = floors.get(i);
             String floor = ChatColors.color(BlockStorage.getLocationInfo(destination.getLocation(), DATA_KEY));
@@ -131,11 +115,9 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
             addFloor(elevatorMenu, i, p, floor, b, destination);
         }
 
-        if (floors.size() < MAX_CHEST_INDEX) {
-            for (int i = floors.size(); i <= MAX_CHEST_INDEX; i++) {
-                elevatorMenu.addItem(i, new CustomItemStack(Material.LIGHT_GRAY_STAINED_GLASS_PANE, ""));
-                elevatorMenu.addMenuClickHandler(i, ChestMenuUtils.getEmptyClickHandler());
-            }
+        if (floors.size() < MAX_CHEST_INDEX) for (int i = floors.size(); i <= MAX_CHEST_INDEX; i++) {
+            elevatorMenu.addItem(i, new CustomItemStack(Material.LIGHT_GRAY_STAINED_GLASS_PANE, ""));
+            elevatorMenu.addMenuClickHandler(i, ChestMenuUtils.getEmptyClickHandler());
         }
 
         elevatorMenu.open(p);
@@ -143,22 +125,18 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
 
     @ParametersAreNonnullByDefault
     private void teleport(Player player, String floorName, Block target) {
-        Utils.runSync(() -> {
+        AbstractAddon.getScheduler().run(() -> {
             users.add(player.getUniqueId());
 
             float yaw = player.getEyeLocation().getYaw() + 180;
 
-            if (yaw > 180) {
-                yaw = -180 + (yaw - 180);
-            }
+            if (yaw > 180) yaw = -180 + (yaw - 180);
 
             Location destination = new Location(player.getWorld(), target.getX() + 0.5, target.getY() + 0.4,
-                target.getZ() + 0.5, yaw, player.getEyeLocation().getPitch());
+                    target.getZ() + 0.5, yaw, player.getEyeLocation().getPitch());
 
             PaperLib.teleportAsync(player, destination).thenAccept(teleported -> {
-                if (teleported) {
-                    player.sendTitle(ChatColor.WHITE + ChatColors.color(floorName), null, 20, 60, 20);
-                }
+                if (teleported) player.sendTitle(ChatColor.WHITE + ChatColors.color(floorName), null, 20, 60, 20);
             });
         });
     }
@@ -168,7 +146,7 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
         ChestMenu menu = new ChestMenu("Elevator Settings");
 
         menu.addItem(4, new CustomItemStack(Material.NAME_TAG, "&7Floor Name &e(Click to edit)", "",
-            "&f" + ChatColors.color(BlockStorage.getLocationInfo(b.getLocation(), DATA_KEY))));
+                "&f" + ChatColors.color(BlockStorage.getLocationInfo(b.getLocation(), DATA_KEY))));
         menu.addMenuClickHandler(4, (pl, slot, item, action) -> {
             pl.closeInventory();
             pl.sendMessage("");
@@ -180,7 +158,7 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
 
                 pl.sendMessage("");
                 Slimefun.getLocalization().sendMessage(p, "machines.ELEVATOR.named", msg -> msg.replace("%floor" +
-                    "%", message));
+                        "%", message));
                 pl.sendMessage("");
 
                 openEditor(pl, b);
@@ -195,19 +173,18 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
     private void addFloor(ChestMenu menu, int slot, Player p, String floor, Block b, Block destination) {
         if (destination.getY() == b.getY()) {
             menu.addItem(slot, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE,
-                ChatColors.color(Slimefun.getLocalization().getMessage(p, "machines.ELEVATOR.current-floor")),
-                "", ChatColor.WHITE + floor, ""));
+                    ChatColors.color(Slimefun.getLocalization().getMessage(p, "machines.ELEVATOR.current-floor")),
+                    "", ChatColor.WHITE + floor, ""));
             menu.addMenuClickHandler(slot, ChestMenuUtils.getEmptyClickHandler());
 
         } else {
             menu.addItem(slot, new CustomItemStack(Material.GRAY_STAINED_GLASS_PANE,
-                ChatColors.color(Slimefun.getLocalization().getMessage(p,
-                    "machines.ELEVATOR.click-to-teleport")), "", ChatColor.WHITE + floor, ""));
+                    ChatColors.color(Slimefun.getLocalization().getMessage(p,
+                            "machines.ELEVATOR.click-to-teleport")), "", ChatColor.WHITE + floor, ""));
             menu.addMenuClickHandler(slot, (player, clickSlot, item, action) -> {
                 teleport(p, floor, destination);
                 return false;
             });
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoAncientAltar.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoAncientAltar.java
similarity index 79%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoAncientAltar.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoAncientAltar.java
index 15aa7fd..35f1339 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoAncientAltar.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoAncientAltar.java
@@ -1,5 +1,6 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -18,13 +19,6 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.RepairedSp
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Optional;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.AdvancedMenuClickHandler;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
@@ -43,6 +37,9 @@ import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 
+import javax.annotation.Nonnull;
+import java.util.*;
+
 /**
  * This {@link SlimefunItem} automatically crafts
  * Ancient Altar recipes
@@ -50,7 +47,6 @@ import org.bukkit.inventory.ItemStack;
  * @author NCBPFluffyBear
  */
 public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent {
-
     public static final int ENERGY_CONSUMPTION = 128;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     private final int[] border = {0, 1, 3, 4, 5, 7, 8, 13, 14, 15, 16, 17, 50, 51, 52, 53};
@@ -65,11 +61,10 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
     private final List<ItemStack> jarInputs = new ArrayList<>(Arrays.asList(ironBars, earthRune, ironBars, earthRune,
             ironBars, earthRune, ironBars, earthRune));
 
-    public AutoAncientAltar(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public AutoAncientAltar(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         new BlockMenuPreset(getId(), "&5Auto Ancient Altar") {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -124,29 +119,18 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
+                if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
 
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return getOutputSlots();
-                }
-
-                if (item.getType().getMaxStackSize() == 1) {
-                    return getInputSlots();
-                }
+                if (item.getType().getMaxStackSize() == 1) return getInputSlots();
 
                 List<Integer> slots = new ArrayList<>();
-                for (int slot : getInputSlots()) {
-                    if (menu.getItemInSlot(slot) != null) {
-                        slots.add(slot);
-                    }
-                }
+                for (int slot : getInputSlots()) if (menu.getItemInSlot(slot) != null) slots.add(slot);
 
                 slots.sort(compareSlots(menu));
 
                 int[] array = new int[slots.size()];
 
-                for (int i = 0; i < slots.size(); i++) {
-                    array[i] = slots.get(i);
-                }
+                for (int i = 0; i < slots.size(); i++) array[i] = slots.get(i);
 
                 return array;
             }
@@ -154,7 +138,6 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
 
         addItemHandler(onPlace());
         addItemHandler(onBreak());
-
     }
 
     private BlockBreakHandler onBreak() {
@@ -174,7 +157,6 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
 
     private BlockPlaceHandler onPlace() {
         return new BlockPlaceHandler(true) {
-
             @Override
             public void onPlayerPlace(@Nonnull BlockPlaceEvent e) {
                 BlockStorage.addBlockInfo(e.getBlock(), "enabled", String.valueOf(false));
@@ -196,9 +178,8 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
     protected void constructMenu(BlockMenuPreset preset) {
         borders(preset, border, inputBorder, outputBorder);
 
-        for (int i : getOutputSlots()) {
+        for (int i : getOutputSlots())
             preset.addMenuClickHandler(i, new AdvancedMenuClickHandler() {
-
                 @Override
                 public boolean onClick(Player p, int slot, ItemStack cursor, ClickAction action) {
                     return false;
@@ -212,12 +193,10 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
                     return cursor.getType() == Material.AIR;
                 }
             });
-        }
 
         preset.addItem(2, new CustomItemStack(new ItemStack(Material.ENCHANTING_TABLE), "&eRecipe",
-                        "", "&bPut in the Recipe you want to craft", "&4Ancient Altar Recipes ONLY"
-                ),
-                (p, slot, item, action) -> false);
+                "", "&bPut in the Recipe you want to craft", "&4Ancient Altar Recipes ONLY"
+        ), (p, slot, item, action) -> false);
     }
 
     public int getEnergyConsumption() {
@@ -245,7 +224,6 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
     @Override
     public void preRegister() {
         addItemHandler(new BlockTicker() {
-
             @Override
             public void tick(Block b, SlimefunItem sf, Config data) {
                 AutoAncientAltar.this.tick(b);
@@ -261,13 +239,9 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
     protected void tick(Block block) {
         String craftOnce = BlockStorage.getLocationInfo(block.getLocation(), "craftOnce");
         if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals(String.valueOf(false))
-                && craftOnce.equals("false")) {
-            return;
-        }
+                && craftOnce.equals("false")) return;
 
-        if (getCharge(block.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(block.getLocation()) < getEnergyConsumption()) return;
 
         BlockStorage.addBlockInfo(block, "craftOnce", String.valueOf(false));
         craftIfValid(block, Boolean.parseBoolean(craftOnce));
@@ -280,24 +254,17 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
         // Make sure at least 1 slot is free
         for (int outSlot : getOutputSlots()) {
             ItemStack outItem = menu.getItemInSlot(outSlot);
-            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) {
-                break;
-            } else if (outSlot == getOutputSlots()[1]) {
-                return;
-            }
+            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) break;
+            else if (outSlot == getOutputSlots()[1]) return;
         }
 
         for (int slot : getInputSlots()) {
             ItemStack slotItem = menu.getItemInSlot(slot);
-            if (slotItem == null) {
-                return;
-            }
+            if (slotItem == null) return;
 
             Material type = slotItem.getType();
 
-            if (!craftOnce && type.getMaxStackSize() != 1 && slotItem.getAmount() == 1) {
-                return;
-            }
+            if (!craftOnce && type.getMaxStackSize() != 1 && slotItem.getAmount() == 1) return;
         }
 
         // Check and append altar items
@@ -305,11 +272,8 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
             int slot = mockPedestalSlots[i];
             ItemStack pedestalItem = menu.getItemInSlot(slot);
             SlimefunItem sfPedestalItem = SlimefunItem.getByItem(pedestalItem);
-            if (sfPedestalItem != null) {
-                pedestalItems.add(sfPedestalItem.getItem());
-            } else {
-                pedestalItems.add(new CustomItemStack(pedestalItem, 1));
-            }
+            if (sfPedestalItem != null) pedestalItems.add(sfPedestalItem.getItem());
+            else pedestalItems.add(new CustomItemStack(pedestalItem, 1));
         }
 
         // Check and append catalyst
@@ -320,39 +284,29 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
         if (sfCatalyst != null) {
             SlimefunItemStack catalystStack = new SlimefunItemStack(sfCatalyst.getId(), catalystItem);
             catalyst = new SlimefunItemStack(catalystStack, 1);
-        } else if (!catalystItem.hasItemMeta()) {
-            catalyst = new ItemStack(catalystItem.getType(), 1);
-        } else {
-            return;
-        }
+        } else if (!catalystItem.hasItemMeta()) catalyst = new ItemStack(catalystItem.getType(), 1);
+        else return;
 
         if (Constants.isSoulJarsInstalled && sfCatalyst != null
-                && sfCatalyst.getId().startsWith("FILLED") && sfCatalyst.getId().endsWith("SOUL_JAR")) {
-
-            try {
-                EntityType entityType = EntityType.valueOf(sfCatalyst.getId()
-                        .replace("FILLED_", "")
-                        .replace("_SOUL_JAR", "")
-                );
+                && sfCatalyst.getId().startsWith("FILLED") && sfCatalyst.getId().endsWith("SOUL_JAR")) try {
+            EntityType entityType = EntityType.valueOf(sfCatalyst.getId()
+                    .replace("FILLED_", "")
+                    .replace("_SOUL_JAR", "")
+            );
 
-                if (entityType == EntityType.UNKNOWN) {
-                    return;
-                }
+            if (entityType == EntityType.UNKNOWN) return;
 
-                BrokenSpawner brokenSpawner = SlimefunItems.BROKEN_SPAWNER.getItem(BrokenSpawner.class);
-                ItemStack spawnerItem = brokenSpawner.getItemForEntityType(entityType);
+            BrokenSpawner brokenSpawner = SlimefunItems.BROKEN_SPAWNER.getItem(BrokenSpawner.class);
+            ItemStack spawnerItem = brokenSpawner.getItemForEntityType(entityType);
 
-                if (pedestalItems.equals(jarInputs)) {
-                    removeCharge(block.getLocation(), ENERGY_CONSUMPTION);
-                    for (int slot : getInputSlots()) {
-                        menu.consumeItem(slot);
-                    }
-                    menu.pushItem(spawnerItem.clone(), getOutputSlots());
-                }
-            } catch (IllegalArgumentException ignored) {
+            if (pedestalItems.equals(jarInputs)) {
+                removeCharge(block.getLocation(), ENERGY_CONSUMPTION);
+                for (int slot : getInputSlots()) menu.consumeItem(slot);
+                menu.pushItem(spawnerItem.clone(), getOutputSlots());
             }
-
-        } else if (SlimefunUtils.isItemSimilar(catalystItem, SlimefunItems.BROKEN_SPAWNER, false, false)) {
+        } catch (IllegalArgumentException ignored) {
+        }
+        else if (SlimefunUtils.isItemSimilar(catalystItem, SlimefunItems.BROKEN_SPAWNER, false, false)) {
 
             Optional<ItemStack> result = checkRecipe(SlimefunItems.BROKEN_SPAWNER, pedestalItems);
             if (result.isPresent()) {
@@ -362,50 +316,38 @@ public class AutoAncientAltar extends SlimefunItem implements EnergyNetComponent
             }
 
         } else {
-
             Optional<ItemStack> result = checkRecipe(catalyst, pedestalItems);
             result.ifPresent(itemStack -> craft(block, menu, itemStack));
-
         }
     }
 
     private Optional<ItemStack> checkRecipe(ItemStack catalyst, List<ItemStack> pedestalItems) {
         // Find matching recipe
-        for (AltarRecipe recipe : altarItem.getRecipes()) {
-
-            if (SlimefunUtils.isItemSimilar(recipe.getCatalyst(), catalyst, true) && recipe.getInput().equals(pedestalItems)) {
+        for (AltarRecipe recipe : altarItem.getRecipes())
+            if (SlimefunUtils.isItemSimilar(recipe.getCatalyst(), catalyst, true) && recipe.getInput().equals(pedestalItems))
                 return Optional.of(recipe.getOutput().clone());
-            }
-        }
 
         return Optional.empty();
     }
 
     private void craft(Block b, BlockMenu menu, ItemStack result) {
-        if (!menu.fits(result, getOutputSlots())) {
-            return;
-        }
+        if (!menu.fits(result, getOutputSlots())) return;
         removeCharge(b.getLocation(), ENERGY_CONSUMPTION);
-        for (int slot : getInputSlots()) {
-            menu.consumeItem(slot);
-        }
+        for (int slot : getInputSlots()) menu.consumeItem(slot);
         menu.pushItem(result, getOutputSlots());
     }
 
     static void borders(BlockMenuPreset preset, int[] border, int[] inputBorder, int[] outputBorder) {
-        for (int i : border) {
+        for (int i : border)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), " "),
                     (p, slot, item, action) -> false);
-        }
 
-        for (int i : inputBorder) {
+        for (int i : inputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "),
                     (p, slot, item, action) -> false);
-        }
 
-        for (int i : outputBorder) {
+        for (int i : outputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "),
                     (p, slot, item, action) -> false);
-        }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoArmorForge.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoArmorForge.java
new file mode 100644
index 0000000..654c81d
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoArmorForge.java
@@ -0,0 +1,14 @@
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
+
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+public class AutoArmorForge extends AutoCrafter {
+    public AutoArmorForge(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe, "&7Auto Armor Forge", Material.ANVIL, "&7Armor Forge", RecipeType.ARMOR_FORGE);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoCraftingTable.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoCraftingTable.java
similarity index 77%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoCraftingTable.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoCraftingTable.java
index 8cbf67a..660abca 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoCraftingTable.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoCraftingTable.java
@@ -1,5 +1,7 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.FluffyMachines;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -12,12 +14,6 @@ import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponen
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.List;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.AdvancedMenuClickHandler;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
@@ -39,6 +35,11 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.meta.ItemMeta;
 
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+
 /**
  * This {@link SlimefunItem} automatically
  * crafts vanilla recipes
@@ -46,7 +47,6 @@ import org.bukkit.inventory.meta.ItemMeta;
  * @author NCBPFluffyBear
  */
 public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponent {
-
     public static final int ENERGY_CONSUMPTION = 128;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     public static final int KEY_SLOT = 16;
@@ -56,11 +56,10 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
     private final int[] outputBorder = {32, 33, 34, 35, 41, 44, 50, 51, 52, 53};
     private final int[] keyBorder = {6, 7, 8, 15, 17, 24, 25, 26};
 
-    public AutoCraftingTable(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public AutoCraftingTable(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         new BlockMenuPreset(getId(), "&6Auto Crafting Table") {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -95,20 +94,17 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
                 // Replace key items with sneak right click format
                 ItemStack keyItem = menu.getItemInSlot(KEY_SLOT);
 
-                if (keyItem == null) {
+                if (keyItem == null)
                     menu.replaceExistingItem(KEY_SLOT, new CustomItemStack(Material.BARRIER, "&cNo Recipe", "&cSneak and Right Click the",
                             "&cAuto Crafting Table with an item", "&cto change the target recipe"
                     ));
-                } else {
+                else {
                     ItemMeta keyMeta = keyItem.getItemMeta();
                     List<String> lore = keyMeta.getLore();
                     if (lore == null || !ChatColor.stripColor(lore.get(0)).equals("Sneak and Right Click the")) { // Check if item has been replaced
                         menu.replaceExistingItem(KEY_SLOT, createKeyItem(keyItem.getType()));
-                        if (menu.fits(keyItem, getOutputSlots())) {
-                            menu.pushItem(keyItem, getOutputSlots());
-                        } else {
-                            b.getLocation().getWorld().dropItemNaturally(b.getLocation().add(0, 1, 0), keyItem);
-                        }
+                        if (menu.fits(keyItem, getOutputSlots())) menu.pushItem(keyItem, getOutputSlots());
+                        else b.getLocation().getWorld().dropItemNaturally(b.getLocation().add(0, 1, 0), keyItem);
                     }
                 }
 
@@ -127,24 +123,16 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return getOutputSlots();
-                }
+                if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
 
                 List<Integer> slots = new ArrayList<>();
-                for (int slot : getInputSlots()) {
-                    if (menu.getItemInSlot(slot) != null) {
-                        slots.add(slot);
-                    }
-                }
+                for (int slot : getInputSlots()) if (menu.getItemInSlot(slot) != null) slots.add(slot);
 
                 slots.sort(compareSlots(menu));
 
                 int[] array = new int[slots.size()];
 
-                for (int i = 0; i < slots.size(); i++) {
-                    array[i] = slots.get(i);
-                }
+                for (int i = 0; i < slots.size(); i++) array[i] = slots.get(i);
 
                 return array;
             }
@@ -152,7 +140,6 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
 
         addItemHandler(onPlace());
         addItemHandler(onBreak());
-
     }
 
     private BlockBreakHandler onBreak() {
@@ -173,7 +160,6 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
 
     private BlockPlaceHandler onPlace() {
         return new BlockPlaceHandler(true) {
-
             @Override
             public void onPlayerPlace(@Nonnull BlockPlaceEvent e) {
                 BlockStorage.addBlockInfo(e.getBlock(), "enabled", String.valueOf(false));
@@ -193,10 +179,9 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
     protected void constructMenu(BlockMenuPreset preset) {
         AutoAncientAltar.borders(preset, border, inputBorder, outputBorder);
 
-        for (int i : keyBorder) {
+        for (int i : keyBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.YELLOW_STAINED_GLASS_PANE), " "),
                     (p, slot, item, action) -> false);
-        }
 
         preset.addItem(statusSlot, new CustomItemStack(new ItemStack(Material.YELLOW_STAINED_GLASS_PANE), "&e&lIdle"),
                 (p, slot, item, action) -> false);
@@ -212,8 +197,7 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor,
                                        ClickAction action) {
-                    if (cursor == null)
-                        return true;
+                    if (cursor == null) return true;
                     return cursor.getType() == Material.AIR;
                 }
             });
@@ -265,17 +249,13 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
     }
 
     protected void tick(Block block) {
-
-        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals("false")) {
-            return;
-        }
+        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals("false")) return;
 
         if (getCharge(block.getLocation()) < getEnergyConsumption()) {
             BlockMenu menu = BlockStorage.getInventory(block);
-            if (menu.hasViewer()) {
+            if (menu.hasViewer())
                 menu.replaceExistingItem(statusSlot, new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
                         "&c&lNo Power"));
-            }
             return;
         }
 
@@ -288,26 +268,22 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
 
         // Make sure we have a key item
         if (invItem == null || invItem.getType() == Material.BARRIER) {
-            if (menu.hasViewer()) {
+            if (menu.hasViewer())
                 menu.replaceExistingItem(statusSlot, new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
                         "&c&lKey Item Missing"));
-            }
             return;
         }
 
         ItemStack keyItem = new ItemStack(invItem.getType());
 
-
         // Make sure at least 1 slot is free
         for (int outSlot : getOutputSlots()) {
             ItemStack outItem = menu.getItemInSlot(outSlot);
-            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) {
-                break;
-            } else if (outSlot == getOutputSlots()[1]) {
-                if (menu.hasViewer()) {
+            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) break;
+            else if (outSlot == getOutputSlots()[1]) {
+                if (menu.hasViewer())
                     menu.replaceExistingItem(statusSlot, new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
                             "&c&lOutput Full"));
-                }
                 return;
             }
         }
@@ -323,11 +299,9 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
                 blankCounter++;
                 // All slots are empty, no need to proceed
                 if (blankCounter == 9) {
-                    if (menu.hasViewer()) {
-                        menu.replaceExistingItem(statusSlot,
-                                new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
-                                        "&c&lInput Missing"));
-                    }
+                    if (menu.hasViewer()) menu.replaceExistingItem(statusSlot,
+                            new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
+                                    "&c&lInput Missing"));
                     return;
                 }
                 // No need to write to the array, null by default
@@ -338,11 +312,9 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
 
             // Checks if each slot has at least 1 item
             if (slotItem.getAmount() == 1) {
-                if (menu.hasViewer()) {
-                    menu.replaceExistingItem(statusSlot,
-                            new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
-                                    "&c&lYou need to have enough supplies", "&c&lto craft more than one item"));
-                }
+                if (menu.hasViewer()) menu.replaceExistingItem(statusSlot,
+                        new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
+                                "&c&lYou need to have enough supplies", "&c&lto craft more than one item"));
                 return;
             }
 
@@ -355,35 +327,28 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
         // However, this isn't a concern since we have the key item.
 
         if (FluffyMachines.shapedVanillaRecipes.containsKey(keyItem)) {
-
             for (Pair<ItemStack, List<RecipeChoice>> recipe : FluffyMachines.shapedVanillaRecipes.get(keyItem)) {
-
                 boolean passOn = false;
 
                 List<RecipeChoice> rc = recipe.getSecondValue();
 
                 if (existingItems.size() != rc.size()) {
-                    if (menu.hasViewer()) {
+                    if (menu.hasViewer())
                         menu.replaceExistingItem(statusSlot, new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
                                 "&c&lIncorrect Recipe"));
-                    }
                     // The sizes don't match, but it can still be shapeless.
                     passOn = true;
                 }
 
                 // If we already know this isn't a shaped recipe, no need to check.
-                if (!passOn) {
-                    for (int i = 0; i < rc.size(); i++) {
-                        if (!rc.get(i).test(existingItems.get(i))) {
-                            if (menu.hasViewer()) {
-                                menu.replaceExistingItem(statusSlot,
-                                        new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
-                                                "&c&lIncorrect Recipe"));
-                            }
-                            // We need to pass on to shapeless in case the key is shapeless.
-                            passOn = true;
-                            break;
-                        }
+                if (!passOn) for (int i = 0; i < rc.size(); i++) {
+                    if (!rc.get(i).test(existingItems.get(i))) {
+                        if (menu.hasViewer()) menu.replaceExistingItem(statusSlot,
+                                new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
+                                        "&c&lIncorrect Recipe"));
+                        // We need to pass on to shapeless in case the key is shapeless.
+                        passOn = true;
+                        break;
                     }
                 }
 
@@ -401,70 +366,50 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
                 List<RecipeChoice> rc = recipe.getSecondValue();
                 List<RecipeChoice> rcCheck = new ArrayList<>(rc);
 
-                if (existingItems.size() != rc.size()) {
-                    if (menu.hasViewer()) {
-                        menu.replaceExistingItem(statusSlot,
-                                new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
-                                        "&c&lIncorrect Recipe"));
-                    }
-                }
+                if (existingItems.size() != rc.size()) if (menu.hasViewer()) menu.replaceExistingItem(statusSlot,
+                        new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
+                                "&c&lIncorrect Recipe"));
 
                 // Chop down the list until all items are tested
-                for (RecipeChoice r : rc) {
-                    for (ItemStack item : existingItems) {
+                for (RecipeChoice r : rc)
+                    for (ItemStack item : existingItems)
                         if (r.test(item)) {
                             existingItems.remove(item);
                             rcCheck.remove(r);
                             break;
                         }
-                    }
-                }
 
                 if (existingItems.isEmpty() && rcCheck.isEmpty()) {
-                    if (menu.hasViewer()) {
-                        menu.replaceExistingItem(statusSlot,
-                                new CustomItemStack(new ItemStack(Material.GREEN_STAINED_GLASS_PANE),
-                                        "&a&lCrafting"));
-                    }
+                    if (menu.hasViewer()) menu.replaceExistingItem(statusSlot,
+                            new CustomItemStack(new ItemStack(Material.GREEN_STAINED_GLASS_PANE),
+                                    "&a&lCrafting"));
                     craft(menu, recipe.getFirstValue().clone());
                     return;
 
-                } else {
-                    if (menu.hasViewer()) {
-                        menu.replaceExistingItem(statusSlot,
-                                new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
-                                        "&c&lIncorrect Recipe"));
-                    }
-                }
+                } else if (menu.hasViewer()) menu.replaceExistingItem(statusSlot,
+                        new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
+                                "&c&lIncorrect Recipe"));
             }
 
-            if (menu.hasViewer()) {
+            if (menu.hasViewer())
                 menu.replaceExistingItem(statusSlot, new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
                         "&c&lInvalid Key!"));
-            }
         }
     }
 
     private void craft(BlockMenu menu, ItemStack item) {
         if (!menu.fits(item, getOutputSlots())) {
-            if (menu.hasViewer()) {
+            if (menu.hasViewer())
                 menu.replaceExistingItem(statusSlot, new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE),
                         "&c&lOutput slots full"));
-            }
             return;
         }
 
-        if (menu.hasViewer()) {
-            menu.replaceExistingItem(statusSlot,
-                    new CustomItemStack(new ItemStack(Material.GREEN_STAINED_GLASS_PANE),
-                            "&a&lCrafting"));
-        }
+        if (menu.hasViewer()) menu.replaceExistingItem(statusSlot,
+                new CustomItemStack(new ItemStack(Material.GREEN_STAINED_GLASS_PANE),
+                        "&a&lCrafting"));
 
-        for (int slot : getInputSlots()) {
-            if (menu.getItemInSlot(slot) != null) {
-                menu.consumeItem(slot, 1);
-            }
-        }
+        for (int slot : getInputSlots()) if (menu.getItemInSlot(slot) != null) menu.consumeItem(slot, 1);
 
         menu.pushItem(item, getOutputSlots());
     }
@@ -474,5 +419,4 @@ public class AutoCraftingTable extends SlimefunItem implements EnergyNetComponen
                 "&eAuto Crafting Table with an item", "&eto change the target recipe"
         );
     }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoEnhancedCraftingTable.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoEnhancedCraftingTable.java
similarity index 55%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoEnhancedCraftingTable.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoEnhancedCraftingTable.java
index 4019863..dd60aaa 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoEnhancedCraftingTable.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoEnhancedCraftingTable.java
@@ -1,16 +1,16 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
 public class AutoEnhancedCraftingTable extends AutoCrafter {
-    public AutoEnhancedCraftingTable(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe, "&6Auto Enhanced Crafting Table",
+    public AutoEnhancedCraftingTable(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe, "&6Auto Enhanced Crafting Table",
                 Material.CRAFTING_TABLE, "&6Enhanced Crafting Table", RecipeType.ENHANCED_CRAFTING_TABLE
         );
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoMagicWorkbench.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoMagicWorkbench.java
similarity index 51%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoMagicWorkbench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoMagicWorkbench.java
index 1b78a20..2c5f7a0 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoMagicWorkbench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoMagicWorkbench.java
@@ -1,20 +1,20 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
-import java.util.ArrayList;
-import java.util.List;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
-public class AutoMagicWorkbench extends AutoCrafter {
+import java.util.ArrayList;
+import java.util.List;
 
-    public AutoMagicWorkbench(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe, "&6Auto Magic Workbench", Material.BOOKSHELF, "&6Magic Workbench", RecipeType.MAGIC_WORKBENCH);
+public class AutoMagicWorkbench extends AutoCrafter {
+    public AutoMagicWorkbench(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe, "&6Auto Magic Workbench", Material.BOOKSHELF, "&6Magic Workbench", RecipeType.MAGIC_WORKBENCH);
     }
 
     /**
@@ -22,29 +22,19 @@ public class AutoMagicWorkbench extends AutoCrafter {
      */
     @Override
     public int[] getCustomItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-        if (flow == ItemTransportFlow.WITHDRAW) {
-            return getOutputSlots();
-        }
+        if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
 
-        if (item.getType().getMaxStackSize() == 1) {
-            return getInputSlots();
-        }
+        if (item.getType().getMaxStackSize() == 1) return getInputSlots();
 
         List<Integer> slots = new ArrayList<>();
-        for (int slot : getInputSlots()) {
-            if (menu.getItemInSlot(slot) != null) {
-                slots.add(slot);
-            }
-        }
+        for (int slot : getInputSlots()) if (menu.getItemInSlot(slot) != null) slots.add(slot);
 
         slots.sort(compareSlots(menu));
 
         int[] array = new int[slots.size()];
 
-        for (int i = 0; i < slots.size(); i++) {
-            array[i] = slots.get(i);
-        }
+        for (int i = 0; i < slots.size(); i++) array[i] = slots.get(i);
 
         return array;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoTableSaw.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoTableSaw.java
similarity index 83%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoTableSaw.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoTableSaw.java
index 558c31a..07d9870 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoTableSaw.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoTableSaw.java
@@ -1,27 +1,27 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.TableSaw;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Tag;
@@ -44,11 +44,10 @@ import java.util.Optional;
  * @author NCBPFluffyBear
  */
 public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
-
     public static final int ENERGY_CONSUMPTION = 128;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     private final int[] border = {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 27, 31, 36, 40, 45,
-        46, 47, 48, 49, 50, 51, 52, 53};
+            46, 47, 48, 49, 50, 51, 52, 53};
     private final int[] inputBorder = {19, 20, 21, 28, 30, 37, 38, 39,};
     private final int[] outputBorder = {23, 24, 25, 26, 32, 35, 41, 42, 43, 44};
     private final int[] inputSlots = {29};
@@ -56,8 +55,8 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
 
     private final Map<ItemStack, ItemStack> tableSawRecipes = new HashMap<>();
 
-    public AutoTableSaw(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public AutoTableSaw(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         for (Material log : Tag.LOGS.getValues()) {
             Optional<Material> planks = getPlanks(log);
@@ -65,9 +64,8 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
             planks.ifPresent(material -> tableSawRecipes.put(new ItemStack(log), new ItemStack(material, 8)));
         }
 
-        for (Material plank : Tag.PLANKS.getValues()) {
+        for (Material plank : Tag.PLANKS.getValues())
             tableSawRecipes.put(new ItemStack(plank), new ItemStack(Material.STICK, 4));
-        }
 
         new BlockMenuPreset(getId(), "&6Auto Table Saw") {
 
@@ -79,10 +77,10 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
             @Override
             public void newInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
                 if (!BlockStorage.hasBlockInfo(b)
-                    || BlockStorage.getLocationInfo(b.getLocation(), "enabled") == null
-                    || BlockStorage.getLocationInfo(b.getLocation(), "enabled").equals(String.valueOf(false))) {
+                        || BlockStorage.getLocationInfo(b.getLocation(), "enabled") == null
+                        || BlockStorage.getLocationInfo(b.getLocation(), "enabled").equals(String.valueOf(false))) {
                     menu.replaceExistingItem(6, new CustomItemStack(Material.GUNPOWDER, "&7Enabled: &4\u2718",
-                        "", "&e> Click to enable this Machine")
+                            "", "&e> Click to enable this Machine")
                     );
                     menu.addMenuClickHandler(6, (p, slot, item, action) -> {
                         BlockStorage.addBlockInfo(b, "enabled", String.valueOf(true));
@@ -91,7 +89,7 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
                     });
                 } else {
                     menu.replaceExistingItem(6, new CustomItemStack(Material.REDSTONE, "&7Enabled: &2\u2714",
-                        "", "&e> Click to disable this Machine"));
+                            "", "&e> Click to disable this Machine"));
                     menu.addMenuClickHandler(6, (p, slot, item, action) -> {
                         BlockStorage.addBlockInfo(b, "enabled", String.valueOf(false));
                         newInstance(menu, b);
@@ -103,8 +101,8 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
-                    Interaction.INTERACT_BLOCK
+                        || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
+                        Interaction.INTERACT_BLOCK
                 );
             }
 
@@ -115,17 +113,13 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return outputSlots;
-                } else {
-                    return inputSlots;
-                }
+                if (flow == ItemTransportFlow.WITHDRAW) return outputSlots;
+                else return inputSlots;
             }
         };
 
         addItemHandler(onPlace());
         addItemHandler(onBreak());
-
     }
 
     private BlockBreakHandler onBreak() {
@@ -146,7 +140,6 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
 
     private BlockPlaceHandler onPlace() {
         return new BlockPlaceHandler(true) {
-
             @Override
             public void onPlayerPlace(@Nonnull BlockPlaceEvent e) {
                 BlockStorage.addBlockInfo(e.getBlock(), "enabled", String.valueOf(false));
@@ -160,13 +153,11 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
     }
 
     protected void constructMenu(BlockMenuPreset preset) {
-
         borders(preset, border, inputBorder, outputBorder);
         preset.addItem(2, new CustomItemStack(new ItemStack(Material.STONECUTTER), "&eRecipe", "",
                 "&bPut in the Recipe you want to craft",
                 "&4Table Saw Recipes ONLY"
-            ),
-            ChestMenuUtils.getEmptyClickHandler());
+        ), ChestMenuUtils.getEmptyClickHandler());
     }
 
     @Nonnull
@@ -187,7 +178,6 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
     @Override
     public void preRegister() {
         addItemHandler(new BlockTicker() {
-
             @Override
             public void tick(Block b, SlimefunItem sf, Config data) {
                 AutoTableSaw.this.tick(b);
@@ -201,19 +191,15 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
     }
 
     protected void tick(Block block) {
-        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals(String.valueOf(false))) {
-            return;
-        }
+        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals(String.valueOf(false))) return;
 
-        if (getCharge(block.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(block.getLocation()) < getEnergyConsumption()) return;
 
         BlockMenu menu = BlockStorage.getInventory(block);
         tableSawRecipes.forEach((input, output) -> {
             if (menu.getItemInSlot(inputSlots[0]) != null
-                && SlimefunUtils.isItemSimilar(menu.getItemInSlot(inputSlots[0]), input, true, false)
-                && menu.fits(output, outputSlots)) {
+                    && SlimefunUtils.isItemSimilar(menu.getItemInSlot(inputSlots[0]), input, true, false)
+                    && menu.fits(output, outputSlots)) {
 
                 menu.consumeItem(inputSlots[0]);
                 menu.pushItem(output.clone(), outputSlots);
@@ -223,6 +209,7 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
 
     /**
      * Method that finds planks associated with a log
+     *
      * @author TheBusyBiscuit
      */
     private @Nonnull Optional<Material> getPlanks(@Nonnull Material log) {
@@ -232,21 +219,16 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
     }
 
     static void borders(BlockMenuPreset preset, int[] border, int[] inputBorder, int[] outputBorder) {
-        for (int i : border) {
+        for (int i : border)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
 
-        for (int i : inputBorder) {
+        for (int i : inputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
 
-        for (int i : outputBorder) {
+        for (int i : outputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
     }
-
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackLoader.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackLoader.java
similarity index 81%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackLoader.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackLoader.java
index 1a43b51..8cdefdf 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackLoader.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackLoader.java
@@ -1,24 +1,24 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.backpacks.SlimefunBackpack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.Tag;
@@ -32,43 +32,39 @@ import javax.annotation.Nonnull;
 import java.util.List;
 
 public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
-
     public static final int ENERGY_CONSUMPTION = 16;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
 
     private static final int[] PLAIN_BORDER = {38, 39, 40, 41, 42, 47, 48, 49, 50, 51};
     private static final int[] INPUT_BORDER = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33,
-        34, 35};
+            34, 35};
     private static final int[] OUTPUT_BORDER = {43, 44, 52};
     private static final int[] BACKPACK_BORDER = {36, 37, 46};
     private static final int[] INPUT_SLOTS = {10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25};
     private static final int[] OUTPUT_SLOTS = {53};
     private static final int BACKPACK_SLOT = 45;
 
-
-    public BackpackLoader(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public BackpackLoader(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onBreak());
 
         new BlockMenuPreset(getId(), "&eBackpack Loader") {
-
             @Override
             public void init() {
                 buildBorder(this, PLAIN_BORDER, INPUT_BORDER, OUTPUT_BORDER);
 
-                for (int i : BACKPACK_BORDER) {
+                for (int i : BACKPACK_BORDER)
                     this.addItem(i, new CustomItemStack(new ItemStack(Material.YELLOW_STAINED_GLASS_PANE), " "),
-                        (p, slot, item, action) -> false
+                            (p, slot, item, action) -> false
                     );
-                }
             }
 
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
-                    Interaction.INTERACT_BLOCK);
+                        || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
+                        Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -78,11 +74,8 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return getOutputSlots();
-                } else {
-                    return getInputSlots();
-                }
+                if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
+                else return getInputSlots();
             }
         };
 
@@ -118,10 +111,7 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
     }
 
     private void tick(@Nonnull Block b) {
-
-        if (getCharge(b.getLocation()) < ENERGY_CONSUMPTION) {
-            return;
-        }
+        if (getCharge(b.getLocation()) < ENERGY_CONSUMPTION) return;
 
         final BlockMenu inv = BlockStorage.getInventory(b);
         boolean invalidItem = false;
@@ -134,18 +124,15 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
 
                     // Make sure it has an ID
                     List<String> lore = backpackItem.getItemMeta().getLore();
-                    for (String s : lore) {
+                    for (String s : lore)
                         if (s.equals(ChatColor.GRAY + "ID: <ID>")) {
                             invalidItem = true;
                             break;
                         }
-                    }
-                    if (!invalidItem) {
-                        moveItem(inv, inputSlot, BACKPACK_SLOT);
+                    if (!invalidItem) moveItem(inv, inputSlot, BACKPACK_SLOT);
 
-                    } else if (inv.getItemInSlot(getOutputSlots()[0]) == null) {
+                    else if (inv.getItemInSlot(getOutputSlots()[0]) == null)
                         moveItem(inv, inputSlot, getOutputSlots()[0]);
-                    }
                     return;
                 }
             }
@@ -156,20 +143,17 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
         // Are there any items in the input?
         for (int inputSlot : getInputSlots()) {
             if (inv.getItemInSlot(inputSlot) != null
-                && !(SlimefunItem.getByItem(inv.getItemInSlot(inputSlot)) instanceof SlimefunBackpack)
-                && !Tag.SHULKER_BOXES.isTagged(inv.getItemInSlot(inputSlot).getType())) {
+                    && !(SlimefunItem.getByItem(inv.getItemInSlot(inputSlot)) instanceof SlimefunBackpack)
+                    && !Tag.SHULKER_BOXES.isTagged(inv.getItemInSlot(inputSlot).getType())) {
                 occupiedInputSlot = inputSlot;
                 break;
-            } else if (inputSlot == getInputSlots()[13]) {
-                return;
-            }
+            } else if (inputSlot == getInputSlots()[13]) return;
         }
 
         // Loading the backpack
         ItemStack bpItem = inv.getItemInSlot(BACKPACK_SLOT);
         SlimefunItem sfItem = SlimefunItem.getByItem(bpItem);
         if (sfItem instanceof SlimefunBackpack) {
-
             ItemStack transferItem = inv.getItemInSlot(occupiedInputSlot);
 
             int finalOccupiedInputSlot = occupiedInputSlot;
@@ -181,9 +165,7 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
 
                 // Backpack is full
                 if (bpSlot == -1) {
-                    if (inv.getItemInSlot(OUTPUT_SLOTS[0]) == null) {
-                        moveItem(inv, BACKPACK_SLOT, OUTPUT_SLOTS[0]);
-                    }
+                    if (inv.getItemInSlot(OUTPUT_SLOTS[0]) == null) moveItem(inv, BACKPACK_SLOT, OUTPUT_SLOTS[0]);
                     return;
                 }
 
@@ -225,23 +207,19 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
     }
 
     static void buildBorder(BlockMenuPreset preset, int[] plainBorder, int[] inputBorder, int[] outputBorder) {
-        for (int i : plainBorder) {
+        for (int i : plainBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false
+                    (p, slot, item, action) -> false
             );
-        }
 
-        for (int i : inputBorder) {
+        for (int i : inputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false
+                    (p, slot, item, action) -> false
             );
-        }
 
-        for (int i : outputBorder) {
+        for (int i : outputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false
+                    (p, slot, item, action) -> false
             );
-        }
     }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackUnloader.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackUnloader.java
similarity index 85%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackUnloader.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackUnloader.java
index 4248ad8..96307db 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackUnloader.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackUnloader.java
@@ -1,23 +1,23 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.backpacks.SlimefunBackpack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.ChatColor;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
@@ -29,25 +29,22 @@ import javax.annotation.Nonnull;
 import java.util.List;
 
 public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent {
-
     public static final int ENERGY_CONSUMPTION = 16;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
 
     private static final int[] PLAIN_BORDER = {2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17};
     private static final int[] INPUT_BORDER = {1, 9, 10};
     private static final int[] OUTPUT_BORDER = {18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 44, 45, 46, 47, 48,
-        49, 50, 51, 52, 53};
+            49, 50, 51, 52, 53};
     private static final int[] INPUT_SLOTS = {0};
     private static final int[] OUTPUT_SLOTS = {28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43};
 
-    public BackpackUnloader(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe
-        );
+    public BackpackUnloader(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onBreak());
 
         new BlockMenuPreset(getId(), "&eBackpack Unloader") {
-
             @Override
             public void init() {
                 BackpackLoader.buildBorder(this, PLAIN_BORDER, INPUT_BORDER, OUTPUT_BORDER);
@@ -56,8 +53,8 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
-                    Interaction.INTERACT_BLOCK);
+                        || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
+                        Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -67,11 +64,8 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return getOutputSlots();
-                } else {
-                    return getInputSlots();
-                }
+                if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
+                else return getInputSlots();
             }
         };
 
@@ -106,19 +100,13 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
     }
 
     private void tick(@Nonnull Block b) {
-
-        if (getCharge(b.getLocation()) < ENERGY_CONSUMPTION) {
-            return;
-        }
+        if (getCharge(b.getLocation()) < ENERGY_CONSUMPTION) return;
 
         final BlockMenu inv = BlockStorage.getInventory(b);
 
         for (int outputSlot : getOutputSlots()) {
-            if (inv.getItemInSlot(outputSlot) == null) {
-                break;
-            } else if (outputSlot == getOutputSlots()[13]) {
-                return;
-            }
+            if (inv.getItemInSlot(outputSlot) == null) break;
+            else if (outputSlot == getOutputSlots()[13]) return;
         }
 
         ItemStack inputItem = inv.getItemInSlot(getInputSlots()[0]);
@@ -128,12 +116,11 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
 
                 // No ID
                 List<String> lore = inputItem.getItemMeta().getLore();
-                for (String s : lore) {
+                for (String s : lore)
                     if (s.equals(ChatColor.GRAY + "ID: <ID>")) {
                         rejectInput(inv);
                         return;
                     }
-                }
 
                 PlayerProfile.getBackpack(inputItem, backpack -> {
                     Inventory bpinv = backpack.getInventory();
@@ -152,10 +139,7 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
                         }
                     }
                 });
-            } else {
-                // Not a backpack
-                rejectInput(inv);
-            }
+            } else rejectInput(inv); // Not a backpack
         }
     }
 
@@ -183,5 +167,4 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
     public int[] getOutputSlots() {
         return OUTPUT_SLOTS;
     }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustFabricator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustFabricator.java
similarity index 79%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustFabricator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustFabricator.java
index 371c265..6fbc351 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustFabricator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustFabricator.java
@@ -1,18 +1,18 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricDustWasher;
 import io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.OreWasher;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
@@ -29,17 +29,16 @@ import java.util.List;
  */
 
 public class ElectricDustFabricator extends AContainer implements RecipeDisplayItem {
-
     public static final int ENERGY_CONSUMPTION = 256;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     private OreWasher oreWasher;
     private final List<ItemStack> acceptableInputs = new ArrayList<>(Arrays.asList(
-        new ItemStack(Material.COBBLESTONE), new ItemStack(Material.ANDESITE),
-        new ItemStack(Material.DIORITE), new ItemStack(Material.GRANITE)
+            new ItemStack(Material.COBBLESTONE), new ItemStack(Material.ANDESITE),
+            new ItemStack(Material.DIORITE), new ItemStack(Material.GRANITE)
     ));
 
-    public ElectricDustFabricator(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public ElectricDustFabricator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
@@ -56,7 +55,7 @@ public class ElectricDustFabricator extends AContainer implements RecipeDisplayI
 
         for (SlimefunItemStack dust : Constants.dusts) {
             displayRecipes.add(new CustomItemStack(Material.COBBLESTONE,
-                "&fAny Cobblestone Variant", "&7Cobblestone", "&7Andesite", "&7Diorite", "&7Granite"
+                    "&fAny Cobblestone Variant", "&7Cobblestone", "&7Andesite", "&7Diorite", "&7Granite"
             ));
             displayRecipes.add(dust);
         }
@@ -67,22 +66,19 @@ public class ElectricDustFabricator extends AContainer implements RecipeDisplayI
     @Override
     protected MachineRecipe findNextRecipe(BlockMenu menu) {
         for (int slot : getInputSlots()) {
-            for (ItemStack acceptableInput : acceptableInputs) {
+            for (ItemStack acceptableInput : acceptableInputs)
                 if (SlimefunUtils.isItemSimilar(menu.getItemInSlot(slot), acceptableInput, true, false)) {
-                    if (!hasFreeSlot(menu)) {
-                        return null;
-                    }
+                    if (!hasFreeSlot(menu)) return null;
 
                     ItemStack dust = oreWasher.getRandomDust();
-                    MachineRecipe recipe = new MachineRecipe(4 / getSpeed(), new ItemStack[] {acceptableInput},
-                            new ItemStack[] {dust});
+                    MachineRecipe recipe = new MachineRecipe(4 / getSpeed(), new ItemStack[]{acceptableInput},
+                            new ItemStack[]{dust});
 
                     if (menu.fits(recipe.getOutput()[0], getOutputSlots())) {
                         menu.consumeItem(slot);
                         return recipe;
                     }
                 }
-            }
         }
 
         return null;
@@ -92,9 +88,7 @@ public class ElectricDustFabricator extends AContainer implements RecipeDisplayI
         for (int slot : getOutputSlots()) {
             ItemStack item = menu.getItemInSlot(slot);
 
-            if (item == null || item.getType() == Material.AIR) {
-                return true;
-            }
+            if (item == null || item.getType() == Material.AIR) return true;
         }
 
         return false;
@@ -125,5 +119,4 @@ public class ElectricDustFabricator extends AContainer implements RecipeDisplayI
     public int getSpeed() {
         return 10;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustRecycler.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustRecycler.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustRecycler.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustRecycler.java
index a393283..ae72f29 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustRecycler.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustRecycler.java
@@ -1,17 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockBreakEvent;
@@ -22,15 +22,13 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class ElectricDustRecycler extends AContainer implements RecipeDisplayItem {
-
     public static final int ENERGY_CONSUMPTION = 32;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
 
-    public ElectricDustRecycler(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public ElectricDustRecycler(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onBreak());
-
     }
 
     private BlockBreakHandler onBreak() {
@@ -50,10 +48,8 @@ public class ElectricDustRecycler extends AContainer implements RecipeDisplayIte
 
     @Override
     protected void registerDefaultRecipes() {
-
-        for (SlimefunItemStack dust : Constants.dusts) {
+        for (SlimefunItemStack dust : Constants.dusts)
             registerRecipe(1, new CustomItemStack(dust, 8), SlimefunItems.SIFTED_ORE);
-        }
     }
 
     @Nonnull
@@ -100,4 +96,4 @@ public class ElectricDustRecycler extends AContainer implements RecipeDisplayIte
     public String getMachineIdentifier() {
         return "ELECTRIC_DUST_RECYCLER";
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/SmartFactory.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/SmartFactory.java
similarity index 84%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/SmartFactory.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/SmartFactory.java
index 758ce75..9c4eafa 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/SmartFactory.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/SmartFactory.java
@@ -1,5 +1,6 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -15,14 +16,6 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
@@ -36,6 +29,9 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
+import javax.annotation.Nonnull;
+import java.util.*;
+
 /**
  * A machine that constructs ingots
  * out of its raw materials
@@ -43,7 +39,6 @@ import org.bukkit.inventory.meta.ItemMeta;
  * @author NCBPFluffyBear
  */
 public class SmartFactory extends SlimefunItem implements EnergyNetComponent, RecipeDisplayItem {
-
     private static final int[] BORDER = new int[]{5, 6, 7, 8, 41, 42, 44, 50, 51, 52, 53};
     private static final int[] BORDER_IN = new int[]{0, 1, 2, 3, 4, 9, 13, 18, 22, 27, 31, 36, 40, 45, 46, 47, 48, 49};
     private static final int[] BORDER_OUT = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
@@ -74,9 +69,8 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
     public SmartFactory(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
 
-        for (SlimefunItemStack sfItem : ACCEPTED_ITEMS) {
+        for (SlimefunItemStack sfItem : ACCEPTED_ITEMS)
             ITEM_RECIPES.put(sfItem.getItem(), collectRawRecipe(sfItem.getItem()));
-        }
 
         buildPreset();
         addItemHandler(onBreak());
@@ -110,13 +104,11 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
             public void newInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
                 SlimefunItem recipe = SlimefunItem.getByItem(menu.getItemInSlot(RECIPE_SLOT));
 
-                if (recipe == null) {
+                if (recipe == null)
                     menu.replaceExistingItem(RECIPE_SLOT, new CustomItemStack(Material.BARRIER, "&bRecipe",
                             "&cSneak and Right Click the", "&cfactory with a supported resource", "&cto set the recipe"
                     ));
-                } else {
-                    menu.replaceExistingItem(RECIPE_SLOT, getDisplayItem(recipe, getDisplayRecipes()));
-                }
+                else menu.replaceExistingItem(RECIPE_SLOT, getDisplayItem(recipe, getDisplayRecipes()));
             }
 
             @Override
@@ -127,28 +119,18 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
             // Only allow finishing stack
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return getOutputSlots();
-                }
+                if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
 
-                if (item.getType() == Material.COAL) {
-                    return COAL_SLOTS;
-                }
+                if (item.getType() == Material.COAL) return COAL_SLOTS;
 
                 List<Integer> slots = new ArrayList<>();
-                for (int slot : MISC_SLOTS) {
-                    if (menu.getItemInSlot(slot) != null) {
-                        slots.add(slot);
-                    }
-                }
+                for (int slot : MISC_SLOTS) if (menu.getItemInSlot(slot) != null) slots.add(slot);
 
                 slots.sort(compareSlots(menu));
 
                 int[] array = new int[slots.size()];
 
-                for (int i = 0; i < slots.size(); i++) {
-                    array[i] = slots.get(i);
-                }
+                for (int i = 0; i < slots.size(); i++) array[i] = slots.get(i);
 
                 return array;
             }
@@ -157,7 +139,6 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
 
     private BlockBreakHandler onBreak() {
         return new SimpleBlockBreakHandler() {
-
             @Override
             public void onBlockBreak(@Nonnull Block b) {
                 BlockMenu inv = BlockStorage.getInventory(b);
@@ -176,7 +157,6 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
     @Override
     public void preRegister() {
         addItemHandler(new BlockTicker() {
-
             @Override
             public void tick(Block b, SlimefunItem sf, Config data) {
                 SmartFactory.this.tick(b);
@@ -190,11 +170,8 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
     }
 
     protected void tick(Block b) {
-
         // Check if power is sufficient
-        if (getCharge(b.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(b.getLocation()) < getEnergyConsumption()) return;
 
         BlockMenu inv = BlockStorage.getInventory(b);
         final BlockPosition pos = new BlockPosition(b.getWorld(), b.getX(), b.getY(), b.getZ()); // Used to log progress since we have progress bar
@@ -221,22 +198,17 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
         craft(b);
 
         // Consume items
-        for (Map.Entry<Integer, Integer> ingredient : ingredients.entrySet()) {
+        for (Map.Entry<Integer, Integer> ingredient : ingredients.entrySet())
             inv.consumeItem(ingredient.getKey(), ingredient.getValue());
-        }
 
         resetProgress(pos, inv);
     }
 
     private HashMap<Integer, Integer> getIngredientSlots(Block b, BlockMenu inv) {
         SlimefunItem key = SlimefunItem.getByItem(inv.getItemInSlot(RECIPE_SLOT));
-        if (key == null) {
-            return null;
-        }
+        if (key == null) return null;
 
-        if (!inv.fits(key.getItem(), getOutputSlots())) {
-            return null;
-        }
+        if (!inv.fits(key.getItem(), getOutputSlots())) return null;
 
         HashMap<Integer, Integer> ingredientSlots = new HashMap<>();
 
@@ -249,12 +221,9 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
                 // Match item and amount
                 if (slotItem != null && SlimefunUtils.isItemSimilar(recipeItem, slotItem, true, false)) {
                     if (recipeItem.getType() == Material.COAL) {
-                        if (slotItem.getAmount() < recipeItem.getAmount()) {
-                            continue; // Don't leave 1 for coal
-                        }
-                    } else if (slotItem.getAmount() < recipeItem.getAmount() + 1) {
+                        if (slotItem.getAmount() < recipeItem.getAmount()) continue; // Don't leave 1 for coal
+                    } else if (slotItem.getAmount() < recipeItem.getAmount() + 1)
                         continue; // Make sure misc items have 1 item left
-                    }
 
                     exists = true;
                     ingredientSlots.put(slot, recipeItem.getAmount()); // Save slots and amounts of ingredients
@@ -262,9 +231,7 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
                 }
             }
 
-            if (!exists) {
-                return null;
-            }
+            if (!exists) return null;
         }
 
         return ingredientSlots;
@@ -310,14 +277,10 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
         HashMap<SlimefunItem, Integer> rawSlimefun = new HashMap<>();
 
         ItemStack[] recipe = key.getRecipe();
-        if (key == SlimefunItems.COPPER_WIRE.getItem()) {
-            recipe = new SlimefunItemStack[] {SlimefunItems.COPPER_DUST};
-        }
+        if (key == SlimefunItems.COPPER_WIRE.getItem()) recipe = new SlimefunItemStack[]{SlimefunItems.COPPER_DUST};
 
         for (ItemStack item : recipe) {
-            if (item == null) {
-                continue;
-            }
+            if (item == null) continue;
             if (!isReduced(item)) {
                 // Recursively add reduced recipe until all vanilla
                 Pair<HashMap<Material, Integer>, HashMap<SlimefunItem, Integer>> reduced = reduceRecipe(SlimefunItem.getByItem(item));
@@ -329,23 +292,20 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
                     rawSlimefun.put(recipeItem, rawSlimefun.getOrDefault(recipeItem, 0) + amt * item.getAmount());
                 });
             } else {
-                if (item instanceof SlimefunItemStack) {
+                if (item instanceof SlimefunItemStack)
                     rawSlimefun.put(SlimefunItem.getByItem(item), rawSlimefun.getOrDefault(SlimefunItem.getByItem(item), 0) + item.getAmount());
-                } else {
-                    // Replace some vanilla items
-                    switch (item.getType()) {
-                        case IRON_INGOT:
-                            rawSlimefun.put(SlimefunItems.IRON_DUST.getItem(), rawSlimefun.getOrDefault(SlimefunItems.IRON_DUST.getItem(), 0) + item.getAmount());
-                            break;
-                        case QUARTZ_BLOCK:
-                            rawVanilla.put(Material.QUARTZ, rawVanilla.getOrDefault(Material.QUARTZ, 0) + item.getAmount() * 4);
-                            break;
-                        case REDSTONE_BLOCK:
-                            rawVanilla.put(Material.REDSTONE, rawVanilla.getOrDefault(Material.REDSTONE, 0) + item.getAmount() * 9);
-                            break;
-                        default:
-                            rawVanilla.put(item.getType(), rawVanilla.getOrDefault(item.getType(), 0) + item.getAmount());
-                    }
+                else switch (item.getType()) { // Replace some vanilla items
+                    case IRON_INGOT:
+                        rawSlimefun.put(SlimefunItems.IRON_DUST.getItem(), rawSlimefun.getOrDefault(SlimefunItems.IRON_DUST.getItem(), 0) + item.getAmount());
+                        break;
+                    case QUARTZ_BLOCK:
+                        rawVanilla.put(Material.QUARTZ, rawVanilla.getOrDefault(Material.QUARTZ, 0) + item.getAmount() * 4);
+                        break;
+                    case REDSTONE_BLOCK:
+                        rawVanilla.put(Material.REDSTONE, rawVanilla.getOrDefault(Material.REDSTONE, 0) + item.getAmount() * 9);
+                        break;
+                    default:
+                        rawVanilla.put(item.getType(), rawVanilla.getOrDefault(item.getType(), 0) + item.getAmount());
                 }
             }
         }
@@ -390,9 +350,8 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
             ItemMeta displayMeta = display.getItemMeta();
 
             List<String> lore = new ArrayList<>();
-            for (ItemStack item : ITEM_RECIPES.get(sfStack.getItem())) {
+            for (ItemStack item : ITEM_RECIPES.get(sfStack.getItem()))
                 lore.add(Utils.color("&e" + item.getAmount() + "x " + Utils.getViewableName(item)));
-            }
 
             displayMeta.setLore(lore);
             display.setItemMeta(displayMeta);
@@ -437,4 +396,4 @@ public class SmartFactory extends SlimefunItem implements EnergyNetComponent, Re
     public int getCapacity() {
         return getEnergyCapacity();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WarpPad.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WarpPad.java
similarity index 85%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/WarpPad.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WarpPad.java
index 0f977af..7931ddd 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WarpPad.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WarpPad.java
@@ -1,16 +1,16 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.NonHopperableBlock;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.HologramOwner;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import io.ncbpfluffybear.fluffymachines.objects.NonHopperableBlock;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.block.BlockPlaceEvent;
@@ -20,13 +20,10 @@ import javax.annotation.Nonnull;
 import java.util.List;
 
 public class WarpPad extends NonHopperableBlock implements HologramOwner {
-
-
-    public WarpPad(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public WarpPad(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onPlace(), onUse(), onBreak());
-
     }
 
     private BlockBreakHandler onBreak() {
@@ -52,4 +49,4 @@ public class WarpPad extends NonHopperableBlock implements HologramOwner {
     private ItemHandler onUse() {
         return (BlockUseHandler) PlayerRightClickEvent::cancel;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WaterSprinkler.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WaterSprinkler.java
similarity index 70%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/WaterSprinkler.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WaterSprinkler.java
index 1c4e51c..74747c6 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WaterSprinkler.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WaterSprinkler.java
@@ -1,15 +1,15 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.accelerators.AbstractGrowthAccelerator;
 import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.accelerators.CropGrowthAccelerator;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.Material;
 import org.bukkit.Particle;
 import org.bukkit.block.Block;
@@ -29,32 +29,31 @@ import java.util.concurrent.ThreadLocalRandom;
  * @author FluffyBear
  */
 public class WaterSprinkler extends AbstractGrowthAccelerator {
-
     public final ItemSetting<Double> successChance = new ItemSetting<>(this, "success-chance", 0.5);
     public static final int ENERGY_CONSUMPTION = 16;
     public static final int CAPACITY = 128;
     private static final int RADIUS = 2;
     private static final int PROGRESS_SLOT = 4;
     private static final CustomItemStack noWaterItem = new CustomItemStack(Material.BUCKET,
-        "&cNo water found",
-        "",
-        "&cPlease place water under the sprinkler!"
+            "&cNo water found",
+            "",
+            "&cPlease place water under the sprinkler!"
     );
     private static final CustomItemStack waterFoundItem = new CustomItemStack(Material.WATER_BUCKET,
-        "&bWater detected"
+            "&bWater detected"
     );
     private final ItemSetting<Boolean> particles = new ItemSetting<>(this, "particles", true);
 
-    public WaterSprinkler(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public WaterSprinkler(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         createPreset(this, "&bWater Sprinkler",
-            blockMenuPreset -> {
-                for (int i = 0; i < 9; i++)
-                    blockMenuPreset.addItem(i, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+                blockMenuPreset -> {
+                    for (int i = 0; i < 9; i++)
+                        blockMenuPreset.addItem(i, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
 
-                blockMenuPreset.addItem(PROGRESS_SLOT, noWaterItem);
-            });
+                    blockMenuPreset.addItem(PROGRESS_SLOT, noWaterItem);
+                });
 
         addItemSetting(successChance, particles);
     }
@@ -84,33 +83,26 @@ public class WaterSprinkler extends AbstractGrowthAccelerator {
 
     @Override
     protected void tick(@Nonnull Block b) {
-        if (this.isDisabled()) {
-            return;
-        }
+        if (this.isDisabled()) return;
 
         final BlockMenu inv = BlockStorage.getInventory(b);
         boolean open = inv.hasViewer();
 
         if (b.getRelative(BlockFace.DOWN).getType() == Material.WATER) {
-            if (open) {
-                inv.replaceExistingItem(PROGRESS_SLOT, waterFoundItem);
-            }
+            if (open) inv.replaceExistingItem(PROGRESS_SLOT, waterFoundItem);
         } else {
-            if (open) {
-                inv.replaceExistingItem(PROGRESS_SLOT, noWaterItem);
-            }
+            if (open) inv.replaceExistingItem(PROGRESS_SLOT, noWaterItem);
             return;
         }
 
-        if (getCharge(b.getLocation()) >= getEnergyConsumption()) {
-            for (int x = -getRadius(); x <= getRadius(); x++) {
+        if (getCharge(b.getLocation()) >= getEnergyConsumption())
+            for (int x = -getRadius(); x <= getRadius(); x++)
                 for (int z = -getRadius(); z <= getRadius(); z++) {
                     final Block block = b.getRelative(x, 0, z);
 
-                    if (particles.getValue()) {
+                    if (particles.getValue())
                         block.getWorld().spawnParticle(Particle.WATER_SPLASH, block.getLocation().add(0.5D, 0.5D,
-                            0.5D), 4, 0.1F, 0.1F, 0.1F);
-                    }
+                                0.5D), 4, 0.1F, 0.1F, 0.1F);
 
                     BlockData blockData = block.getBlockData();
 
@@ -119,25 +111,20 @@ public class WaterSprinkler extends AbstractGrowthAccelerator {
                         removeCharge(b.getLocation(), getEnergyConsumption());
                     }
                 }
-            }
-        }
     }
 
     private void grow(@Nonnull Block crop) {
 
         final double random = ThreadLocalRandom.current().nextDouble();
         if (successChance.getValue() >= random) {
-            if (crop.getType() == Material.SUGAR_CANE) {
-                for (int i = 1; i < 3; i++) {
-                    final Block above = crop.getRelative(BlockFace.UP, i);
-                    if (above.getType().isAir()) {
-                        above.setType(Material.SUGAR_CANE);
-                        break;
-                    } else if (above.getType() != Material.SUGAR_CANE) {
-                        return;
-                    }
-                }
-            } else {
+            if (crop.getType() == Material.SUGAR_CANE) for (int i = 1; i < 3; i++) {
+                final Block above = crop.getRelative(BlockFace.UP, i);
+                if (above.getType().isAir()) {
+                    above.setType(Material.SUGAR_CANE);
+                    break;
+                } else if (above.getType() != Material.SUGAR_CANE) return;
+            }
+            else {
                 final Ageable ageable = (Ageable) crop.getBlockData();
                 if (ageable.getAge() < ageable.getMaximumAge()) {
 
@@ -145,10 +132,9 @@ public class WaterSprinkler extends AbstractGrowthAccelerator {
                     crop.setBlockData(ageable);
 
                     crop.getWorld().spawnParticle(Particle.VILLAGER_HAPPY, crop.getLocation().add(0.5D, 0.5D, 0.5D),
-                        4, 0.1F, 0.1F, 0.1F);
+                            4, 0.1F, 0.1F, 0.1F);
                 }
             }
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/CrankGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/CrankGenerator.java
similarity index 57%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/CrankGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/CrankGenerator.java
index 77fd02d..c4e41ee 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/CrankGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/CrankGenerator.java
@@ -1,17 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.GeneratorCore;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.GeneratorCore;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import org.bukkit.Bukkit;
-import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Sound;
 import org.bukkit.block.Block;
@@ -19,16 +15,13 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
-import javax.annotation.Nonnull;
-
 public class CrankGenerator extends MultiBlockMachine {
-
     public static final int RATE = 16;
     public static final int CAPACITY = 64;
 
-    public CrankGenerator(ItemGroup category, SlimefunItemStack item) {
-        super(category, item, new ItemStack[] {null, null, null, null, new ItemStack(Material.LEVER), null, null,
-            FluffyItems.GENERATOR_CORE, null}, BlockFace.SELF);
+    public CrankGenerator(ItemGroup itemGroup, SlimefunItemStack item) {
+        super(itemGroup, item, new ItemStack[]{null, null, null, null, new ItemStack(Material.LEVER), null, null,
+                FluffyItems.GENERATOR_CORE, null}, BlockFace.SELF);
     }
 
     public void onInteract(Player p, Block b) {
@@ -40,12 +33,7 @@ public class CrankGenerator extends MultiBlockMachine {
                 ((GeneratorCore) core).addCharge(coreBlock.getLocation(), RATE);
                 p.playSound(p.getLocation(), Sound.BLOCK_PISTON_EXTEND, 0.5F, 0.5F);
 
-            } else {
-                Utils.send(p, "&cMissing generator core");
-            }
-        } else {
-            Utils.send(p, "&cMissing generator core");
-        }
+            } else Utils.send(p, "&cMissing generator core");
+        } else Utils.send(p, "&cMissing generator core");
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/ExpDispenser.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/ExpDispenser.java
similarity index 86%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/ExpDispenser.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/ExpDispenser.java
index 1a99526..32159b4 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/ExpDispenser.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/ExpDispenser.java
@@ -1,11 +1,11 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.Barrel;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.ncbpfluffybear.fluffymachines.items.Barrel;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
@@ -19,7 +19,6 @@ import org.bukkit.inventory.ItemStack;
  * Dispenses multiple bottles of exp at once
  */
 public class ExpDispenser extends MultiBlockMachine {
-
     private static final int EXP_PER_BOTTLE = 7; // Average exp per bottle
 
     public ExpDispenser(ItemGroup itemGroup, SlimefunItemStack item, ItemStack[] recipe) {
@@ -32,12 +31,11 @@ public class ExpDispenser extends MultiBlockMachine {
         Container container = (Container) dispenser.getState();
         int experience = 0;
 
-        for (ItemStack bottle : container.getInventory().getContents()) {
+        for (ItemStack bottle : container.getInventory().getContents())
             if (bottle != null && bottle.getType() == Material.EXPERIENCE_BOTTLE) { // Search for xp bottles
                 experience += EXP_PER_BOTTLE * bottle.getAmount(); // Collect experience from bottle
                 bottle.setAmount(0); // Delete bottle
             }
-        }
 
         Block barrel = dispenser.getRelative(((Directional) dispenser.getBlockData()).getFacing());
         SlimefunItem sfItem = BlockStorage.check(barrel);
@@ -51,11 +49,10 @@ public class ExpDispenser extends MultiBlockMachine {
             }
         }
 
-        if (experience == 0) {
-            Utils.send(p, "&cThere were no experience bottles in the dispenser!");
-        } else {
+        if (experience == 0) Utils.send(p, "&cThere were no experience bottles in the dispenser!");
+        else {
             p.giveExp(experience);
             Utils.send(p, "&a+" + experience + " XP");
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/Foundry.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/Foundry.java
similarity index 69%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/Foundry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/Foundry.java
index b323836..06fe458 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/Foundry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/Foundry.java
@@ -1,15 +1,14 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks;
 
-import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.SuperheatedFurnace;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.SuperheatedFurnace;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import java.util.Objects;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -25,21 +24,18 @@ import org.bukkit.inventory.ItemStack;
  * @author NCBPFluffyBear
  */
 public class Foundry extends MultiBlockMachine {
-
-    public Foundry(ItemGroup category, SlimefunItemStack item) {
-        super(category, item, new ItemStack[] {
-            new ItemStack(Material.NETHERITE_BLOCK), FluffyItems.SUPERHEATED_FURNACE, new ItemStack(Material.NETHERITE_BLOCK),
-            new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.GLASS), new ItemStack(Material.NETHERITE_BLOCK),
-            new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.CAULDRON), new ItemStack(Material.NETHERITE_BLOCK)
+    public Foundry(ItemGroup itemGroup, SlimefunItemStack item) {
+        super(itemGroup, item, new ItemStack[]{
+                new ItemStack(Material.NETHERITE_BLOCK), FluffyItems.SUPERHEATED_FURNACE, new ItemStack(Material.NETHERITE_BLOCK),
+                new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.GLASS), new ItemStack(Material.NETHERITE_BLOCK),
+                new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.CAULDRON), new ItemStack(Material.NETHERITE_BLOCK)
         }, BlockFace.DOWN);
     }
 
     @Override
     public void onInteract(Player p, Block b) {
         // Verify a vanilla blast furnace is not being used
-        if (BlockStorage.checkID(b) == null || !BlockStorage.checkID(b).equals("SUPERHEATED_FURNACE")) {
-            return;
-        }
+        if (BlockStorage.checkID(b) == null || !BlockStorage.checkID(b).equals("SUPERHEATED_FURNACE")) return;
 
         if (BlockStorage.getLocationInfo(b.getLocation(), "accessible") == null) {
             BlockStorage.addBlockInfo(b, "accessible", "true");
@@ -49,7 +45,7 @@ public class Foundry extends MultiBlockMachine {
 
                 p.getInventory().getItemInMainHand().setType(Material.BUCKET);
                 ArmorStand lavaStand = (ArmorStand) p.getWorld().spawnEntity(b.getLocation().add(0.5, -3, 0.5),
-                    EntityType.ARMOR_STAND);
+                        EntityType.ARMOR_STAND);
                 lavaStand.getEquipment().setHelmet(new CustomItemStack(
                         SlimefunUtils.getCustomHead("b6965e6a58684c277d18717cec959f2833a72dfa95661019dbcdf3dbf66b048")));
                 lavaStand.setCanPickupItems(false);
@@ -58,19 +54,17 @@ public class Foundry extends MultiBlockMachine {
                 lavaStand.setCustomName("hehexdfluff");
                 lavaStand.setCustomNameVisible(false);
                 Furnace furnace = (Furnace) b.getState();
-                furnace.setBurnTime((short)1000000);
+                furnace.setBurnTime((short) 1000000);
                 furnace.update(true);
 
                 BlockStorage.addBlockInfo(b, "stand", String.valueOf(lavaStand.getUniqueId()));
                 BlockStorage.addBlockInfo(b, "ignited", "true");
-            } else {
-                Utils.send(p, "&cThis foundry still needs to be filled with lava!");
-            }
+            } else Utils.send(p, "&cThis foundry still needs to be filled with lava!");
         } else if (BlockStorage.getLocationInfo(b.getLocation(), "ignited") != null) {
             // Reheat furnace (Cosmetic)
             Furnace furnace = (Furnace) b.getState();
-            furnace.setBurnTime((short)1000000);
+            furnace.setBurnTime((short) 1000000);
             furnace.update(true);
         }
-     }
-}
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/GeneratorCore.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/GeneratorCore.java
similarity index 82%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/GeneratorCore.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/GeneratorCore.java
index cef65bc..7a5e03c 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/GeneratorCore.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/GeneratorCore.java
@@ -1,4 +1,4 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks.components;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -13,9 +13,8 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.Nonnull;
 
 public class GeneratorCore extends SlimefunItem implements EnergyNetProvider {
-
-    public GeneratorCore(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public GeneratorCore(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Nonnull
@@ -35,4 +34,4 @@ public class GeneratorCore extends SlimefunItem implements EnergyNetProvider {
     public int getCapacity() {
         return 64;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/SuperheatedFurnace.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/SuperheatedFurnace.java
similarity index 75%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/SuperheatedFurnace.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/SuperheatedFurnace.java
index cbf919e..d49ccbc 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/SuperheatedFurnace.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/SuperheatedFurnace.java
@@ -1,26 +1,26 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks.components;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.Foundry;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.NonHopperableBlock;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.ncbpfluffybear.fluffymachines.objects.NonHopperableBlock;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.ncbpfluffybear.fluffymachines.multiblocks.Foundry;
 import org.apache.commons.lang.WordUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
@@ -38,7 +38,6 @@ import java.util.List;
 import java.util.UUID;
 
 /**
- *
  * Melts and stores dusts and ingots
  * and can be withdrawn in either form.
  * Component of {@link Foundry}
@@ -46,7 +45,6 @@ import java.util.UUID;
  * @author NCBPFluffyBear
  */
 public class SuperheatedFurnace extends NonHopperableBlock {
-
     private static final int[] inputBorder = {0, 2, 9, 11, 18, 19, 20};
     private static final int[] dustOutputBorder = {3, 5, 12, 14, 21, 22, 23};
     private static final int[] ingotOutputBorder = {6, 8, 15, 17, 24, 25, 26};
@@ -61,28 +59,27 @@ public class SuperheatedFurnace extends NonHopperableBlock {
     private static final Material netherite = Material.NETHERITE_BLOCK;
     private final int MAX_STACK_SIZE = 64;
 
-    private static final SlimefunItemStack[] dusts = new SlimefunItemStack[] {
-        SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
-        SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
-        SlimefunItems.TIN_DUST, SlimefunItems.SILVER_DUST, SlimefunItems.MAGNESIUM_DUST};
+    private static final SlimefunItemStack[] dusts = new SlimefunItemStack[]{
+            SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
+            SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
+            SlimefunItems.TIN_DUST, SlimefunItems.SILVER_DUST, SlimefunItems.MAGNESIUM_DUST};
 
-    private static final SlimefunItemStack[] ingots = new SlimefunItemStack[] {
-        SlimefunItems.COPPER_INGOT,
-        SlimefunItems.LEAD_INGOT, SlimefunItems.ALUMINUM_INGOT, SlimefunItems.ZINC_INGOT,
-        SlimefunItems.TIN_INGOT, SlimefunItems.SILVER_INGOT, SlimefunItems.MAGNESIUM_INGOT};
+    private static final SlimefunItemStack[] ingots = new SlimefunItemStack[]{
+            SlimefunItems.COPPER_INGOT,
+            SlimefunItems.LEAD_INGOT, SlimefunItems.ALUMINUM_INGOT, SlimefunItems.ZINC_INGOT,
+            SlimefunItems.TIN_INGOT, SlimefunItems.SILVER_INGOT, SlimefunItems.MAGNESIUM_INGOT};
 
     private final int OVERFLOW_AMOUNT = 3240;
 
     private final ItemSetting<Boolean> breakOnlyWhenEmpty = new ItemSetting<>(this, "break-only-when-empty", false);
 
-    public SuperheatedFurnace(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public SuperheatedFurnace(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
 
         addItemHandler(onBreak());
         addItemSetting(breakOnlyWhenEmpty);
 
         new BlockMenuPreset(getId(), "&cFoundry") {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -94,7 +91,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
 
                     menu.replaceExistingItem(4, new CustomItemStack(Material.GUNPOWDER, "&6Dust Available: &e0", "&a> &eLeft Click &ahere to retrieve 1", "&a> &eLeft Click &ahere to retrieve 64"));
                     menu.replaceExistingItem(7, new CustomItemStack(Material.IRON_INGOT, "&6Ingots Available: &e0", "&a> &eRight Click &ahere to retrieve 1", "&a> &eLeft Click &ahere to retrieve 64"));
-                    menu.replaceExistingItem(1, new CustomItemStack(Material.CHEST, "&6Melted Dust: &e0 &7(0%)", "&bType: None",  "&7Stacks: 0"));
+                    menu.replaceExistingItem(1, new CustomItemStack(Material.CHEST, "&6Melted Dust: &e0 &7(0%)", "&bType: None", "&7Stacks: 0"));
 
                     BlockStorage.addBlockInfo(b, "stored", "0");
                 }
@@ -115,10 +112,10 @@ public class SuperheatedFurnace extends NonHopperableBlock {
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return (p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(
-                    p, b.getLocation(), Interaction.INTERACT_BLOCK))
-                    && getBlockInfo(b.getLocation(), "accessible") != null
-                    && getBlockInfo(b.getLocation(), "ignited") != null && checkStructure(b);
+                        || Slimefun.getProtectionManager().hasPermission(
+                        p, b.getLocation(), Interaction.INTERACT_BLOCK))
+                        && getBlockInfo(b.getLocation(), "accessible") != null
+                        && getBlockInfo(b.getLocation(), "ignited") != null && checkStructure(b);
             }
 
             @Override
@@ -128,16 +125,11 @@ public class SuperheatedFurnace extends NonHopperableBlock {
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return new int[] {INPUT_SLOT};
-                } else if (flow == ItemTransportFlow.WITHDRAW) {
-                    return new int[] {DUST_OUTPUT_SLOT, INGOT_OUTPUT_SLOT};
-                } else {
-                    return new int[0];
-                }
+                if (flow == ItemTransportFlow.INSERT) return new int[]{INPUT_SLOT};
+                else if (flow == ItemTransportFlow.WITHDRAW) return new int[]{DUST_OUTPUT_SLOT, INGOT_OUTPUT_SLOT};
+                else return new int[0];
             }
         };
-
     }
 
     private BlockBreakHandler onBreak() {
@@ -149,7 +141,6 @@ public class SuperheatedFurnace extends NonHopperableBlock {
                 BlockMenu inv = BlockStorage.getInventory(b);
 
                 if (inv != null) {
-
                     int itemCount = 0;
 
                     int stored = Integer.parseInt(getBlockInfo(b.getLocation(), "stored"));
@@ -161,11 +152,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
                         return;
                     }
 
-                    for (Entity en : p.getNearbyEntities(5, 5, 5)) {
-                        if (en instanceof Item) {
-                            itemCount++;
-                        }
-                    }
+                    for (Entity en : p.getNearbyEntities(5, 5, 5)) if (en instanceof Item) itemCount++;
 
                     if (itemCount > 5) {
                         Utils.send(p, "&cPlease remove nearby items before breaking this superheated furnace!");
@@ -182,56 +169,45 @@ public class SuperheatedFurnace extends NonHopperableBlock {
                         ItemStack dust = SlimefunItem.getById(type + "_DUST").getItem();
 
                         if (stored > OVERFLOW_AMOUNT) {
-
                             Utils.send(p, "&eThere are more than " + OVERFLOW_AMOUNT + " items in this superheated furnace! " +
-                                "Dropping " + OVERFLOW_AMOUNT + " items instead!");
+                                    "Dropping " + OVERFLOW_AMOUNT + " items instead!");
                             int toRemove = OVERFLOW_AMOUNT;
                             while (toRemove >= stackSize) {
-
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(dust, stackSize));
 
                                 toRemove = toRemove - stackSize;
                             }
 
-                            if (toRemove > 0) {
+                            if (toRemove > 0)
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(dust, toRemove));
-                            }
 
                             BlockStorage.addBlockInfo(b, "stored", String.valueOf(stored - OVERFLOW_AMOUNT));
 
                             e.setCancelled(true);
-                            updateIndicator(b);
-                            return;
                         } else {
-
                             // Everything greater than 1 stack
                             while (stored >= stackSize) {
-
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(dust, stackSize));
 
                                 stored = stored - stackSize;
                             }
 
                             // Drop remaining, if there is any
-                            if (stored > 0) {
+                            if (stored > 0)
                                 b.getWorld().dropItemNaturally(b.getLocation(), new CustomItemStack(dust, stored));
-                            }
 
-                            if (BlockStorage.getLocationInfo(b.getLocation(), "stand") != null) {
+                            if (BlockStorage.getLocationInfo(b.getLocation(), "stand") != null)
                                 Bukkit.getEntity(UUID.fromString(BlockStorage.getLocationInfo(b.getLocation(), "stand"))).remove();
-                            }
 
                             // In case they use an explosive pick
                             BlockStorage.addBlockInfo(b, "stored", "0");
-                            updateIndicator(b);
-                            return;
                         }
+                        updateIndicator(b);
+                        return;
                     }
                     if (BlockStorage.getLocationInfo(b.getLocation(), "stand") != null) {
                         Entity en = Bukkit.getEntity(UUID.fromString(BlockStorage.getLocationInfo(b.getLocation(), "stand")));
-                        if (en != null) {
-                            en.remove();
-                        }
+                        if (en != null) en.remove();
                     }
                 }
             }
@@ -239,25 +215,19 @@ public class SuperheatedFurnace extends NonHopperableBlock {
     }
 
     protected void constructMenu(BlockMenuPreset preset) {
-        for (int i : dustOutputBorder) {
+        for (int i : dustOutputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "), (p, slot, item, action) -> false);
-        }
 
-        for (int i : inputBorder) {
+        for (int i : inputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "), (p, slot, item, action) -> false);
-        }
 
-        for (int i : ingotOutputBorder) {
+        for (int i : ingotOutputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.RED_STAINED_GLASS_PANE), " "), (p, slot, item, action) -> false);
-        }
-
-
     }
 
     @Override
     public void preRegister() {
         addItemHandler(new BlockTicker() {
-
             @Override
             public void tick(Block b, SlimefunItem sf, Config data) {
                 SuperheatedFurnace.this.tick(b);
@@ -276,7 +246,6 @@ public class SuperheatedFurnace extends NonHopperableBlock {
         ItemStack inputItem = inv.getItemInSlot(INPUT_SLOT);
 
         if (inputItem != null) {
-
             int amount = inputItem.getAmount();
             String type = getBlockInfo(b.getLocation(), "type");
             SlimefunItem sfItem = SlimefunItem.getByItem(inputItem);
@@ -286,53 +255,45 @@ public class SuperheatedFurnace extends NonHopperableBlock {
 
                 if (sfItem != null) {
                     if (sfItem.getId().endsWith("_DUST")) {
-                        for (SlimefunItemStack dust : dusts) {
+                        for (SlimefunItemStack dust : dusts)
                             if (sfItem == dust.getItem()) {
-
                                 inv.consumeItem(INPUT_SLOT, amount);
 
                                 registerDust(b, dust.getItemId().replace("_DUST", ""), amount);
                                 break;
-
                             }
-                        }
                     } else if (sfItem.getId().endsWith("_INGOT")) {
-                        for (SlimefunItemStack ingot : ingots) {
+                        for (SlimefunItemStack ingot : ingots)
                             if (sfItem == ingot.getItem()) {
-
                                 inv.consumeItem(INPUT_SLOT, amount);
 
                                 registerDust(b, ingot.getItemId().replace("_INGOT", ""), amount);
                                 break;
                             }
-                        }
                     } else if (sfItem.getId().equals(SlimefunItems.GOLD_4K.getItemId())) {
                         inv.consumeItem(INPUT_SLOT, amount);
 
                         registerDust(b, "GOLD", amount);
                     }
                 } else if (inputItem.getType() == Material.IRON_INGOT
-                    && inputItem.getItemMeta().equals(new ItemStack(Material.IRON_INGOT).getItemMeta())
+                        && inputItem.getItemMeta().equals(new ItemStack(Material.IRON_INGOT).getItemMeta())
                 ) {
                     inv.consumeItem(INPUT_SLOT, amount);
 
                     registerDust(b, "IRON", amount);
                 }
 
-            } else {
-                if (sfItem != null && ((sfItem.getId().equals(type + "_DUST") || sfItem.getId().equals(type + "_INGOT"))
+            } else if (sfItem != null && ((sfItem.getId().equals(type + "_DUST") || sfItem.getId().equals(type + "_INGOT"))
                     || (type.equals("GOLD") && sfItem.getId().equals(SlimefunItems.GOLD_4K.getItemId())))
                     || (type.equals("IRON") && inputItem.getType() == Material.IRON_INGOT
                     && inputItem.getItemMeta().equals(new ItemStack(Material.IRON_INGOT).getItemMeta()))
                     && stored + amount < MAX_STORAGE) {
-                    inv.consumeItem(INPUT_SLOT, amount);
-                    addDust(b, amount);
-                }
+                inv.consumeItem(INPUT_SLOT, amount);
+                addDust(b, amount);
             }
         }
     }
 
-
     private void registerDust(Block b, String type, int amount) {
         int stored = Integer.parseInt(getBlockInfo(b.getLocation(), "stored"));
         setBlockInfo(b, "stored", String.valueOf(stored + amount));
@@ -353,39 +314,29 @@ public class SuperheatedFurnace extends NonHopperableBlock {
 
         if (stored.equals("0")) {
             setBlockInfo(b, "type", null);
-            inv.replaceExistingItem(INPUT_INDICATOR, new CustomItemStack(new ItemStack(Material.CHEST), "&6Melted Dust: &e0 &7(0%)", "&bType: None",  "&7Stacks: 0"));
-        } else {
+            inv.replaceExistingItem(INPUT_INDICATOR, new CustomItemStack(new ItemStack(Material.CHEST), "&6Melted Dust: &e0 &7(0%)", "&bType: None", "&7Stacks: 0"));
+        } else
             inv.replaceExistingItem(INPUT_INDICATOR, new CustomItemStack(new ItemStack(Material.CHEST), "&6Melted Dust: &e" + stored + " &7(" + Double.parseDouble(stored) / MAX_STORAGE * 100 + "%)", "&bType: " + type, "&7Stacks: " + Double.parseDouble(stored) / 64));
 
-        }
         inv.replaceExistingItem(DUST_INDICATOR, new CustomItemStack(new ItemStack(Material.GUNPOWDER), "&6Dust Available: &e" + stored, "&a> &eLeft Click &ahere to retrieve 1", "&a> &eRight Click &ahere to retrieve 64"));
         inv.replaceExistingItem(INGOT_INDICATOR, new CustomItemStack(new ItemStack(Material.IRON_INGOT), "&6Ingots Available: &e" + stored, "&a> &eLeft Click &ahere to retrieve 1", "&a> &eRight Click &ahere to retrieve 64"));
-
-
     }
 
     private void retrieveDust(BlockMenu menu, Block b, boolean isRightClicked) {
-
-        if (getBlockInfo(b.getLocation(), "stored") == null)
-            return;
+        if (getBlockInfo(b.getLocation(), "stored") == null) return;
 
         int stored = Integer.parseInt(getBlockInfo(b.getLocation(), "stored"));
 
         if (stored > 0 && (menu.getItemInSlot(DUST_OUTPUT_SLOT) == null
-            || menu.getItemInSlot(DUST_OUTPUT_SLOT).getAmount() < 64)) {
+                || menu.getItemInSlot(DUST_OUTPUT_SLOT).getAmount() < 64)) {
 
             String type = getBlockInfo(b.getLocation(), "type");
             int amount;
 
-            if (!isRightClicked) {
-                amount = 1;
-            } else if (stored < MAX_STACK_SIZE) {
-                amount = stored;
-            } else if (menu.getItemInSlot(DUST_OUTPUT_SLOT) == null) {
-                amount = MAX_STACK_SIZE;
-            } else {
-                amount = MAX_STACK_SIZE - menu.getItemInSlot(DUST_OUTPUT_SLOT).getAmount();
-            }
+            if (!isRightClicked) amount = 1;
+            else if (stored < MAX_STACK_SIZE) amount = stored;
+            else if (menu.getItemInSlot(DUST_OUTPUT_SLOT) == null) amount = MAX_STACK_SIZE;
+            else amount = MAX_STACK_SIZE - menu.getItemInSlot(DUST_OUTPUT_SLOT).getAmount();
 
             ItemStack dustItem = new CustomItemStack(SlimefunItem.getById(type + "_DUST").getItem().clone(), amount);
             if (menu.fits(dustItem, DUST_OUTPUT_SLOT)) {
@@ -398,37 +349,28 @@ public class SuperheatedFurnace extends NonHopperableBlock {
     }
 
     private void retrieveIngot(BlockMenu menu, Block b, boolean isRightClicked) {
-
         if (getBlockInfo(b.getLocation(), "stored") == null)
             return;
 
         int stored = Integer.parseInt(getBlockInfo(b.getLocation(), "stored"));
 
         if (stored > 0 && (menu.getItemInSlot(INGOT_OUTPUT_SLOT) == null
-            || menu.getItemInSlot(INGOT_OUTPUT_SLOT).getAmount() < 64)) {
+                || menu.getItemInSlot(INGOT_OUTPUT_SLOT).getAmount() < 64)) {
 
             String type = getBlockInfo(b.getLocation(), "type");
 
             int amount;
 
-            if (!isRightClicked) {
-                amount = 1;
-            } else if (stored < MAX_STACK_SIZE) {
-                amount = stored;
-            } else if (menu.getItemInSlot(INGOT_OUTPUT_SLOT) == null) {
-                amount = MAX_STACK_SIZE;
-            } else {
-                amount = MAX_STACK_SIZE - menu.getItemInSlot(INGOT_OUTPUT_SLOT).getAmount();
-            }
+            if (!isRightClicked) amount = 1;
+            else if (stored < MAX_STACK_SIZE) amount = stored;
+            else if (menu.getItemInSlot(INGOT_OUTPUT_SLOT) == null) amount = MAX_STACK_SIZE;
+            else amount = MAX_STACK_SIZE - menu.getItemInSlot(INGOT_OUTPUT_SLOT).getAmount();
 
             ItemStack ingotItem;
-            if (type.equals("GOLD")) {
+            if (type.equals("GOLD"))
                 ingotItem = new CustomItemStack(SlimefunItems.GOLD_4K.getItem().getItem().clone(), amount);
-            } else if (type.equals("IRON")) {
-                ingotItem = new ItemStack(Material.IRON_INGOT, amount);
-            } else {
-                ingotItem = new CustomItemStack(SlimefunItem.getById(type + "_INGOT").getItem().clone(), amount);
-            }
+            else if (type.equals("IRON")) ingotItem = new ItemStack(Material.IRON_INGOT, amount);
+            else ingotItem = new CustomItemStack(SlimefunItem.getById(type + "_INGOT").getItem().clone(), amount);
 
             if (menu.fits(ingotItem, INGOT_OUTPUT_SLOT)) {
                 setBlockInfo(b, "stored", String.valueOf(stored - amount));
@@ -449,19 +391,16 @@ public class SuperheatedFurnace extends NonHopperableBlock {
         } else if (b.getRelative(BlockFace.EAST).getType() == netherite) {
             face = BlockFace.EAST;
             relative = b.getRelative(face);
-        } else {
-            return false;
-        }
+        } else return false;
 
         // Checks multiblock structure
-
         return b.getRelative(face).getType() == netherite
-            && checkRite(relative.getRelative(0, -1, 0))
-            && checkRite(relative.getRelative(0, -2, 0))
-            && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -1, 0))
-            && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -2, 0))
-            && b.getRelative(0, -1, 0).getType() == Material.GLASS
-            && b.getRelative(0, -2, 0).getType() == Material.CAULDRON;
+                && checkRite(relative.getRelative(0, -1, 0))
+                && checkRite(relative.getRelative(0, -2, 0))
+                && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -1, 0))
+                && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -2, 0))
+                && b.getRelative(0, -1, 0).getType() == Material.GLASS
+                && b.getRelative(0, -2, 0).getType() == Material.CAULDRON;
     }
 
     private boolean checkRite(Block b) {
@@ -475,4 +414,4 @@ public class SuperheatedFurnace extends NonHopperableBlock {
     private String getBlockInfo(Location l, String key) {
         return BlockStorage.getLocationInfo(l, key);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/AutoCrafter.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/AutoCrafter.java
similarity index 86%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/objects/AutoCrafter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/AutoCrafter.java
index 32298e3..2b40d3c 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/AutoCrafter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/AutoCrafter.java
@@ -1,28 +1,28 @@
-package io.ncbpfluffybear.fluffymachines.objects;
+package id.universenetwork.sfa_loader.addons.fluffymachines.objects;
 
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
@@ -37,7 +37,6 @@ import java.util.Comparator;
 import java.util.List;
 
 public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
-
     public static final int ENERGY_CONSUMPTION = 128;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     private final int[] border = {0, 1, 3, 4, 5, 7, 8, 13, 14, 15, 16, 17, 50, 51, 52, 53};
@@ -49,8 +48,8 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     private final Material material;
     private final MultiBlockMachine mblock;
 
-    public AutoCrafter(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, String displayName, Material material, String machineName, RecipeType machineRecipes) {
-        super(category, item, recipeType, recipe);
+    public AutoCrafter(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, String displayName, Material material, String machineName, RecipeType machineRecipes) {
+        super(itemGroup, item, recipeType, recipe);
 
         this.machineName = machineName;
         this.material = material;
@@ -63,7 +62,6 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
 
     private void constructMenu(String displayName) {
         new BlockMenuPreset(getId(), displayName) {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -114,31 +112,22 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     }
 
     protected int[] getCustomItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-        if (flow == ItemTransportFlow.WITHDRAW) {
-            return getOutputSlots();
-        }
+        if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
 
         List<Integer> slots = new ArrayList<>();
-        for (int slot : getInputSlots()) {
-            if (menu.getItemInSlot(slot) != null) {
-                slots.add(slot);
-            }
-        }
+        for (int slot : getInputSlots()) if (menu.getItemInSlot(slot) != null) slots.add(slot);
 
         slots.sort(compareSlots(menu));
 
         int[] array = new int[slots.size()];
 
-        for (int i = 0; i < slots.size(); i++) {
-            array[i] = slots.get(i);
-        }
+        for (int i = 0; i < slots.size(); i++) array[i] = slots.get(i);
 
         return array;
     }
 
     private BlockPlaceHandler onPlace() {
         return new BlockPlaceHandler(true) {
-
             @Override
             public void onPlayerPlace(@Nonnull BlockPlaceEvent e) {
                 BlockStorage.addBlockInfo(e.getBlock(), "enabled", String.valueOf(false));
@@ -162,7 +151,6 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
                     inv.dropItems(b.getLocation(), getInputSlots());
                     inv.dropItems(b.getLocation(), getOutputSlots());
                 }
-
             }
         };
     }
@@ -174,9 +162,8 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     protected void constructMenu(BlockMenuPreset preset) {
         borders(preset, border, inputBorder, outputBorder);
 
-        for (int i : getOutputSlots()) {
+        for (int i : getOutputSlots())
             preset.addMenuClickHandler(i, new ChestMenu.AdvancedMenuClickHandler() {
-
                 @Override
                 public boolean onClick(Player p, int slot, ItemStack cursor, ClickAction action) {
                     return false;
@@ -189,12 +176,10 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
                     return cursor.getType() == Material.AIR;
                 }
             });
-        }
 
         preset.addItem(2, new CustomItemStack(new ItemStack(material), "&eRecipe",
                 "", "&bPut in the Recipe you want to craft", machineName + " Recipes ONLY"
-            ),
-            (p, slot, item, action) -> false);
+        ), (p, slot, item, action) -> false);
     }
 
     public int getEnergyConsumption() {
@@ -222,7 +207,6 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     @Override
     public void preRegister() {
         addItemHandler(new BlockTicker() {
-
             @Override
             public void tick(Block b, SlimefunItem sf, Config data) {
                 AutoCrafter.this.tick(b);
@@ -236,13 +220,9 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     }
 
     protected void tick(Block block) {
-        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals(String.valueOf(false))) {
-            return;
-        }
+        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals(String.valueOf(false))) return;
 
-        if (getCharge(block.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(block.getLocation()) < getEnergyConsumption()) return;
 
         craftIfValid(block);
     }
@@ -253,25 +233,19 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
         // Make sure at least 1 slot is free
         for (int outSlot : getOutputSlots()) {
             ItemStack outItem = menu.getItemInSlot(outSlot);
-            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) {
-                break;
-            } else if (outSlot == getOutputSlots()[1]) {
-                return;
-            }
+            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) break;
+            else if (outSlot == getOutputSlots()[1]) return;
         }
 
         // Find matching recipe
-        for (ItemStack[] input : RecipeType.getRecipeInputList(mblock)) {
+        for (ItemStack[] input : RecipeType.getRecipeInputList(mblock))
             if (isCraftable(menu, input)) {
                 ItemStack output = RecipeType.getRecipeOutputList(mblock, input).clone();
-                if (!menu.fits(output, getOutputSlots())) {
-                    return;
-                }
+                if (!menu.fits(output, getOutputSlots())) return;
                 craft(output, menu);
                 removeCharge(block.getLocation(), getEnergyConsumption());
                 return;
             }
-        }
         // we're only executing the last possible shaped recipe
         // we don't want to allow this to be pressed instead of the default timer-based
         // execution to prevent abuse and auto clickers
@@ -281,7 +255,7 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
         for (int j = 0; j < 9; j++) {
             ItemStack item = inv.getItemInSlot(getInputSlots()[j]);
             if ((item != null && item.getAmount() == 1 && item.getType().getMaxStackSize() != 1)
-                || !SlimefunUtils.isItemSimilar(inv.getItemInSlot(getInputSlots()[j]), recipe[j], true)) {
+                    || !SlimefunUtils.isItemSimilar(inv.getItemInSlot(getInputSlots()[j]), recipe[j], true)) {
                 return false;
             }
         }
@@ -293,29 +267,23 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
         for (int j = 0; j < 9; j++) {
             ItemStack item = inv.getItemInSlot(getInputSlots()[j]);
 
-            if (item != null && item.getType() != Material.AIR) {
-                inv.consumeItem(getInputSlots()[j]);
-            }
+            if (item != null && item.getType() != Material.AIR) inv.consumeItem(getInputSlots()[j]);
         }
 
         inv.pushItem(output, outputSlots);
     }
 
     static void borders(BlockMenuPreset preset, int[] border, int[] inputBorder, int[] outputBorder) {
-        for (int i : border) {
+        for (int i : border)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
 
-        for (int i : inputBorder) {
+        for (int i : inputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
 
-        for (int i : outputBorder) {
+        for (int i : outputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
     }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/DoubleHologramOwner.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/DoubleHologramOwner.java
similarity index 93%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/objects/DoubleHologramOwner.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/DoubleHologramOwner.java
index 2ffda66..2ba9633 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/DoubleHologramOwner.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/DoubleHologramOwner.java
@@ -1,17 +1,18 @@
-package io.ncbpfluffybear.fluffymachines.objects;
+package id.universenetwork.sfa_loader.addons.fluffymachines.objects;
 
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;
 import io.github.thebusybiscuit.slimefun4.core.services.holograms.HologramsService;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.HologramProjector;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.util.Vector;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
 /**
  * This {@link ItemAttribute} manages holograms.
  * Modified version of {@link io.github.thebusybiscuit.slimefun4.core.attributes.HologramOwner}
@@ -19,13 +20,10 @@ import org.bukkit.util.Vector;
  *
  * @author TheBusyBiscuit
  * @author NCBPFluffyBear
- *
  * @see HologramProjector
  * @see HologramsService
- *
  */
 public interface DoubleHologramOwner extends ItemAttribute {
-
     default void updateHologram(@Nonnull Block b, @Nullable String topText, @Nonnull String bottomText) {
         Location locTop = b.getLocation().add(getTopHologramOffset(b));
         Location locBot = b.getLocation().add(getBottomHologramOffset(b));
@@ -45,7 +43,6 @@ public interface DoubleHologramOwner extends ItemAttribute {
         return Slimefun.getHologramsService().getDefaultOffset();
     }
 
-    @Nonnull
     default double getHologramSpacing() {
         return 0.2;
     }
@@ -59,5 +56,4 @@ public interface DoubleHologramOwner extends ItemAttribute {
     default Vector getBottomHologramOffset(@Nonnull Block block) {
         return getHologramOffset(block);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/NonHopperableBlock.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/NonHopperableBlock.java
similarity index 78%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/objects/NonHopperableBlock.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/NonHopperableBlock.java
index f3f6e17..d7c8035 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/NonHopperableBlock.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/NonHopperableBlock.java
@@ -3,7 +3,7 @@
 // (powered by FernFlower decompiler)
 //
 
-package io.ncbpfluffybear.fluffymachines.objects;
+package id.universenetwork.sfa_loader.addons.fluffymachines.objects;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -16,8 +16,8 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.ItemStack;
 
 public class NonHopperableBlock extends SlimefunItem {
-    public NonHopperableBlock(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public NonHopperableBlock(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @EventHandler
@@ -25,9 +25,6 @@ public class NonHopperableBlock extends SlimefunItem {
         if (e.getSource().getType() == InventoryType.HOPPER && e.getDestination().getLocation() != null
                 && BlockStorage.hasBlockInfo(e.getDestination().getLocation())
                 && BlockStorage.check(e.getDestination().getLocation()) instanceof NonHopperableBlock
-        ) {
-            e.setCancelled(true);
-        }
-
+        ) e.setCancelled(true);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java
new file mode 100644
index 0000000..54c5d6e
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java
@@ -0,0 +1,4 @@
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
+
+public interface CancelPlace {
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Constants.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Constants.java
similarity index 59%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/Constants.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Constants.java
index 5e615af..097e089 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Constants.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Constants.java
@@ -1,11 +1,8 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import org.bukkit.Bukkit;
-import org.bukkit.NamespacedKey;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -13,22 +10,18 @@ import java.util.List;
 import java.util.regex.Pattern;
 
 public final class Constants {
-
     public static final int SERVER_VERSION = Integer.parseInt(Bukkit.getVersion().replaceFirst(".*MC: ", "").replace(
-        ")", "").replace(".", ""));
+            ")", "").replace(".", ""));
 
     public static final Pattern VERSION_PATTERN = Pattern.compile("(DEV - )([0-9]+)");
 
     public static final boolean isSoulJarsInstalled = Bukkit.getPluginManager().isPluginEnabled("SoulJars");
 
     public static final List<SlimefunItemStack> dusts = new ArrayList<>(Arrays.asList(
-        SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
-        SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
-        SlimefunItems.TIN_DUST, SlimefunItems.MAGNESIUM_DUST, SlimefunItems.SILVER_DUST
+            SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
+            SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
+            SlimefunItems.TIN_DUST, SlimefunItems.MAGNESIUM_DUST, SlimefunItems.SILVER_DUST
     ));
 
     public static final int MAX_STACK_SIZE = 64;
-
-    private Constants() {}
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Events.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java
similarity index 86%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/Events.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java
index 0cefe17..8f76aff 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Events.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java
@@ -1,12 +1,11 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.Barrel;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.FireproofRune;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.HelicopterHat;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.WateringCan;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.AlternateElevatorPlate;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.ncbpfluffybear.fluffymachines.items.Barrel;
-import io.ncbpfluffybear.fluffymachines.items.FireproofRune;
-import io.ncbpfluffybear.fluffymachines.items.HelicopterHat;
-import io.ncbpfluffybear.fluffymachines.items.tools.WateringCan;
-import io.ncbpfluffybear.fluffymachines.machines.AlternateElevatorPlate;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -34,8 +33,9 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-public class Events implements Listener {
+import javax.annotation.Nonnull;
 
+public class EventUtils implements Listener {
     final HelicopterHat helicopterHat = (HelicopterHat) FluffyItems.HELICOPTER_HAT.getItem();
     final WateringCan wateringCan = (WateringCan) FluffyItems.WATERING_CAN.getItem();
 
@@ -43,11 +43,8 @@ public class Events implements Listener {
     public void onHelicopterHatUse(PlayerToggleSneakEvent e) {
         Player p = e.getPlayer();
         if (helicopterHat.isItem(p.getEquipment().getHelmet())) {
-            if (e.isSneaking()) {
-                p.addPotionEffect(new PotionEffect(PotionEffectType.LEVITATION, 1000000, 4));
-            } else {
-                p.removePotionEffect(PotionEffectType.LEVITATION);
-            }
+            if (e.isSneaking()) p.addPotionEffect(new PotionEffect(PotionEffectType.LEVITATION, 1000000, 4));
+            else p.removePotionEffect(PotionEffectType.LEVITATION);
         }
     }
 
@@ -75,10 +72,7 @@ public class Events implements Listener {
         ) {
             Player p = (Player) e.getEntity();
             ItemStack helmet = p.getEquipment().getHelmet();
-            if (helmet != null && helicopterHat.isItem(helmet)
-            ) {
-                e.setCancelled(true);
-            }
+            if (helmet != null && helicopterHat.isItem(helmet)) e.setCancelled(true);
         }
     }
 
@@ -109,11 +103,9 @@ public class Events implements Listener {
                     || e.getCause() == EntityDamageEvent.DamageCause.FIRE_TICK
                     || e.getCause() == EntityDamageEvent.DamageCause.LAVA
                     || e.getCause() == EntityDamageEvent.DamageCause.LIGHTNING)
-                    && !en.isDead()
-            ) {
+                    && !en.isDead()) {
                 en.remove();
                 en.getLocation().getWorld().dropItem(en.getLocation(), item);
-
             }
         }
     }
@@ -148,19 +140,14 @@ public class Events implements Listener {
                     p.playSound(p.getLocation(), Sound.ITEM_CHORUS_FRUIT_TELEPORT, 0.5F, 0.5F);
                     p.spawnParticle(Particle.DRAGON_BREATH, p.getLocation(), 10);
 
-                } else {
-                    Utils.send(p, "&cMissing destination Warp Pad!");
-
-                }
+                } else Utils.send(p, "&cMissing destination Warp Pad!");
             }
         }
     }
 
     @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
     public void onPressurePlateEnter(PlayerInteractEvent e) {
-        if (e.getAction() != Action.PHYSICAL || e.getClickedBlock() == null) {
-            return;
-        }
+        if (e.getAction() != Action.PHYSICAL || e.getClickedBlock() == null) return;
 
         String id = BlockStorage.checkID(e.getClickedBlock());
         if (id != null && id.equals(FluffyItems.ALTERNATE_ELEVATOR_PLATE.getItemId())) {
@@ -181,24 +168,18 @@ public class Events implements Listener {
     @EventHandler(ignoreCancelled = true)
     public void onDollyDispense(BlockDispenseEvent e) {
         SlimefunItem sfItem = SlimefunItem.getByItem(e.getItem());
-        if (sfItem != null && sfItem.getId().equals(FluffyItems.DOLLY.getItemId())) {
-            e.setCancelled(true);
-        }
+        if (sfItem != null && sfItem.getId().equals(FluffyItems.DOLLY.getItemId())) e.setCancelled(true);
     }
 
     @EventHandler(ignoreCancelled = true)
     public void onBarrelBurn(BlockBurnEvent e) {
-        if (BlockStorage.check(e.getBlock()) instanceof Barrel) {
-            e.setCancelled(true);
-        }
+        if (BlockStorage.check(e.getBlock()) instanceof Barrel) e.setCancelled(true);
     }
 
     private boolean isExtractionNode(@Nonnull ItemStack item) {
         SlimefunItem sfItem = SlimefunItem.getByItem(item);
 
-        if (sfItem == null) {
-            return false;
-        }
+        if (sfItem == null) return false;
         return sfItem.getId().equals(FluffyItems.ENDER_CHEST_EXTRACTION_NODE.getItemId()) || sfItem.getId().equals(FluffyItems.ENDER_CHEST_INSERTION_NODE.getItemId());
     }
 
@@ -206,8 +187,6 @@ public class Events implements Listener {
     private void onCancelPlace(BlockPlaceEvent e) {
         ItemStack item = e.getItemInHand();
         SlimefunItem sfItem = SlimefunItem.getByItem(item);
-        if (sfItem instanceof CancelPlace) {
-            e.setCancelled(true);
-        }
+        if (sfItem instanceof CancelPlace) e.setCancelled(true);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/FluffyItems.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/FluffyItems.java
similarity index 94%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/FluffyItems.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/FluffyItems.java
index 04bf3ca..ef860c8 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/FluffyItems.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/FluffyItems.java
@@ -1,28 +1,18 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
 import dev.j3fftw.extrautils.utils.LoreBuilderDynamic;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.FireproofRune;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.MiniBarrel;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.FluffyWrench;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.PortableCharger;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.CrankGenerator;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.MachineTier;
 import io.github.thebusybiscuit.slimefun4.core.attributes.MachineType;
 import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;
 import io.github.thebusybiscuit.slimefun4.utils.itemstack.ColoredFireworkStar;
-import io.ncbpfluffybear.fluffymachines.items.FireproofRune;
-import io.ncbpfluffybear.fluffymachines.items.MiniBarrel;
-import io.ncbpfluffybear.fluffymachines.items.tools.FluffyWrench;
-import io.ncbpfluffybear.fluffymachines.items.tools.PortableCharger;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedAutoDisenchanter;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedChargingBench;
-import io.ncbpfluffybear.fluffymachines.machines.AutoAncientAltar;
-import io.ncbpfluffybear.fluffymachines.machines.AutoCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.AutoTableSaw;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackLoader;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackUnloader;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustFabricator;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustRecycler;
-import io.ncbpfluffybear.fluffymachines.machines.SmartFactory;
-import io.ncbpfluffybear.fluffymachines.machines.WaterSprinkler;
-import io.ncbpfluffybear.fluffymachines.multiblocks.CrankGenerator;
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.enchantments.Enchantment;
@@ -34,7 +24,6 @@ import org.bukkit.inventory.meta.ItemMeta;
  * Specifies all plugin items
  */
 public class FluffyItems {
-
     private FluffyItems() {
     }
 
@@ -483,4 +472,4 @@ public class FluffyItems {
         meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
         item.setItemMeta(meta);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/McMMOEvents.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/McMMOEvents.java
similarity index 83%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/McMMOEvents.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/McMMOEvents.java
index 154812e..9e6fdf9 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/McMMOEvents.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/McMMOEvents.java
@@ -1,4 +1,4 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
 import com.gmail.nossr50.events.skills.abilities.McMMOPlayerAbilityActivateEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -7,14 +7,10 @@ import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 
 public class McMMOEvents implements Listener {
-
     @EventHandler
     private void onAbility(McMMOPlayerAbilityActivateEvent e) {
         Player p = e.getPlayer();
         SlimefunItem sfItem = SlimefunItem.getByItem(p.getInventory().getItemInMainHand());
-        if (sfItem != null && sfItem.getId().equals(FluffyItems.PAXEL.getItemId())) {
-            e.setCancelled(true);
-        }
+        if (sfItem != null && sfItem.getId().equals(FluffyItems.PAXEL.getItemId())) e.setCancelled(true);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Utils.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Utils.java
similarity index 71%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/Utils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Utils.java
index 8c1b280..a30b93e 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Utils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Utils.java
@@ -1,22 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
+import id.universenetwork.sfa_loader.libraries.guizhanlib.slimefun.addon.AbstractAddon;
+import id.universenetwork.sfa_loader.utils.TextUtils;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.handlers.SimpleBlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.TreeMap;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.apache.commons.lang.WordUtils;
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -26,17 +21,20 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.persistence.PersistentDataType;
-import org.bukkit.scheduler.BukkitTask;
 
-public final class Utils {
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.TreeMap;
 
-    private static final NamespacedKey fluffykey = new NamespacedKey(FluffyMachines.getInstance(), "fluffykey");
-    private static final NamespacedKey nonClickable = new NamespacedKey(FluffyMachines.getInstance(), "nonclickable");
+public final class Utils {
+    private static final NamespacedKey fluffykey = AbstractAddon.createKey("fluffykey");
+    private static final NamespacedKey nonClickable = AbstractAddon.createKey("nonclickable");
 
     private final static TreeMap<Integer, String> map = new TreeMap<>();
 
     static {
-
         map.put(1000, "M");
         map.put(900, "CM");
         map.put(500, "D");
@@ -50,16 +48,10 @@ public final class Utils {
         map.put(5, "V");
         map.put(4, "IV");
         map.put(1, "I");
-
-    }
-
-    private Utils() {
     }
 
     public static String color(String str) {
-        if (str == null) {
-            return null;
-        }
+        if (str == null) return null;
 
         return ChatColor.translateAlternateColorCodes('&', str);
     }
@@ -76,18 +68,13 @@ public final class Utils {
     public static ItemStack buildNonInteractable(Material material, @Nullable String name, @Nullable String... lore) {
         ItemStack nonClickableItem = new ItemStack(material);
         ItemMeta NCMeta = nonClickableItem.getItemMeta();
-        if (name != null) {
-            NCMeta.setDisplayName(ChatColors.color(name));
-        } else {
-            NCMeta.setDisplayName(" ");
-        }
+        if (name != null) NCMeta.setDisplayName(ChatColors.color(name));
+        else NCMeta.setDisplayName(" ");
 
         if (lore.length > 0) {
             List<String> lines = new ArrayList<>();
 
-            for (String line : lore) {
-                lines.add(ChatColor.translateAlternateColorCodes('&', line));
-            }
+            for (String line : lore) lines.add(TextUtils.translateColor(line));
             NCMeta.setLore(lines);
         }
 
@@ -98,22 +85,17 @@ public final class Utils {
 
     // TODO: Deprecate custom model data method of detecting non interactables
     public static boolean checkNonInteractable(ItemStack item) {
-        if (item == null || item.getItemMeta() == null) {
-            return false;
-        }
+        if (item == null || item.getItemMeta() == null) return false;
 
         return item.getItemMeta().getPersistentDataContainer().getOrDefault(nonClickable, PersistentDataType.BYTE, (byte) 0) == 1;
     }
 
     public static void createBorder(ChestMenu menu, ItemStack backgroundItem, int[] slots) {
-        for (int slot : slots) {
-            menu.addItem(slot, backgroundItem, ChestMenuUtils.getEmptyClickHandler());
-        }
+        for (int slot : slots) menu.addItem(slot, backgroundItem, ChestMenuUtils.getEmptyClickHandler());
     }
 
     public static BlockBreakHandler getDefaultBreakHandler(int[] inputs, int[] outputs) {
         return new SimpleBlockBreakHandler() {
-
             @Override
             public void onBlockBreak(@Nonnull Block b) {
                 BlockMenu inv = BlockStorage.getInventory(b);
@@ -123,29 +105,22 @@ public final class Utils {
                     inv.dropItems(b.getLocation(), outputs);
                 }
             }
-
         };
     }
 
     public static void giveOrDropItem(Player p, ItemStack toGive) {
-        for (ItemStack leftover : p.getInventory().addItem(toGive).values()) {
+        for (ItemStack leftover : p.getInventory().addItem(toGive).values())
             p.getWorld().dropItemNaturally(p.getLocation(), leftover);
-        }
     }
 
     public static String getViewableName(ItemStack item) {
-        if (item.getItemMeta().hasDisplayName()) {
-            return item.getItemMeta().getDisplayName();
-        } else {
-            return WordUtils.capitalizeFully(item.getType().name().replace("_", " "));
-        }
+        if (item.getItemMeta().hasDisplayName()) return item.getItemMeta().getDisplayName();
+        else return WordUtils.capitalizeFully(item.getType().name().replace("_", " "));
     }
 
     public static String toRoman(int number) {
         int l = map.floorKey(number);
-        if (number == l) {
-            return map.get(number);
-        }
+        if (number == l) return map.get(number);
         return map.get(l) + toRoman(number - l);
     }
 
@@ -170,16 +145,4 @@ public final class Utils {
                 || Slimefun.getProtectionManager().hasPermission(
                 p, b.getLocation(), Interaction.INTERACT_BLOCK));
     }
-
-    // Don't use Slimefun's runsync
-    public static BukkitTask runSync(Runnable r) {
-        return FluffyMachines.getInstance() != null && FluffyMachines.getInstance().isEnabled() ?
-                Bukkit.getScheduler().runTask(FluffyMachines.getInstance(), r) : null;
-    }
-
-    public static BukkitTask runSync(Runnable r, long delay) {
-        return FluffyMachines.getInstance() != null && FluffyMachines.getInstance().isEnabled() ?
-                Bukkit.getScheduler().runTaskLater(FluffyMachines.getInstance(), r, delay) : null;
-    }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java b/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java
deleted file mode 100644
index 749db29..0000000
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java
+++ /dev/null
@@ -1,210 +0,0 @@
-package io.ncbpfluffybear.fluffymachines;
-
-import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
-import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.config.Config;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.BlobBuildUpdater;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.GitHubBuildsUpdater;
-import io.ncbpfluffybear.fluffymachines.listeners.KeyedCrafterListener;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.ncbpfluffybear.fluffymachines.utils.Events;
-import io.ncbpfluffybear.fluffymachines.utils.McMMOEvents;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.logging.Level;
-import javax.annotation.Nonnull;
-import lombok.SneakyThrows;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import org.bstats.bukkit.Metrics;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.Registry;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandSender;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.enchantments.EnchantmentWrapper;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.Recipe;
-import org.bukkit.inventory.RecipeChoice;
-import org.bukkit.inventory.ShapedRecipe;
-import org.bukkit.inventory.ShapelessRecipe;
-import org.bukkit.plugin.java.JavaPlugin;
-import org.bukkit.util.RayTraceResult;
-
-public class FluffyMachines extends JavaPlugin implements SlimefunAddon {
-
-    private static FluffyMachines instance;
-    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapedVanillaRecipes = new HashMap<>();
-    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapelessVanillaRecipes =
-            new HashMap<>();
-
-    @SneakyThrows
-    @Override
-    public void onEnable() {
-        instance = this;
-        // Read something from your config.yml
-        Config cfg = new Config(this);
-
-        if (cfg.getBoolean("options.auto-update") && getDescription().getVersion().startsWith("Dev - ")) {
-            new BlobBuildUpdater(this, getFile(), "FluffyMachines", "Dev").start();
-        }
-
-        // Register ACT Recipes
-        Iterator<Recipe> recipeIterator = Bukkit.recipeIterator();
-        while (recipeIterator.hasNext()) {
-            Recipe r = recipeIterator.next();
-
-            if (r instanceof ShapedRecipe) {
-                ShapedRecipe sr = (ShapedRecipe) r;
-                List<RecipeChoice> rc = new ArrayList<>();
-                ItemStack key = new ItemStack(sr.getResult().getType(), 1);
-
-                // Convert the recipe to a list
-                for (Map.Entry<Character, RecipeChoice> choice : sr.getChoiceMap().entrySet()) {
-                    if (choice.getValue() != null) {
-                        rc.add(choice.getValue());
-                    }
-                }
-
-                if (!shapedVanillaRecipes.containsKey(key)) {
-                    shapedVanillaRecipes.put(key,
-                            new ArrayList<>(Collections.singletonList(new Pair<>(sr.getResult(), rc))));
-                } else {
-                    shapedVanillaRecipes.get(key).add(new Pair<>(sr.getResult(), rc));
-                }
-
-            } else if (r instanceof ShapelessRecipe) {
-                ShapelessRecipe slr = (ShapelessRecipe) r;
-                ItemStack key = new ItemStack(slr.getResult().getType(), 1);
-
-                // Key has a list of recipe options
-                if (!shapelessVanillaRecipes.containsKey(key)) {
-                    shapelessVanillaRecipes.put(key,
-                            new ArrayList<>(Collections.singletonList(new Pair<>(slr.getResult(), slr.getChoiceList()))));
-                } else {
-                    shapelessVanillaRecipes.get(key).add(new Pair<>(slr.getResult(), slr.getChoiceList()));
-                }
-            }
-        }
-
-        // Register McMMO Events
-        if (getServer().getPluginManager().isPluginEnabled("McMMO")) {
-            Bukkit.getLogger().log(Level.INFO, "McMMO found!");
-            getServer().getPluginManager().registerEvents(new McMMOEvents(), this);
-        }
-
-        // Registering Items
-        FluffyItemSetup.setup(this);
-        FluffyItemSetup.setupBarrels(this);
-
-        // Register Events Class
-        getServer().getPluginManager().registerEvents(new Events(), this);
-        getServer().getPluginManager().registerEvents(new KeyedCrafterListener(), this);
-
-        final Metrics metrics = new Metrics(this, 8927);
-    }
-
-    @Override
-    public void onDisable() {
-        // Logic for disabling the plugin...
-    }
-
-    @Override
-    public boolean onCommand(@Nonnull CommandSender sender, @Nonnull Command cmd, @Nonnull String label, String[] args) {
-
-        if (args.length == 0) {
-            Utils.send(sender, "&cInvalid command");
-            return true;
-        }
-
-        if (!(sender instanceof Player)) {
-            Utils.send(sender, "&cThere are no console commands available");
-            return true;
-        }
-
-        Player p = (Player) sender;
-
-        switch (args[0].toUpperCase()) {
-            case "META":
-                Utils.send(p, String.valueOf(p.getInventory().getItemInMainHand().getItemMeta()));
-                return true;
-            case "RAWMETA":
-                p.sendMessage(String.valueOf(p.getInventory().getItemInMainHand().getItemMeta()).replace("§", "&"));
-                return true;
-            case "VERSION":
-            case "V":
-                Utils.send(p, "&eThe current version is " + this.getPluginVersion());
-                return true;
-        }
-
-        if (p.hasPermission("fluffymachines.admin")) {
-            switch (args[0].toUpperCase()) {
-                case "ADDINFO":
-
-                    if (args.length != 3) {
-                        Utils.send(p, "&cPlease specify the key and the data");
-
-                    } else {
-                        RayTraceResult rayResult = p.rayTraceBlocks(5d);
-                        if (rayResult != null && rayResult.getHitBlock() != null
-                                && BlockStorage.hasBlockInfo(rayResult.getHitBlock())) {
-
-                            BlockStorage.addBlockInfo(rayResult.getHitBlock(), args[1], args[2]);
-                            Utils.send(p, "&aInfo has been added.");
-
-                        } else {
-                            Utils.send(p, "&cYou must be looking at a Slimefun block");
-                        }
-                    }
-                    return true;
-                case "SAVEPLAYERS":
-                    saveAllPlayers();
-                    return true;
-            }
-        }
-
-        Utils.send(p, "&cCommand not found");
-
-        return false;
-    }
-
-    private void saveAllPlayers() {
-        Iterator<PlayerProfile> iterator = PlayerProfile.iterator();
-        int players = 0;
-
-        while (iterator.hasNext()) {
-            PlayerProfile profile = iterator.next();
-
-            profile.save();
-            players++;
-        }
-
-        if (players > 0) {
-            Bukkit.getLogger().log(Level.INFO, "Auto-saved all player data for {0} player(s)!", players);
-        }
-    }
-
-    @Override
-    public String getBugTrackerURL() {
-        return "https://github.com/NCBPFluffyBear/FluffyMachines/issues";
-    }
-
-    @Nonnull
-    @Override
-    public JavaPlugin getJavaPlugin() {
-        return this;
-    }
-
-    public static FluffyMachines getInstance() {
-        return instance;
-    }
-
-}
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoArmorForge.java b/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoArmorForge.java
deleted file mode 100644
index 6d4c395..0000000
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoArmorForge.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package io.ncbpfluffybear.fluffymachines.machines;
-
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-public class AutoArmorForge extends AutoCrafter {
-
-    public AutoArmorForge(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe, "&7Auto Armor Forge", Material.ANVIL, "&7Armor Forge", RecipeType.ARMOR_FORGE);
-    }
-}
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java b/src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java
deleted file mode 100644
index d4ea2ce..0000000
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package io.ncbpfluffybear.fluffymachines.utils;
-
-public interface CancelPlace {
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/config.yml
deleted file mode 100644
index 89dbdf6..0000000
--- a/src/main/resources/config.yml
+++ /dev/null
@@ -1,3 +0,0 @@
-options:
-  auto-update: true
-  ignore-outdated-warning: false
\ No newline at end of file
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index f1301b3..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,31 +0,0 @@
-## CHANGE this to the name of your plugin.
-name: FluffyMachines
-
-## CHANGE this to your username.
-author: NCBPFluffyBear
-
-## CHANGE this to a meaninful but short description of your plugin.
-description: A fun addon
-
-## CHANGE this to the path of the class that extends JavaPlugin.
-main: io.ncbpfluffybear.fluffymachines.FluffyMachines
-
-## This is required and marks Slimefun as a plugin dependency.
-depend: [Slimefun]
-softdepend: [mcMMO, NoCheatPlus]
-
-## This value is automatically replaced by the version specified in your pom.xml file, do not change this.
-version: ${project.version}
-
-## This is the minimum minecraft version required to run your plugin.
-api-version: 1.14
-
-commands:
-  fluffymachines:
-    description: FluffyMachines Command
-    usage: /<command>
-    aliases: [fm]
-
-permissions:
-  fluffymachines.admin:
-    description: Allows you to use FluffyMachines admin commands
\ No newline at end of file
-- 
2.44.0.windows.1

